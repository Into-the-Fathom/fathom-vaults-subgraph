// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class DebtPurchased extends ethereum.Event {
  get params(): DebtPurchased__Params {
    return new DebtPurchased__Params(this);
  }
}

export class DebtPurchased__Params {
  _event: DebtPurchased;

  constructor(event: DebtPurchased) {
    this._event = event;
  }

  get strategy(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class DebtUpdated extends ethereum.Event {
  get params(): DebtUpdated__Params {
    return new DebtUpdated__Params(this);
  }
}

export class DebtUpdated__Params {
  _event: DebtUpdated;

  constructor(event: DebtUpdated) {
    this._event = event;
  }

  get strategy(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get currentDebt(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get newDebt(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class RoleAdminChanged extends ethereum.Event {
  get params(): RoleAdminChanged__Params {
    return new RoleAdminChanged__Params(this);
  }
}

export class RoleAdminChanged__Params {
  _event: RoleAdminChanged;

  constructor(event: RoleAdminChanged) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get previousAdminRole(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get newAdminRole(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class RoleGranted extends ethereum.Event {
  get params(): RoleGranted__Params {
    return new RoleGranted__Params(this);
  }
}

export class RoleGranted__Params {
  _event: RoleGranted;

  constructor(event: RoleGranted) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoleRevoked extends ethereum.Event {
  get params(): RoleRevoked__Params {
    return new RoleRevoked__Params(this);
  }
}

export class RoleRevoked__Params {
  _event: RoleRevoked;

  constructor(event: RoleRevoked) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoleSet extends ethereum.Event {
  get params(): RoleSet__Params {
    return new RoleSet__Params(this);
  }
}

export class RoleSet__Params {
  _event: RoleSet;

  constructor(event: RoleSet) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get role(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class RoleStatusChanged extends ethereum.Event {
  get params(): RoleStatusChanged__Params {
    return new RoleStatusChanged__Params(this);
  }
}

export class RoleStatusChanged__Params {
  _event: RoleStatusChanged;

  constructor(event: RoleStatusChanged) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get status(): i32 {
    return this._event.parameters[1].value.toI32();
  }
}

export class Shutdown extends ethereum.Event {
  get params(): Shutdown__Params {
    return new Shutdown__Params(this);
  }
}

export class Shutdown__Params {
  _event: Shutdown;

  constructor(event: Shutdown) {
    this._event = event;
  }
}

export class StrategyChanged extends ethereum.Event {
  get params(): StrategyChanged__Params {
    return new StrategyChanged__Params(this);
  }
}

export class StrategyChanged__Params {
  _event: StrategyChanged;

  constructor(event: StrategyChanged) {
    this._event = event;
  }

  get strategy(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get changeType(): i32 {
    return this._event.parameters[1].value.toI32();
  }
}

export class StrategyReported extends ethereum.Event {
  get params(): StrategyReported__Params {
    return new StrategyReported__Params(this);
  }
}

export class StrategyReported__Params {
  _event: StrategyReported;

  constructor(event: StrategyReported) {
    this._event = event;
  }

  get strategy(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get gain(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get loss(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get currentDebt(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get protocolFees(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get totalFees(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get totalRefunds(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class UpdateAccountant extends ethereum.Event {
  get params(): UpdateAccountant__Params {
    return new UpdateAccountant__Params(this);
  }
}

export class UpdateAccountant__Params {
  _event: UpdateAccountant;

  constructor(event: UpdateAccountant) {
    this._event = event;
  }

  get accountant(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class UpdateDefaultQueue extends ethereum.Event {
  get params(): UpdateDefaultQueue__Params {
    return new UpdateDefaultQueue__Params(this);
  }
}

export class UpdateDefaultQueue__Params {
  _event: UpdateDefaultQueue;

  constructor(event: UpdateDefaultQueue) {
    this._event = event;
  }

  get newDefaultQueue(): Array<Address> {
    return this._event.parameters[0].value.toAddressArray();
  }
}

export class UpdateDepositLimit extends ethereum.Event {
  get params(): UpdateDepositLimit__Params {
    return new UpdateDepositLimit__Params(this);
  }
}

export class UpdateDepositLimit__Params {
  _event: UpdateDepositLimit;

  constructor(event: UpdateDepositLimit) {
    this._event = event;
  }

  get depositLimit(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class UpdateDepositLimitModule extends ethereum.Event {
  get params(): UpdateDepositLimitModule__Params {
    return new UpdateDepositLimitModule__Params(this);
  }
}

export class UpdateDepositLimitModule__Params {
  _event: UpdateDepositLimitModule;

  constructor(event: UpdateDepositLimitModule) {
    this._event = event;
  }

  get depositLimitModule(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class UpdateMinimumTotalIdle extends ethereum.Event {
  get params(): UpdateMinimumTotalIdle__Params {
    return new UpdateMinimumTotalIdle__Params(this);
  }
}

export class UpdateMinimumTotalIdle__Params {
  _event: UpdateMinimumTotalIdle;

  constructor(event: UpdateMinimumTotalIdle) {
    this._event = event;
  }

  get minimumTotalIdle(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class UpdateProfitMaxUnlockTime extends ethereum.Event {
  get params(): UpdateProfitMaxUnlockTime__Params {
    return new UpdateProfitMaxUnlockTime__Params(this);
  }
}

export class UpdateProfitMaxUnlockTime__Params {
  _event: UpdateProfitMaxUnlockTime;

  constructor(event: UpdateProfitMaxUnlockTime) {
    this._event = event;
  }

  get profitMaxUnlockTime(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class UpdateRoleManager extends ethereum.Event {
  get params(): UpdateRoleManager__Params {
    return new UpdateRoleManager__Params(this);
  }
}

export class UpdateRoleManager__Params {
  _event: UpdateRoleManager;

  constructor(event: UpdateRoleManager) {
    this._event = event;
  }

  get roleManager(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class UpdateUseDefaultQueue extends ethereum.Event {
  get params(): UpdateUseDefaultQueue__Params {
    return new UpdateUseDefaultQueue__Params(this);
  }
}

export class UpdateUseDefaultQueue__Params {
  _event: UpdateUseDefaultQueue;

  constructor(event: UpdateUseDefaultQueue) {
    this._event = event;
  }

  get useDefaultQueue(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }
}

export class UpdateWithdrawLimitModule extends ethereum.Event {
  get params(): UpdateWithdrawLimitModule__Params {
    return new UpdateWithdrawLimitModule__Params(this);
  }
}

export class UpdateWithdrawLimitModule__Params {
  _event: UpdateWithdrawLimitModule;

  constructor(event: UpdateWithdrawLimitModule) {
    this._event = event;
  }

  get withdrawLimitModule(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class UpdatedMaxDebtForStrategy extends ethereum.Event {
  get params(): UpdatedMaxDebtForStrategy__Params {
    return new UpdatedMaxDebtForStrategy__Params(this);
  }
}

export class UpdatedMaxDebtForStrategy__Params {
  _event: UpdatedMaxDebtForStrategy;

  constructor(event: UpdatedMaxDebtForStrategy) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get strategy(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get newDebt(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class StrategyManager__feesResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: Address;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: Address) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    return map;
  }
}

export class StrategyManager__processReportResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class StrategyManager__strategiesResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }
}

export class StrategyManager extends ethereum.SmartContract {
  static bind(address: Address): StrategyManager {
    return new StrategyManager("StrategyManager", address);
  }

  ACCOUNTANT_MANAGER(): Bytes {
    let result = super.call(
      "ACCOUNTANT_MANAGER",
      "ACCOUNTANT_MANAGER():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_ACCOUNTANT_MANAGER(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "ACCOUNTANT_MANAGER",
      "ACCOUNTANT_MANAGER():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  ADD_STRATEGY_MANAGER(): Bytes {
    let result = super.call(
      "ADD_STRATEGY_MANAGER",
      "ADD_STRATEGY_MANAGER():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_ADD_STRATEGY_MANAGER(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "ADD_STRATEGY_MANAGER",
      "ADD_STRATEGY_MANAGER():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  API_VERSION(): string {
    let result = super.call("API_VERSION", "API_VERSION():(string)", []);

    return result[0].toString();
  }

  try_API_VERSION(): ethereum.CallResult<string> {
    let result = super.tryCall("API_VERSION", "API_VERSION():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  ASSET(): Address {
    let result = super.call("ASSET", "ASSET():(address)", []);

    return result[0].toAddress();
  }

  try_ASSET(): ethereum.CallResult<Address> {
    let result = super.tryCall("ASSET", "ASSET():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  DEBT_MANAGER(): Bytes {
    let result = super.call("DEBT_MANAGER", "DEBT_MANAGER():(bytes32)", []);

    return result[0].toBytes();
  }

  try_DEBT_MANAGER(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("DEBT_MANAGER", "DEBT_MANAGER():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  DEBT_PURCHASER(): Bytes {
    let result = super.call("DEBT_PURCHASER", "DEBT_PURCHASER():(bytes32)", []);

    return result[0].toBytes();
  }

  try_DEBT_PURCHASER(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DEBT_PURCHASER",
      "DEBT_PURCHASER():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  DEFAULT_ADMIN_ROLE(): Bytes {
    let result = super.call(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DEFAULT_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  DEPOSIT_LIMIT_MANAGER(): Bytes {
    let result = super.call(
      "DEPOSIT_LIMIT_MANAGER",
      "DEPOSIT_LIMIT_MANAGER():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DEPOSIT_LIMIT_MANAGER(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DEPOSIT_LIMIT_MANAGER",
      "DEPOSIT_LIMIT_MANAGER():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  DOMAIN_SEPARATOR(): Bytes {
    let result = super.call(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DOMAIN_SEPARATOR(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  DOMAIN_TYPE_HASH(): Bytes {
    let result = super.call(
      "DOMAIN_TYPE_HASH",
      "DOMAIN_TYPE_HASH():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DOMAIN_TYPE_HASH(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DOMAIN_TYPE_HASH",
      "DOMAIN_TYPE_HASH():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  EMERGENCY_MANAGER(): Bytes {
    let result = super.call(
      "EMERGENCY_MANAGER",
      "EMERGENCY_MANAGER():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_EMERGENCY_MANAGER(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "EMERGENCY_MANAGER",
      "EMERGENCY_MANAGER():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  FACTORY(): Address {
    let result = super.call("FACTORY", "FACTORY():(address)", []);

    return result[0].toAddress();
  }

  try_FACTORY(): ethereum.CallResult<Address> {
    let result = super.tryCall("FACTORY", "FACTORY():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  FORCE_REVOKE_MANAGER(): Bytes {
    let result = super.call(
      "FORCE_REVOKE_MANAGER",
      "FORCE_REVOKE_MANAGER():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_FORCE_REVOKE_MANAGER(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "FORCE_REVOKE_MANAGER",
      "FORCE_REVOKE_MANAGER():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  MAX_BPS(): BigInt {
    let result = super.call("MAX_BPS", "MAX_BPS():(uint256)", []);

    return result[0].toBigInt();
  }

  try_MAX_BPS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("MAX_BPS", "MAX_BPS():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAX_BPS_EXTENDED(): BigInt {
    let result = super.call(
      "MAX_BPS_EXTENDED",
      "MAX_BPS_EXTENDED():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MAX_BPS_EXTENDED(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_BPS_EXTENDED",
      "MAX_BPS_EXTENDED():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAX_DEBT_MANAGER(): Bytes {
    let result = super.call(
      "MAX_DEBT_MANAGER",
      "MAX_DEBT_MANAGER():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_MAX_DEBT_MANAGER(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "MAX_DEBT_MANAGER",
      "MAX_DEBT_MANAGER():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  MAX_QUEUE(): BigInt {
    let result = super.call("MAX_QUEUE", "MAX_QUEUE():(uint256)", []);

    return result[0].toBigInt();
  }

  try_MAX_QUEUE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("MAX_QUEUE", "MAX_QUEUE():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MINIMUM_IDLE_MANAGER(): Bytes {
    let result = super.call(
      "MINIMUM_IDLE_MANAGER",
      "MINIMUM_IDLE_MANAGER():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_MINIMUM_IDLE_MANAGER(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "MINIMUM_IDLE_MANAGER",
      "MINIMUM_IDLE_MANAGER():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  ONE_YEAR(): BigInt {
    let result = super.call("ONE_YEAR", "ONE_YEAR():(uint256)", []);

    return result[0].toBigInt();
  }

  try_ONE_YEAR(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("ONE_YEAR", "ONE_YEAR():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  PERMIT_TYPE_HASH(): Bytes {
    let result = super.call(
      "PERMIT_TYPE_HASH",
      "PERMIT_TYPE_HASH():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_PERMIT_TYPE_HASH(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "PERMIT_TYPE_HASH",
      "PERMIT_TYPE_HASH():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  PROFIT_UNLOCK_MANAGER(): Bytes {
    let result = super.call(
      "PROFIT_UNLOCK_MANAGER",
      "PROFIT_UNLOCK_MANAGER():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_PROFIT_UNLOCK_MANAGER(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "PROFIT_UNLOCK_MANAGER",
      "PROFIT_UNLOCK_MANAGER():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  QUEUE_MANAGER(): Bytes {
    let result = super.call("QUEUE_MANAGER", "QUEUE_MANAGER():(bytes32)", []);

    return result[0].toBytes();
  }

  try_QUEUE_MANAGER(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "QUEUE_MANAGER",
      "QUEUE_MANAGER():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  REPORTING_MANAGER(): Bytes {
    let result = super.call(
      "REPORTING_MANAGER",
      "REPORTING_MANAGER():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_REPORTING_MANAGER(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "REPORTING_MANAGER",
      "REPORTING_MANAGER():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  REVOKE_STRATEGY_MANAGER(): Bytes {
    let result = super.call(
      "REVOKE_STRATEGY_MANAGER",
      "REVOKE_STRATEGY_MANAGER():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_REVOKE_STRATEGY_MANAGER(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "REVOKE_STRATEGY_MANAGER",
      "REVOKE_STRATEGY_MANAGER():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  ROLE_MANAGER(): Bytes {
    let result = super.call("ROLE_MANAGER", "ROLE_MANAGER():(bytes32)", []);

    return result[0].toBytes();
  }

  try_ROLE_MANAGER(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("ROLE_MANAGER", "ROLE_MANAGER():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  WITHDRAW_LIMIT_MANAGER(): Bytes {
    let result = super.call(
      "WITHDRAW_LIMIT_MANAGER",
      "WITHDRAW_LIMIT_MANAGER():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_WITHDRAW_LIMIT_MANAGER(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "WITHDRAW_LIMIT_MANAGER",
      "WITHDRAW_LIMIT_MANAGER():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  accountant(): Address {
    let result = super.call("accountant", "accountant():(address)", []);

    return result[0].toAddress();
  }

  try_accountant(): ethereum.CallResult<Address> {
    let result = super.tryCall("accountant", "accountant():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  defaultQueue(param0: BigInt): Address {
    let result = super.call("defaultQueue", "defaultQueue(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_defaultQueue(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "defaultQueue",
      "defaultQueue(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  depositLimit(): BigInt {
    let result = super.call("depositLimit", "depositLimit():(uint256)", []);

    return result[0].toBigInt();
  }

  try_depositLimit(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("depositLimit", "depositLimit():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  depositLimitModule(): Address {
    let result = super.call(
      "depositLimitModule",
      "depositLimitModule():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_depositLimitModule(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "depositLimitModule",
      "depositLimitModule():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  fees(): StrategyManager__feesResult {
    let result = super.call(
      "fees",
      "fees():(uint256,uint256,uint256,address)",
      []
    );

    return new StrategyManager__feesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toAddress()
    );
  }

  try_fees(): ethereum.CallResult<StrategyManager__feesResult> {
    let result = super.tryCall(
      "fees",
      "fees():(uint256,uint256,uint256,address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new StrategyManager__feesResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toAddress()
      )
    );
  }

  fullProfitUnlockDate(): BigInt {
    let result = super.call(
      "fullProfitUnlockDate",
      "fullProfitUnlockDate():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_fullProfitUnlockDate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "fullProfitUnlockDate",
      "fullProfitUnlockDate():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  futureRoleManager(): Address {
    let result = super.call(
      "futureRoleManager",
      "futureRoleManager():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_futureRoleManager(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "futureRoleManager",
      "futureRoleManager():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getDebt(strategy: Address): BigInt {
    let result = super.call("getDebt", "getDebt(address):(uint256)", [
      ethereum.Value.fromAddress(strategy)
    ]);

    return result[0].toBigInt();
  }

  try_getDebt(strategy: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getDebt", "getDebt(address):(uint256)", [
      ethereum.Value.fromAddress(strategy)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getDefaultQueue(): Array<Address> {
    let result = super.call(
      "getDefaultQueue",
      "getDefaultQueue():(address[])",
      []
    );

    return result[0].toAddressArray();
  }

  try_getDefaultQueue(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getDefaultQueue",
      "getDefaultQueue():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getDefaultQueueLength(): BigInt {
    let result = super.call(
      "getDefaultQueueLength",
      "getDefaultQueueLength():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getDefaultQueueLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getDefaultQueueLength",
      "getDefaultQueueLength():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRoleAdmin(role: Bytes): Bytes {
    let result = super.call("getRoleAdmin", "getRoleAdmin(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(role)
    ]);

    return result[0].toBytes();
  }

  try_getRoleAdmin(role: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getRoleAdmin",
      "getRoleAdmin(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  governance(): Address {
    let result = super.call("governance", "governance():(address)", []);

    return result[0].toAddress();
  }

  try_governance(): ethereum.CallResult<Address> {
    let result = super.tryCall("governance", "governance():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  hasRole(role: Bytes, account: Address): boolean {
    let result = super.call("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_hasRole(role: Bytes, account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lastProfitUpdate(): BigInt {
    let result = super.call(
      "lastProfitUpdate",
      "lastProfitUpdate():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_lastProfitUpdate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastProfitUpdate",
      "lastProfitUpdate():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minimumTotalIdle(): BigInt {
    let result = super.call(
      "minimumTotalIdle",
      "minimumTotalIdle():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_minimumTotalIdle(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minimumTotalIdle",
      "minimumTotalIdle():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nonces(param0: Address): BigInt {
    let result = super.call("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_nonces(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  openRoles(param0: Bytes): boolean {
    let result = super.call("openRoles", "openRoles(bytes32):(bool)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);

    return result[0].toBoolean();
  }

  try_openRoles(param0: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall("openRoles", "openRoles(bytes32):(bool)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  processReport(strategy: Address): StrategyManager__processReportResult {
    let result = super.call(
      "processReport",
      "processReport(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(strategy)]
    );

    return new StrategyManager__processReportResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_processReport(
    strategy: Address
  ): ethereum.CallResult<StrategyManager__processReportResult> {
    let result = super.tryCall(
      "processReport",
      "processReport(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(strategy)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new StrategyManager__processReportResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  profitMaxUnlockTime(): BigInt {
    let result = super.call(
      "profitMaxUnlockTime",
      "profitMaxUnlockTime():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_profitMaxUnlockTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "profitMaxUnlockTime",
      "profitMaxUnlockTime():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  profitUnlockingRate(): BigInt {
    let result = super.call(
      "profitUnlockingRate",
      "profitUnlockingRate():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_profitUnlockingRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "profitUnlockingRate",
      "profitUnlockingRate():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  roleManager(): Address {
    let result = super.call("roleManager", "roleManager():(address)", []);

    return result[0].toAddress();
  }

  try_roleManager(): ethereum.CallResult<Address> {
    let result = super.tryCall("roleManager", "roleManager():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  roles(param0: Address): Bytes {
    let result = super.call("roles", "roles(address):(bytes32)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBytes();
  }

  try_roles(param0: Address): ethereum.CallResult<Bytes> {
    let result = super.tryCall("roles", "roles(address):(bytes32)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  setters(): Address {
    let result = super.call("setters", "setters():(address)", []);

    return result[0].toAddress();
  }

  try_setters(): ethereum.CallResult<Address> {
    let result = super.tryCall("setters", "setters():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  sharesManager(): Address {
    let result = super.call("sharesManager", "sharesManager():(address)", []);

    return result[0].toAddress();
  }

  try_sharesManager(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "sharesManager",
      "sharesManager():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  shutdown(): boolean {
    let result = super.call("shutdown", "shutdown():(bool)", []);

    return result[0].toBoolean();
  }

  try_shutdown(): ethereum.CallResult<boolean> {
    let result = super.tryCall("shutdown", "shutdown():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  strategies(param0: Address): StrategyManager__strategiesResult {
    let result = super.call(
      "strategies",
      "strategies(address):(uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new StrategyManager__strategiesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_strategies(
    param0: Address
  ): ethereum.CallResult<StrategyManager__strategiesResult> {
    let result = super.tryCall(
      "strategies",
      "strategies(address):(uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new StrategyManager__strategiesResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  strategyManager(): Address {
    let result = super.call(
      "strategyManager",
      "strategyManager():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_strategyManager(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "strategyManager",
      "strategyManager():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  totalDebtAmount(): BigInt {
    let result = super.call(
      "totalDebtAmount",
      "totalDebtAmount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalDebtAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalDebtAmount",
      "totalDebtAmount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalIdleAmount(): BigInt {
    let result = super.call(
      "totalIdleAmount",
      "totalIdleAmount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalIdleAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalIdleAmount",
      "totalIdleAmount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupplyAmount(): BigInt {
    let result = super.call(
      "totalSupplyAmount",
      "totalSupplyAmount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalSupplyAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalSupplyAmount",
      "totalSupplyAmount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  updateDebt(sender: Address, strategy: Address, targetDebt: BigInt): BigInt {
    let result = super.call(
      "updateDebt",
      "updateDebt(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(strategy),
        ethereum.Value.fromUnsignedBigInt(targetDebt)
      ]
    );

    return result[0].toBigInt();
  }

  try_updateDebt(
    sender: Address,
    strategy: Address,
    targetDebt: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "updateDebt",
      "updateDebt(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(strategy),
        ethereum.Value.fromUnsignedBigInt(targetDebt)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  useDefaultQueue(): boolean {
    let result = super.call("useDefaultQueue", "useDefaultQueue():(bool)", []);

    return result[0].toBoolean();
  }

  try_useDefaultQueue(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "useDefaultQueue",
      "useDefaultQueue():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  withdrawLimitModule(): Address {
    let result = super.call(
      "withdrawLimitModule",
      "withdrawLimitModule():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_withdrawLimitModule(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "withdrawLimitModule",
      "withdrawLimitModule():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _asset(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _sharesManager(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddStrategyCall extends ethereum.Call {
  get inputs(): AddStrategyCall__Inputs {
    return new AddStrategyCall__Inputs(this);
  }

  get outputs(): AddStrategyCall__Outputs {
    return new AddStrategyCall__Outputs(this);
  }
}

export class AddStrategyCall__Inputs {
  _call: AddStrategyCall;

  constructor(call: AddStrategyCall) {
    this._call = call;
  }

  get newStrategy(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddStrategyCall__Outputs {
  _call: AddStrategyCall;

  constructor(call: AddStrategyCall) {
    this._call = call;
  }
}

export class GrantRoleCall extends ethereum.Call {
  get inputs(): GrantRoleCall__Inputs {
    return new GrantRoleCall__Inputs(this);
  }

  get outputs(): GrantRoleCall__Outputs {
    return new GrantRoleCall__Outputs(this);
  }
}

export class GrantRoleCall__Inputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GrantRoleCall__Outputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }
}

export class ProcessReportCall extends ethereum.Call {
  get inputs(): ProcessReportCall__Inputs {
    return new ProcessReportCall__Inputs(this);
  }

  get outputs(): ProcessReportCall__Outputs {
    return new ProcessReportCall__Outputs(this);
  }
}

export class ProcessReportCall__Inputs {
  _call: ProcessReportCall;

  constructor(call: ProcessReportCall) {
    this._call = call;
  }

  get strategy(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ProcessReportCall__Outputs {
  _call: ProcessReportCall;

  constructor(call: ProcessReportCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get value1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class RenounceRoleCall extends ethereum.Call {
  get inputs(): RenounceRoleCall__Inputs {
    return new RenounceRoleCall__Inputs(this);
  }

  get outputs(): RenounceRoleCall__Outputs {
    return new RenounceRoleCall__Outputs(this);
  }
}

export class RenounceRoleCall__Inputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RenounceRoleCall__Outputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }
}

export class RevokeRoleCall extends ethereum.Call {
  get inputs(): RevokeRoleCall__Inputs {
    return new RevokeRoleCall__Inputs(this);
  }

  get outputs(): RevokeRoleCall__Outputs {
    return new RevokeRoleCall__Outputs(this);
  }
}

export class RevokeRoleCall__Inputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RevokeRoleCall__Outputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }
}

export class RevokeStrategyCall extends ethereum.Call {
  get inputs(): RevokeStrategyCall__Inputs {
    return new RevokeStrategyCall__Inputs(this);
  }

  get outputs(): RevokeStrategyCall__Outputs {
    return new RevokeStrategyCall__Outputs(this);
  }
}

export class RevokeStrategyCall__Inputs {
  _call: RevokeStrategyCall;

  constructor(call: RevokeStrategyCall) {
    this._call = call;
  }

  get strategy(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get force(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class RevokeStrategyCall__Outputs {
  _call: RevokeStrategyCall;

  constructor(call: RevokeStrategyCall) {
    this._call = call;
  }
}

export class SetDebtCall extends ethereum.Call {
  get inputs(): SetDebtCall__Inputs {
    return new SetDebtCall__Inputs(this);
  }

  get outputs(): SetDebtCall__Outputs {
    return new SetDebtCall__Outputs(this);
  }
}

export class SetDebtCall__Inputs {
  _call: SetDebtCall;

  constructor(call: SetDebtCall) {
    this._call = call;
  }

  get strategy(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _newDebt(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetDebtCall__Outputs {
  _call: SetDebtCall;

  constructor(call: SetDebtCall) {
    this._call = call;
  }
}

export class SetFeesCall extends ethereum.Call {
  get inputs(): SetFeesCall__Inputs {
    return new SetFeesCall__Inputs(this);
  }

  get outputs(): SetFeesCall__Outputs {
    return new SetFeesCall__Outputs(this);
  }
}

export class SetFeesCall__Inputs {
  _call: SetFeesCall;

  constructor(call: SetFeesCall) {
    this._call = call;
  }

  get totalFees(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get totalRefunds(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get protocolFees(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get protocolFeeRecipient(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class SetFeesCall__Outputs {
  _call: SetFeesCall;

  constructor(call: SetFeesCall) {
    this._call = call;
  }
}

export class UpdateDebtCall extends ethereum.Call {
  get inputs(): UpdateDebtCall__Inputs {
    return new UpdateDebtCall__Inputs(this);
  }

  get outputs(): UpdateDebtCall__Outputs {
    return new UpdateDebtCall__Outputs(this);
  }
}

export class UpdateDebtCall__Inputs {
  _call: UpdateDebtCall;

  constructor(call: UpdateDebtCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get strategy(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get targetDebt(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class UpdateDebtCall__Outputs {
  _call: UpdateDebtCall;

  constructor(call: UpdateDebtCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class UpdateMaxDebtForStrategyCall extends ethereum.Call {
  get inputs(): UpdateMaxDebtForStrategyCall__Inputs {
    return new UpdateMaxDebtForStrategyCall__Inputs(this);
  }

  get outputs(): UpdateMaxDebtForStrategyCall__Outputs {
    return new UpdateMaxDebtForStrategyCall__Outputs(this);
  }
}

export class UpdateMaxDebtForStrategyCall__Inputs {
  _call: UpdateMaxDebtForStrategyCall;

  constructor(call: UpdateMaxDebtForStrategyCall) {
    this._call = call;
  }

  get strategy(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get newMaxDebt(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UpdateMaxDebtForStrategyCall__Outputs {
  _call: UpdateMaxDebtForStrategyCall;

  constructor(call: UpdateMaxDebtForStrategyCall) {
    this._call = call;
  }
}
