{
  "address": "0x699d806A62287dB249A568525F791d37c99A5307",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_sharesManager",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "DebtDidntChange",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DebtHigherThanMaxDebt",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InactiveStrategy",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientFunds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAsset",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StrategyAlreadyActive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StrategyDebtIsLessThanAssetsNeeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StrategyHasDebt",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StrategyHasUnrealisedLosses",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroValue",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DebtPurchased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currentDebt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newDebt",
          "type": "uint256"
        }
      ],
      "name": "DebtUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "RoleSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "enum RoleStatusChange",
          "name": "status",
          "type": "uint8"
        }
      ],
      "name": "RoleStatusChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "Shutdown",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum StrategyChangeType",
          "name": "changeType",
          "type": "uint8"
        }
      ],
      "name": "StrategyChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gain",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "loss",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currentDebt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "protocolFees",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalFees",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalRefunds",
          "type": "uint256"
        }
      ],
      "name": "StrategyReported",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "accountant",
          "type": "address"
        }
      ],
      "name": "UpdateAccountant",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "newDefaultQueue",
          "type": "address[]"
        }
      ],
      "name": "UpdateDefaultQueue",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "depositLimit",
          "type": "uint256"
        }
      ],
      "name": "UpdateDepositLimit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "depositLimitModule",
          "type": "address"
        }
      ],
      "name": "UpdateDepositLimitModule",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minimumTotalIdle",
          "type": "uint256"
        }
      ],
      "name": "UpdateMinimumTotalIdle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "profitMaxUnlockTime",
          "type": "uint256"
        }
      ],
      "name": "UpdateProfitMaxUnlockTime",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "roleManager",
          "type": "address"
        }
      ],
      "name": "UpdateRoleManager",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "useDefaultQueue",
          "type": "bool"
        }
      ],
      "name": "UpdateUseDefaultQueue",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "withdrawLimitModule",
          "type": "address"
        }
      ],
      "name": "UpdateWithdrawLimitModule",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "totalFees",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "totalRefunds",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "protocolFees",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "protocolFeeRecipient",
          "type": "address"
        }
      ],
      "name": "UpdatedFees",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newDebt",
          "type": "uint256"
        }
      ],
      "name": "UpdatedMaxDebtForStrategy",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ACCOUNTANT_MANAGER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ADD_STRATEGY_MANAGER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "API_VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ASSET",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEBT_MANAGER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEBT_PURCHASER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEPOSIT_LIMIT_MANAGER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_TYPE_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "EMERGENCY_MANAGER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FACTORY",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FORCE_REVOKE_MANAGER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_BPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_BPS_EXTENDED",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_DEBT_MANAGER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_QUEUE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINIMUM_IDLE_MANAGER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ONE_YEAR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERMIT_TYPE_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PROFIT_UNLOCK_MANAGER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "QUEUE_MANAGER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REPORTING_MANAGER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REVOKE_STRATEGY_MANAGER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROLE_MANAGER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WITHDRAW_LIMIT_MANAGER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accountant",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newStrategy",
          "type": "address"
        }
      ],
      "name": "addStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "defaultQueue",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositLimitModule",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalFees",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalRefunds",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "protocolFees",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "protocolFeeRecipient",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fullProfitUnlockDate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "futureRoleManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        }
      ],
      "name": "getDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDefaultQueue",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDefaultQueueLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "length",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastProfitUpdate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumTotalIdle",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "openRoles",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        }
      ],
      "name": "processReport",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "profitMaxUnlockTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "profitUnlockingRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "force",
          "type": "bool"
        }
      ],
      "name": "revokeStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roleManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "roles",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_newDebt",
          "type": "uint256"
        }
      ],
      "name": "setDebt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "totalFees",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalRefunds",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "protocolFees",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "protocolFeeRecipient",
          "type": "address"
        }
      ],
      "name": "setFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setters",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sharesManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "shutdown",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "strategies",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "activation",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastReport",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "currentDebt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxDebt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "strategyManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDebtAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalIdleAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupplyAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "targetDebt",
          "type": "uint256"
        }
      ],
      "name": "updateDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newMaxDebt",
          "type": "uint256"
        }
      ],
      "name": "updateMaxDebtForStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "useDefaultQueue",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawLimitModule",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa5998111e240e1c4036e0381c35b1dbba330bb02163f1b88cab6f02a0f4a110e",
  "receipt": {
    "to": null,
    "from": "0xCB409e1A857318378137dFb42a06Ae87290631aD",
    "contractAddress": "0x699d806A62287dB249A568525F791d37c99A5307",
    "transactionIndex": 1,
    "gasUsed": "3447326",
    "logsBloom": "0x
    "blockHash": "0xc32002d95501e839d1606b31b6022fb067a3cb83c45d6e4c4dd13490e814df86",
    "transactionHash": "0xa5998111e240e1c4036e0381c35b1dbba330bb02163f1b88cab6f02a0f4a110e",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 57991396,
        "transactionHash": "0xa5998111e240e1c4036e0381c35b1dbba330bb02163f1b88cab6f02a0f4a110e",
        "address": "0x699d806A62287dB249A568525F791d37c99A5307",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008c892f0dee6e599f22b83688e23d074b9eaca2cb",
          "0x000000000000000000000000cb409e1a857318378137dfb42a06ae87290631ad"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xc32002d95501e839d1606b31b6022fb067a3cb83c45d6e4c4dd13490e814df86"
      }
    ],
    "blockNumber": 57991396,
    "cumulativeGasUsed": "3447326",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xdf29cb40cb92a1b8e8337f542e3846e185deff96",
    "0x8c892F0dEE6E599f22B83688E23D074b9eaCa2cb"
  ],
  "numDeployments": 1,
  "solcInputHash": "94fa051da3b46ef97592ccf25a1c46c7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sharesManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DebtDidntChange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DebtHigherThanMaxDebt\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InactiveStrategy\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientFunds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAsset\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StrategyAlreadyActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StrategyDebtIsLessThanAssetsNeeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StrategyHasDebt\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StrategyHasUnrealisedLosses\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroValue\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DebtPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentDebt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDebt\",\"type\":\"uint256\"}],\"name\":\"DebtUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"RoleSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"enum RoleStatusChange\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"RoleStatusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Shutdown\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum StrategyChangeType\",\"name\":\"changeType\",\"type\":\"uint8\"}],\"name\":\"StrategyChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gain\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loss\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentDebt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protocolFees\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalFees\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalRefunds\",\"type\":\"uint256\"}],\"name\":\"StrategyReported\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"accountant\",\"type\":\"address\"}],\"name\":\"UpdateAccountant\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"newDefaultQueue\",\"type\":\"address[]\"}],\"name\":\"UpdateDefaultQueue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositLimit\",\"type\":\"uint256\"}],\"name\":\"UpdateDepositLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositLimitModule\",\"type\":\"address\"}],\"name\":\"UpdateDepositLimitModule\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minimumTotalIdle\",\"type\":\"uint256\"}],\"name\":\"UpdateMinimumTotalIdle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profitMaxUnlockTime\",\"type\":\"uint256\"}],\"name\":\"UpdateProfitMaxUnlockTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"roleManager\",\"type\":\"address\"}],\"name\":\"UpdateRoleManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"useDefaultQueue\",\"type\":\"bool\"}],\"name\":\"UpdateUseDefaultQueue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"withdrawLimitModule\",\"type\":\"address\"}],\"name\":\"UpdateWithdrawLimitModule\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"totalFees\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"totalRefunds\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"protocolFees\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"protocolFeeRecipient\",\"type\":\"address\"}],\"name\":\"UpdatedFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDebt\",\"type\":\"uint256\"}],\"name\":\"UpdatedMaxDebtForStrategy\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ACCOUNTANT_MANAGER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ADD_STRATEGY_MANAGER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"API_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ASSET\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEBT_MANAGER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEBT_PURCHASER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEPOSIT_LIMIT_MANAGER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPE_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EMERGENCY_MANAGER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FACTORY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FORCE_REVOKE_MANAGER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_BPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_BPS_EXTENDED\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_DEBT_MANAGER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_QUEUE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINIMUM_IDLE_MANAGER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ONE_YEAR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPE_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROFIT_UNLOCK_MANAGER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"QUEUE_MANAGER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REPORTING_MANAGER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REVOKE_STRATEGY_MANAGER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROLE_MANAGER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAW_LIMIT_MANAGER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accountant\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newStrategy\",\"type\":\"address\"}],\"name\":\"addStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"defaultQueue\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositLimitModule\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalFees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRefunds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolFees\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"protocolFeeRecipient\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fullProfitUnlockDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"futureRoleManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"getDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDefaultQueue\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDefaultQueueLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastProfitUpdate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumTotalIdle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"openRoles\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"processReport\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"profitMaxUnlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"profitUnlockingRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"force\",\"type\":\"bool\"}],\"name\":\"revokeStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roleManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"roles\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_newDebt\",\"type\":\"uint256\"}],\"name\":\"setDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalFees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRefunds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolFees\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"protocolFeeRecipient\",\"type\":\"address\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setters\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sharesManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shutdown\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"strategies\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"activation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastReport\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategyManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDebtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalIdleAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupplyAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"targetDebt\",\"type\":\"uint256\"}],\"name\":\"updateDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newMaxDebt\",\"type\":\"uint256\"}],\"name\":\"updateMaxDebtForStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"useDefaultQueue\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawLimitModule\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"title\":\"STRATEGY MANAGEMENT\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StrategyManager.sol\":\"StrategyManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":10},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd6e52cb394d7f5abe5dca2d4908a6be40417914720932de757de34a99ab87f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/Interfaces/IAccountant.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.16;\\n\\ninterface IAccountant {\\n    function report(address strategy, uint256 gain, uint256 loss) external returns (uint256, uint256);\\n}\",\"keccak256\":\"0x0f704ea311ec644bcb45f1de8c501af3d70cb09b5c01d9c861c14b3ef9be47f8\",\"license\":\"GPL-3.0\"},\"contracts/Interfaces/IERC4626.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC4626.sol)\\n\\npragma solidity ^0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC4626 \\\"Tokenized Vault Standard\\\", as defined in\\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\\n *\\n * _Available since v4.7._\\n */\\ninterface IERC4626 is IERC20, IERC20Metadata {\\n    // solhint-disable ordering\\n    // solhint-disable max-line-length\\n    event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\\n\\n    event Withdraw(\\n        address indexed sender,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /**\\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\\n     *\\n     * - MUST be an ERC-20 token contract.\\n     * - MUST NOT revert.\\n     */\\n    function asset() external view returns (address assetTokenAddress);\\n\\n    /**\\n     * @dev Returns the total amount of the underlying asset that is \\u201cmanaged\\u201d by Vault.\\n     *\\n     * - SHOULD include any compounding that occurs from yield.\\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT revert.\\n     */\\n    function totalAssets() external view returns (uint256 totalManagedAssets);\\n\\n    /**\\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\\n     * through a deposit call.\\n     *\\n     * - MUST return a limited value if receiver is subject to some deposit limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\\n     * - MUST NOT revert.\\n     */\\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\\n     *   in the same transaction.\\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   deposit execution, and are accounted for during deposit.\\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\\n     * - MUST return a limited value if receiver is subject to some mint limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\\n     * - MUST NOT revert.\\n     */\\n    function maxMint(address receiver) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\\n     *   same transaction.\\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\\n     */\\n    function previewMint(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\\n     *   execution, and are accounted for during mint.\\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\\n     * Vault, through a withdraw call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxWithdraw(address owner, uint256 maxLoss, address[] memory strategies) external returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\\n     *   called\\n     *   in the same transaction.\\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   withdraw execution, and are accounted for during withdraw.\\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function withdraw(uint256 assets, address receiver, address owner, uint256 maxLoss, address[] memory strategies) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\\n     * through a redeem call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxRedeem(address owner, uint256 maxLoss, address[] memory strategies) external returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\\n     *   same transaction.\\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\\n     */\\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   redeem execution, and are accounted for during redeem.\\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function redeem(uint256 shares, address receiver, address owner, uint256 maxLoss, address[] memory strategies) external returns (uint256 assets);\\n}\",\"keccak256\":\"0xe2e626a58bddb0c8b459117fcf8f2b746431da070ea8d80d3d56bca5f1c8fa1d\",\"license\":\"MIT\"},\"contracts/Interfaces/IFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.16;\\n\\ninterface IFactory {\\n    function protocolFeeConfig() external view returns (uint16, address);\\n}\",\"keccak256\":\"0x40d6ccadd2d8acc52c61503f36d78c893d0841b427a390b52382b03368ddd9db\",\"license\":\"GPL-3.0\"},\"contracts/Interfaces/ISharesManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.16;\\n\\nimport \\\"../VaultStructs.sol\\\";\\nimport {IERC4626} from \\\"./IERC4626.sol\\\";\\n\\ninterface ISharesManager is IERC4626 {\\n    // solhint-disable max-line-length\\n    // solhint-disable ordering\\n\\n    function initialize(address _strategyManager, address _setters) external;\\n    function balanceOf(address addr) external view returns (uint256);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function spendAllowance(address owner, address spender, uint256 amount) external;\\n    function transfer(address sender, address receiver, uint256 amount) external;\\n    function transferFrom(address sender, address receiver, uint256 amount) external returns (bool);\\n    function approve(address owner, address spender, uint256 amount) external returns (bool);\\n    function increaseAllowance(address owner, address spender, uint256 amount) external returns (bool);\\n    function decreaseAllowance(address owner, address spender, uint256 amount) external returns (bool);\\n    function permit(address owner, address spender, uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external returns (bool);\\n    function burnShares(uint256 shares, address owner) external;\\n    function unlockedShares() external view returns (uint256);\\n    function totalSupply() external view returns (uint256);\\n    function burnUnlockedShares() external;\\n    function totalAssets() external view returns (uint256);\\n    function convertToAssets(uint256 shares, Rounding rounding) external view returns (uint256);\\n    function convertToShares(uint256 assets, Rounding rounding) external view returns (uint256);\\n    function erc20SafeApprove(address token, address spender, uint256 amount) external;\\n    function erc20SafeTransferFrom(address token, address sender, address receiver, uint256 amount) external;\\n    function erc20SafeTransfer(address token, address receiver, uint256 amount) external;\\n    function issueShares(uint256 shares, address recipient) external;\\n    function issueSharesForAmount(uint256 amount, address recipient) external returns (uint256);\\n    function maxDeposit(address receiver) external view returns (uint256);\\n    function maxWithdraw(address owner, uint256 _maxLoss, address[] memory _strategies) external returns (uint256);\\n    function deposit(address sender, address recipient, uint256 assets) external returns (uint256);\\n    function mint(address sender, address recipient, uint256 shares) external returns (uint256);\\n    function assessShareOfUnrealisedLosses(address strategy, uint256 assetsNeeded) external view returns (uint256);\\n    function withdrawFromStrategy(address strategy, uint256 assetsToWithdraw) external;\\n    function calculateShareManagement(uint256 gain, uint256 loss, uint256 totalFees, uint256 protocolFees, address strategy) external returns (ShareManagement memory shareManagement);\\n    function handleShareBurnsAndIssues(ShareManagement memory shares, FeeAssessment memory fees, uint256 gain) external returns (uint256 , uint256);\\n    function manageUnlockingOfShares(uint256 previouslyLockedShares, uint256 newlyLockedShares) external;\\n    function setDepositLimit(uint256 _depositLimit) external;\\n    function getTotalIdleAmount() external returns (uint256);\\n    function setTotalIdleAmount(uint256 totalIdleAmount) external;\\n    function getMinimumTotalIdle() external returns (uint256);\\n    function setMinimumTotalIdle(uint256 minimumTotalIdle) external;\\n    function setTotalDebtAmount(uint256 totalDebtAmount) external;\\n    function depositToStrategy(address strategy, uint256 assetsToDeposit) external;\\n}\",\"keccak256\":\"0x7f0c402bcef6af645cf348e2cb81fe0d2acbb1e78d2b29041bae5cfdf012d7b6\",\"license\":\"GPL-3.0\"},\"contracts/Interfaces/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.16;\\n\\ninterface IStrategy {\\n    function redeem(uint256 shares, address receiver, address owner) external returns (uint256);\\n    function deposit(uint256 assets, address receiver) external returns (uint256);\\n    function asset() external view returns (address);\\n    function balanceOf(address owner) external view returns (uint256);\\n    function maxDeposit(address receiver) external view returns (uint256);\\n    function totalAssets() external view returns (uint256);\\n    function convertToAssets(uint256 shares) external view returns (uint256);\\n    function convertToShares(uint256 assets) external view returns (uint256);\\n    function previewWithdraw(uint256 assets) external view returns (uint256);\\n    function maxRedeem(address owner) external view returns (uint256);\\n}\",\"keccak256\":\"0x4a4ac422957ef074941cce14aa4a41619eec52ffffcf5cc2d5fbbd07b8875554\",\"license\":\"GPL-3.0\"},\"contracts/Interfaces/IStrategyManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.16;\\n\\ninterface IStrategyManager {\\n    // solhint-disable ordering\\n    function addStrategy(address newStrategy) external;\\n    function revokeStrategy(address strategy, bool force) external;\\n    function updateMaxDebtForStrategy(address strategy, uint256 newMaxDebt) external;\\n    function updateDebt(address sender, address strategy, uint256 targetDebt) external returns (uint256);\\n    function processReport(address strategy) external returns (uint256, uint256);\\n    function getDefaultQueueLength() external view returns(uint256 length);\\n    function getDefaultQueue() external view returns(address[] memory);\\n    function getDebt(address strategy) external view returns (uint256);\\n    function setDebt(address strategy, uint256 _newDebt) external;\\n    function setFees(uint256 totalFees, uint256 totalRefunds, uint256 protocolFees, address protocolFeeRecipient) external;\\n}\",\"keccak256\":\"0x1fa6a1e070e3e1dfe7df4d7a76a9941168f8683a50d4545b6aeac338e8d9692e\",\"license\":\"GPL-3.0\"},\"contracts/Interfaces/IVaultEvents.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL 3.0\\n// Copyright Fathom 2023\\n\\npragma solidity ^0.8.16;\\n\\nimport \\\"../VaultStructs.sol\\\";\\n\\ninterface IVaultEvents {\\n    // STRATEGY EVENTS\\n    event StrategyChanged(address indexed strategy, StrategyChangeType changeType);\\n    event StrategyReported(\\n        address indexed strategy,\\n        uint256 gain,\\n        uint256 loss,\\n        uint256 currentDebt,\\n        uint256 protocolFees,\\n        uint256 totalFees,\\n        uint256 totalRefunds\\n    );\\n    // DEBT MANAGEMENT EVENTS\\n    event DebtUpdated(\\n        address indexed strategy,\\n        uint256 currentDebt,\\n        uint256 newDebt\\n    );\\n    // ROLE UPDATES\\n    event RoleSet(address indexed account, bytes32 role);\\n    event RoleStatusChanged(bytes32 indexed role, RoleStatusChange indexed status);\\n    event UpdateRoleManager(address indexed roleManager);\\n\\n    event UpdateAccountant(address indexed accountant);\\n    event UpdateDefaultQueue(address[] newDefaultQueue);\\n    event UpdateUseDefaultQueue(bool useDefaultQueue);\\n    event UpdatedMaxDebtForStrategy(\\n        address indexed sender,\\n        address indexed strategy,\\n        uint256 newDebt\\n    );\\n    event UpdateDepositLimit(uint256 depositLimit);\\n    event UpdateMinimumTotalIdle(uint256 minimumTotalIdle);\\n    event UpdateProfitMaxUnlockTime(uint256 profitMaxUnlockTime);\\n    event DebtPurchased(address indexed strategy, uint256 amount);\\n    event Shutdown();\\n\\n    // STORAGE MANAGEMENT EVENTS\\n    event UpdateDepositLimitModule(address indexed depositLimitModule);\\n    event UpdateWithdrawLimitModule(address indexed withdrawLimitModule);\\n\\n    // FEE EVENTS\\n    event UpdatedFees(\\n        uint256 indexed totalFees,\\n        uint256 indexed totalRefunds,\\n        uint256 indexed protocolFees,\\n        address protocolFeeRecipient\\n    );\\n}\",\"keccak256\":\"0xae2bd3cb4307cf7e8a54cda2b5e9f7f108dae636787e773a6a5bfc82defc6920\",\"license\":\"AGPL 3.0\"},\"contracts/StrategyManager.sol\":{\"content\":\"// SPDX-License-Identifier: GNU AGPLv3\\npragma solidity ^0.8.16;\\n\\nimport \\\"./VaultStorage.sol\\\";\\nimport \\\"./Interfaces/IVaultEvents.sol\\\";\\nimport \\\"./Interfaces/IStrategyManager.sol\\\";\\nimport \\\"./Interfaces/IStrategy.sol\\\";\\nimport \\\"./Interfaces/ISharesManager.sol\\\";\\nimport \\\"./Interfaces/IAccountant.sol\\\";\\nimport \\\"./Interfaces/IFactory.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport {AccessControl} from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\n/**\\n@title STRATEGY MANAGEMENT\\n*/\\n\\ncontract StrategyManager is AccessControl, VaultStorage, IVaultEvents, IStrategyManager {\\n    // solhint-disable not-rely-on-time\\n    // solhint-disable var-name-mixedcase\\n    // solhint-disable function-max-lines\\n    // solhint-disable code-complexity\\n    // solhint-disable max-line-length\\n    // solhint-disable ordering\\n\\n    using Math for uint256;\\n\\n    // IMMUTABLE\\n    // Address of the underlying token used by the vault\\n    IERC20 public immutable ASSET;\\n    // Factory address\\n    address public immutable FACTORY;\\n\\n    error ZeroAddress();\\n    error InactiveStrategy();\\n    error InvalidAsset();\\n    error StrategyAlreadyActive();\\n    error StrategyHasDebt();\\n    error DebtDidntChange();\\n    error ZeroValue();\\n    error StrategyHasUnrealisedLosses();\\n    error DebtHigherThanMaxDebt();\\n    error InsufficientFunds();\\n    error StrategyDebtIsLessThanAssetsNeeded();\\n\\n\\n    constructor(\\n        address _asset,\\n        address _sharesManager\\n    ) {\\n        ASSET = IERC20(_asset);\\n        FACTORY = msg.sender;\\n        sharesManager = _sharesManager;\\n        _grantRole(DEFAULT_ADMIN_ROLE, _sharesManager);\\n    }\\n\\n\\n    function addStrategy(address newStrategy) external override {\\n        if (newStrategy == address(0) || newStrategy == address(this)) {\\n            revert ZeroAddress();\\n        }\\n        if (IStrategy(newStrategy).asset() != address(ASSET)) {\\n            revert InvalidAsset();\\n        }\\n        if (strategies[newStrategy].activation != 0) {\\n            revert StrategyAlreadyActive();\\n        }\\n\\n        // Add the new strategy to the mapping.\\n        strategies[newStrategy] = StrategyParams({\\n            activation: block.timestamp,\\n            lastReport: block.timestamp,\\n            currentDebt: 0,\\n            maxDebt: 0\\n        });\\n\\n        // If the default queue has space, add the strategy.\\n        uint256 defaultQueueLength = defaultQueue.length;\\n        if (defaultQueueLength < MAX_QUEUE) {\\n            defaultQueue.push(newStrategy);\\n        }\\n        \\n        emit StrategyChanged(newStrategy, StrategyChangeType.ADDED);\\n    }\\n\\n    function revokeStrategy(address strategy, bool force) external override {\\n        if (strategies[strategy].activation == 0) {\\n            revert InactiveStrategy();\\n        }\\n        \\n        // If force revoking a strategy, it will cause a loss.\\n        uint256 loss = 0;\\n        if (strategies[strategy].currentDebt != 0 && !force) {\\n            revert StrategyHasDebt();\\n        }\\n\\n        // Vault realizes the full loss of outstanding debt.\\n        loss = strategies[strategy].currentDebt;\\n        // Adjust total vault debt.\\n        totalDebtAmount -= loss;\\n        \\n        emit StrategyReported(strategy, 0, loss, 0, 0, 0, 0);\\n\\n        // Set strategy params all back to 0 (WARNING: it can be re-added).\\n        strategies[strategy] = StrategyParams({\\n            activation: 0,\\n            lastReport: 0,\\n            currentDebt: 0,\\n            maxDebt: 0\\n        });\\n\\n        // Remove strategy if it is in the default queue.\\n        address[] memory newQueue;\\n        if (defaultQueue.length > 0) {\\n            for (uint256 i = 0; i < defaultQueue.length; i++) {\\n                address _strategy = defaultQueue[i];\\n                // Add all strategies to the new queue besides the one revoked.\\n                if (_strategy != strategy) {\\n                    newQueue[i] = _strategy;\\n                }\\n            }\\n        }\\n\\n        // Set the default queue to our updated queue.\\n        defaultQueue = newQueue;\\n\\n        emit StrategyChanged(strategy, StrategyChangeType.REVOKED);\\n    }\\n\\n    function updateMaxDebtForStrategy(address strategy, uint256 newMaxDebt) external override {\\n        if (strategies[strategy].activation == 0) {\\n            revert InactiveStrategy();\\n        }\\n        strategies[strategy].maxDebt = newMaxDebt;\\n        emit UpdatedMaxDebtForStrategy(tx.origin, strategy, newMaxDebt);\\n    }\\n\\n    function updateDebt(address sender, address strategy, uint256 targetDebt) external override returns (uint256) {\\n        totalIdleAmount = ISharesManager(sharesManager).getTotalIdleAmount();\\n        minimumTotalIdle = ISharesManager(sharesManager).getMinimumTotalIdle();\\n        if (strategies[strategy].currentDebt != targetDebt && totalIdleAmount <= minimumTotalIdle) {\\n            revert InsufficientFunds();\\n        }\\n        \\n        // How much we want the strategy to have.\\n        uint256 newDebt = targetDebt;\\n        // How much the strategy currently has.\\n        uint256 currentDebt = strategies[strategy].currentDebt;\\n\\n        // If the vault is shutdown we can only pull funds.\\n        if (shutdown == true) {\\n            newDebt = 0;\\n        }\\n\\n        if (newDebt == currentDebt) {\\n            revert DebtDidntChange();\\n        }\\n\\n        if (currentDebt > newDebt) {\\n            // Reduce debt\\n            uint256 assetsToWithdraw = currentDebt - newDebt;\\n\\n            // Respect minimum total idle in vault\\n            if (totalIdleAmount + assetsToWithdraw < minimumTotalIdle) {\\n                assetsToWithdraw = minimumTotalIdle - totalIdleAmount;\\n                // Cant withdraw more than the strategy has.\\n                if (assetsToWithdraw > currentDebt) {\\n                    assetsToWithdraw = currentDebt;\\n                }\\n            }\\n\\n            // Check how much we are able to withdraw.\\n            // Use maxRedeem and convert since we use redeem.\\n            uint256 withdrawable = IStrategy(strategy).convertToAssets(IStrategy(strategy).maxRedeem(sender));\\n\\n            if (withdrawable <= 0) {\\n                revert ZeroValue();\\n            }\\n\\n            // If insufficient withdrawable, withdraw what we can.\\n            if (withdrawable < assetsToWithdraw) {\\n                assetsToWithdraw = withdrawable;\\n            }\\n\\n            // If there are unrealised losses we don't let the vault reduce its debt until there is a new report\\n            uint256 unrealisedLossesShare = ISharesManager(sharesManager).assessShareOfUnrealisedLosses(strategy, assetsToWithdraw);\\n            if (unrealisedLossesShare != 0) {\\n                revert StrategyHasUnrealisedLosses();\\n            }\\n\\n            // Always check the actual amount withdrawn.\\n            uint256 preBalance = ASSET.balanceOf(sender);\\n            ISharesManager(sharesManager).withdrawFromStrategy(strategy, assetsToWithdraw);\\n            uint256 postBalance = ASSET.balanceOf(sender);\\n\\n            // making sure we are changing idle according to the real result no matter what. \\n            // We pull funds with {redeem} so there can be losses or rounding differences.\\n            uint256 withdrawn = Math.min(postBalance - preBalance, currentDebt);\\n\\n            // If we got too much make sure not to increase PPS.\\n            if (withdrawn > assetsToWithdraw) {\\n                assetsToWithdraw = withdrawn;\\n            }\\n\\n            // Update storage.\\n            totalIdleAmount += withdrawn; // actual amount we got.\\n            // Amount we tried to withdraw in case of losses\\n            totalDebtAmount -= assetsToWithdraw;\\n\\n            ISharesManager(sharesManager).setTotalIdleAmount(totalIdleAmount);\\n            ISharesManager(sharesManager).setTotalDebtAmount(totalDebtAmount);\\n\\n            newDebt = currentDebt - assetsToWithdraw;\\n        } else {\\n            // We are increasing the strategies debt\\n\\n            // Revert if target_debt cannot be achieved due to configured max_debt for given strategy\\n            if (newDebt > strategies[strategy].maxDebt) {\\n                revert DebtHigherThanMaxDebt();\\n            }\\n\\n            // Vault is increasing debt with the strategy by sending more funds.\\n            uint256 currentMaxDeposit = IStrategy(strategy).maxDeposit(sender);\\n            if (currentMaxDeposit <= 0) {\\n                revert ZeroValue();\\n            }\\n\\n            // Deposit the difference between desired and current.\\n            uint256 assetsToDeposit = newDebt - currentDebt;\\n            if (assetsToDeposit > currentMaxDeposit) {\\n                // Deposit as much as possible.\\n                assetsToDeposit = currentMaxDeposit;\\n            }\\n\\n            uint256 availableIdle = totalIdleAmount - minimumTotalIdle;\\n\\n            // If insufficient funds to deposit, transfer only what is free.\\n            if (assetsToDeposit > availableIdle) {\\n                assetsToDeposit = availableIdle;\\n            }\\n\\n            // Can't Deposit 0.\\n            if (assetsToDeposit > 0) {\\n                // Approve the strategy to pull only what we are giving it.\\n                ISharesManager(sharesManager).erc20SafeApprove(address(ASSET), strategy, assetsToDeposit);\\n\\n                // Always update based on actual amounts deposited.\\n                uint256 preBalance = ASSET.balanceOf(sharesManager);\\n                ISharesManager(sharesManager).depositToStrategy(strategy, assetsToDeposit);\\n                uint256 postBalance = ASSET.balanceOf(sharesManager);\\n\\n                // Make sure our approval is always back to 0.\\n                ISharesManager(sharesManager).erc20SafeApprove(address(ASSET), strategy, 0);\\n\\n                // Making sure we are changing according to the real result no \\n                // matter what. This will spend more gas but makes it more robust.\\n                assetsToDeposit = preBalance - postBalance;\\n\\n                // Update storage.\\n                totalIdleAmount -= assetsToDeposit;\\n                totalDebtAmount += assetsToDeposit;\\n\\n                ISharesManager(sharesManager).setTotalIdleAmount(totalIdleAmount);\\n                ISharesManager(sharesManager).setTotalDebtAmount(totalDebtAmount);\\n\\n                newDebt = currentDebt + assetsToDeposit;\\n            }\\n        }\\n\\n        // Commit memory to storage.\\n        strategies[strategy].currentDebt = newDebt;\\n\\n        emit DebtUpdated(strategy, currentDebt, newDebt);\\n        return newDebt;\\n    }\\n\\n    // Processing a report means comparing the debt that the strategy has taken \\n    // with the current amount of funds it is reporting. If the strategy owes \\n    // less than it currently has, it means it has had a profit, else (assets < debt) \\n    // it has had a loss.\\n\\n    // Different strategies might choose different reporting strategies: pessimistic, \\n    // only realised P&L, ... The best way to report depends on the strategy.\\n\\n    // The profit will be distributed following a smooth curve over the vaults \\n    // profit_max_unlock_time seconds. Losses will be taken immediately, first from the \\n    // profit buffer (avoiding an impact in pps), then will reduce pps.\\n\\n    // Any applicable fees are charged and distributed during the report as well\\n    // to the specified recipients.\\n    function processReport(address strategy) external override returns (uint256, uint256) {\\n        // Make sure we have a valid strategy.\\n        if (strategies[strategy].activation == 0) {\\n            revert InactiveStrategy();\\n        }\\n\\n        // Burn shares that have been unlocked since the last update\\n        ISharesManager(sharesManager).burnUnlockedShares();\\n\\n        (uint256 gain, uint256 loss) = _assessProfitAndLoss(strategy);\\n\\n        FeeAssessment memory fees = _assessFees(strategy, gain, loss);\\n\\n        ShareManagement memory shares = ISharesManager(sharesManager).calculateShareManagement(gain, loss, fees.totalFees, fees.protocolFees, strategy);\\n\\n        (uint256 previouslyLockedShares, uint256 newlyLockedShares) = ISharesManager(sharesManager).handleShareBurnsAndIssues(shares, fees, gain);\\n\\n        ISharesManager(sharesManager).manageUnlockingOfShares(previouslyLockedShares, newlyLockedShares);\\n\\n        // Record the report of profit timestamp.\\n        strategies[strategy].lastReport = block.timestamp;\\n\\n        // We have to recalculate the fees paid for cases with an overall loss.\\n        emit StrategyReported(\\n            strategy,\\n            gain,\\n            loss,\\n            strategies[strategy].currentDebt,\\n            ISharesManager(sharesManager).convertToAssets(shares.protocolFeesShares, Rounding.ROUND_DOWN),\\n            ISharesManager(sharesManager).convertToAssets(shares.protocolFeesShares + shares.accountantFeesShares, Rounding.ROUND_DOWN),\\n            fees.totalRefunds\\n        );\\n\\n        return (gain, loss);\\n    }\\n\\n    // Assess the profit and loss of a strategy.\\n    function _assessProfitAndLoss(address strategy) internal view returns (uint256 gain, uint256 loss) {\\n        // Vault assesses profits using 4626 compliant interface.\\n        // NOTE: It is important that a strategies `convertToAssets` implementation\\n        // cannot be manipulated or else the vault could report incorrect gains/losses.\\n        uint256 strategyShares = IStrategy(strategy).balanceOf(sharesManager);\\n        // How much the vaults position is worth.\\n        uint256 currentTotalAssets = IStrategy(strategy).convertToAssets(strategyShares);\\n        // How much the vault had deposited to the strategy.\\n        uint256 currentDebt = strategies[strategy].currentDebt;\\n\\n        uint256 _gain = 0;\\n        uint256 _loss = 0;\\n\\n        // Compare reported assets vs. the current debt.\\n        if (currentTotalAssets > currentDebt) {\\n            // We have a gain.\\n            _gain = currentTotalAssets - currentDebt;\\n        } else {\\n            // We have a loss.\\n            _loss = currentDebt - currentTotalAssets;\\n        }\\n\\n        return (_gain, _loss);\\n    }\\n\\n    // Calculate and distribute any fees and refunds from the strategy's performance.\\n    function _assessFees(address strategy, uint256 gain, uint256 loss) internal returns (FeeAssessment memory) {\\n        FeeAssessment memory _fees = fees;\\n\\n        // If accountant is not set, fees and refunds remain unchanged.\\n        if (accountant != address(0)) {\\n            (_fees.totalFees, _fees.totalRefunds) = IAccountant(accountant).report(strategy, gain, loss);\\n\\n            // Protocol fees will be 0 if accountant fees are 0.\\n            if (_fees.totalFees > 0) {\\n                uint16 protocolFeeBps;\\n                // Get the config for this vault.\\n                (protocolFeeBps, _fees.protocolFeeRecipient) = IFactory(FACTORY).protocolFeeConfig();\\n                \\n                if (protocolFeeBps > 0) {\\n                    // Protocol fees are a percent of the fees the accountant is charging.\\n                    _fees.protocolFees = _fees.totalFees * uint256(protocolFeeBps) / MAX_BPS;\\n                }\\n            }\\n        }\\n\\n        return _fees;\\n    }\\n\\n    // Used only to approve tokens that are not the type managed by this Vault.\\n    // Used to handle non-compliant tokens like USDT\\n    function erc20SafeApprove(address token, address spender, uint256 amount) internal {\\n        if (token == address(0) || spender == address(0)) {\\n            revert ZeroAddress();\\n        }\\n        require(IERC20(token).approve(spender, amount), \\\"approval failed\\\");\\n    }\\n\\n    function getDefaultQueueLength() external override view returns(uint256 length) {\\n        return defaultQueue.length;\\n    }\\n\\n    function getDefaultQueue() external override view returns(address[] memory) {\\n        return defaultQueue;\\n    }\\n\\n    function getDebt(address strategy) external view override returns (uint256) {\\n        return strategies[strategy].currentDebt;\\n    }\\n\\n    function setDebt(address strategy, uint256 _newDebt) external override onlyRole(DEFAULT_ADMIN_ROLE) {\\n        strategies[strategy].currentDebt = _newDebt;\\n    }\\n\\n    // Set fees and refunds.\\n    function setFees(uint256 totalFees, uint256 totalRefunds, uint256 protocolFees, address protocolFeeRecipient) external override {\\n        fees.totalFees = totalFees;\\n        fees.totalRefunds = totalRefunds;\\n        fees.protocolFees = protocolFees;\\n        fees.protocolFeeRecipient = protocolFeeRecipient;\\n\\n        emit UpdatedFees(totalFees, totalRefunds, protocolFees, protocolFeeRecipient);\\n    }\\n}\\n    \",\"keccak256\":\"0x2a1efc0b44569b4f7673c2092fc86f151ba3a8722539e97b289aad2f18402511\",\"license\":\"GNU AGPLv3\"},\"contracts/VaultStorage.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL 3.0\\n// Copyright Fathom 2023\\n\\npragma solidity ^0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./VaultStructs.sol\\\";\\n\\ncontract VaultStorage {\\n    // CONSTANTS\\n    // The max length the withdrawal queue can be.\\n    uint256 public constant MAX_QUEUE = 10;\\n    // 100% in Basis Points.\\n    uint256 public constant MAX_BPS = 10000;\\n    // Extended for profit locking calculations.\\n    uint256 public constant MAX_BPS_EXTENDED = 1000000000000;\\n    // The version of this vault.\\n    string public constant API_VERSION = \\\"1.0.0\\\";\\n    uint256 public immutable ONE_YEAR = 31556952;\\n\\n    address public strategyManager;\\n    address public sharesManager;\\n    address public setters;\\n    address public governance;\\n\\n    // STORAGE\\n    // HashMap that records all the strategies that are allowed to receive assets from the vault.\\n    mapping(address => StrategyParams) public strategies;\\n\\n    // The current fees\\n    FeeAssessment public fees;\\n\\n    // The current default withdrawal queue.\\n    address[] public defaultQueue;\\n\\n    // Should the vault use the default_queue regardless whats passed in.\\n    bool public useDefaultQueue;\\n    bool initialized;\\n\\n    // ERC20 - amount of shares per account\\n    mapping(address => uint256) internal _balanceOf;\\n    // ERC20 - owner -> (spender -> amount)\\n    mapping(address => mapping(address => uint256)) internal _allowance;\\n\\n    // Total amount of shares that are currently minted including those locked.\\n    // NOTE: To get the ERC20 compliant version use totalSupply().\\n    uint256 public totalSupplyAmount;\\n\\n    // Total amount of assets that has been deposited in strategies.\\n    uint256 public totalDebtAmount;\\n    // Current assets held in the vault contract. Replacing balanceOf(this) to avoid price_per_share manipulation.\\n    uint256 public totalIdleAmount;\\n    // Minimum amount of assets that should be kept in the vault contract to allow for fast, cheap redeems.\\n    uint256 public minimumTotalIdle;\\n    // Maximum amount of tokens that the vault can accept. If totalAssets > deposit_limit, deposits will revert.\\n    uint256 public depositLimit;\\n    // Contract that charges fees and can give refunds.\\n    address public accountant;\\n    // Contract to control the deposit limit.\\n    address public depositLimitModule;\\n    // Contract to control the withdraw limit.\\n    address public withdrawLimitModule;\\n\\n    // HashMap mapping addresses to their roles\\n    mapping(address => bytes32) public roles;\\n    // HashMap mapping roles to their permissioned state. If false, the role is not open to the public.\\n    mapping(bytes32 => bool) public openRoles;\\n\\n    // Address that can add and remove roles to addresses.\\n    address public roleManager;\\n    // Temporary variable to store the address of the next role_manager until the role is accepted.\\n    address public futureRoleManager;\\n\\n    // State of the vault - if set to true, only withdrawals will be available. It can't be reverted.\\n    bool public shutdown;\\n    // The amount of time profits will unlock over.\\n    uint256 public profitMaxUnlockTime;\\n    // The timestamp of when the current unlocking period ends.\\n    uint256 public fullProfitUnlockDate;\\n    // The per second rate at which profit will unlock.\\n    uint256 public profitUnlockingRate;\\n    // Last timestamp of the most recent profitable report.\\n    uint256 public lastProfitUpdate;\\n\\n    // EIP-2612 permit() nonces and typehashes\\n    mapping(address => uint256) public nonces;\\n    bytes32 public constant DOMAIN_TYPE_HASH = keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n    bytes32 public DOMAIN_SEPARATOR;\\n    bytes32 public constant PERMIT_TYPE_HASH = keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    // Roles\\n    bytes32 public constant ACCOUNTANT_MANAGER = keccak256(\\\"ACCOUNTANT_MANAGER\\\");\\n    bytes32 public constant QUEUE_MANAGER = keccak256(\\\"QUEUE_MANAGER\\\");\\n    bytes32 public constant DEPOSIT_LIMIT_MANAGER = keccak256(\\\"DEPOSIT_LIMIT_MANAGER\\\");\\n    bytes32 public constant WITHDRAW_LIMIT_MANAGER = keccak256(\\\"WITHDRAW_LIMIT_MANAGER\\\");\\n    bytes32 public constant MINIMUM_IDLE_MANAGER = keccak256(\\\"MINIMUM_IDLE_MANAGER\\\");\\n    bytes32 public constant PROFIT_UNLOCK_MANAGER = keccak256(\\\"PROFIT_UNLOCK_MANAGER\\\");\\n    bytes32 public constant ROLE_MANAGER = keccak256(\\\"ROLE_MANAGER\\\");\\n    bytes32 public constant REPORTING_MANAGER = keccak256(\\\"REPORTING_MANAGER\\\");\\n    bytes32 public constant DEBT_PURCHASER = keccak256(\\\"DEBT_PURCHASER\\\");\\n    bytes32 public constant ADD_STRATEGY_MANAGER = keccak256(\\\"ADD_STRATEGY_MANAGER\\\");\\n    bytes32 public constant REVOKE_STRATEGY_MANAGER = keccak256(\\\"REVOKE_STRATEGY_MANAGER\\\");\\n    bytes32 public constant FORCE_REVOKE_MANAGER = keccak256(\\\"FORCE_REVOKE_MANAGER\\\");\\n    bytes32 public constant MAX_DEBT_MANAGER = keccak256(\\\"MAX_DEBT_MANAGER\\\");\\n    bytes32 public constant DEBT_MANAGER = keccak256(\\\"DEBT_MANAGER\\\");\\n    bytes32 public constant EMERGENCY_MANAGER = keccak256(\\\"EMERGENCY_MANAGER\\\");         \\n}\",\"keccak256\":\"0x983c357cd715d1e7088681bf4ae239abf339b4a7b6405a817233783fd372bfb9\",\"license\":\"AGPL 3.0\"},\"contracts/VaultStructs.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL 3.0\\n// Copyright Fathom 2023\\n\\npragma solidity ^0.8.16;\\n\\nstruct StrategyParams {\\n    uint256 activation;\\n    uint256 lastReport;\\n    uint256 currentDebt;\\n    uint256 maxDebt;\\n}\\n\\nstruct FeeAssessment {\\n    uint256 totalFees;\\n    uint256 totalRefunds;\\n    uint256 protocolFees;\\n    address protocolFeeRecipient;\\n}\\n\\nstruct ShareManagement {\\n    uint256 sharesToBurn;\\n    uint256 accountantFeesShares;\\n    uint256 protocolFeesShares;\\n}\\n\\nstruct WithdrawalState {\\n    uint256 requestedAssets;\\n    uint256 currTotalIdle;\\n    uint256 currTotalDebt;\\n    uint256 assetsNeeded;\\n    uint256 previousBalance;\\n    uint256 unrealisedLossesShare;\\n}\\n\\n// ENUMS\\nenum StrategyChangeType {\\n    ADDED, // Corresponds to the strategy being added.\\n    REVOKED // Corresponds to the strategy being revoked.\\n}\\n\\nenum RoleStatusChange {\\n    OPENED, // Corresponds to a role being opened.\\n    CLOSED // Corresponds to a role being closed.\\n}\\n\\nenum Rounding {\\n    ROUND_DOWN, // Corresponds to rounding down to the nearest whole number.\\n    ROUND_UP // Corresponds to rounding up to the nearest whole number.\\n}\",\"keccak256\":\"0x98a7128599e8f99c1be3515d79e4aff06cd0d604b6b10d13f87ffe1210330cc4\",\"license\":\"AGPL 3.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061031b5760003560e01c806391986003116101a557806391986003146106c457806391d14854146106d757806399374642146106ea5780639a78e72e1461070a5780639af1d35a146107365780639e34e348146107655780639f3988f314610778578063a217fddf1461079f578063a835cd81146107a7578063a98222c4146107ba578063ab5b4d49146107e1578063acded97d14610808578063b1c46c9f1461081b578063b3c187f21461082e578063b6cc2d1f14610841578063ba71ecd414610862578063bbe4eb491461086a578063bee7e3d914610877578063c065ca071461088a578063c0993eea146108b1578063c8d74b60146108d8578063c8dffa95146108ff578063d4ae064f14610908578063d547741f1461092f578063ecf7085814610942578063f1daeba81461094b578063f42c77ae14610972578063f5b944eb14610985578063f6d7bfa0146109ac578063f828f50b146109bf578063fc0e74d1146109c8578063fd967f47146109dc578063fec61f06146109e5578063ff1e7f0814610a0c57600080fd5b8062435da51461032057806301ffc9a71461034957806303dcd12c146103695780630835a3fc1461039d5780630952864e146103a65780630ad283d0146103af57806316d3bfbb146103d6578063223e5479146103fd578063248a9ca31461041257806329f3cef5146104255780632d6326921461043a5780632dd31000146104435780632f2ff15d1461046a5780633644e5151461047d57806336568abe1461048657806336fba084146104995780633764254a146104a557806339b70e38146104b857806339ebf823146104cb5780633cd7b5ab146105105780633f7b5e40146105195780634800d97f146105215780634ce1d38a146105555780634cfe51dc1461057c5780634d4bb197146105a35780634fb3ccc5146105ca5780635141eebb146105dd57806353a66132146105e65780635aa6e675146106095780635bf6b4fb1461061c578063652da3241461064357806377e3b2671461066a5780637ecebe001461069b5780638afca8f0146106bb575b600080fd5b601854610333906001600160a01b031681565b6040516103409190612641565b60405180910390f35b61035c610357366004612671565b610a1f565b604051610340919061269a565b6103907f633076a97f32ae349b28772e7b1483f67a926f150cbc501d02bdbd77389325ab81565b60405161034091906126ae565b61039060115481565b610390601a5481565b6103907fc723f4dd6268e1c374639e36d629c765285ee7003913389d582c300f186dde9781565b6103907f000000000000000000000000000000000000000000000000000000000000000081565b61041061040b3660046126d0565b610a56565b005b610390610420366004612702565b610c5b565b61042d610c70565b6040516103409190612780565b610390601b5481565b6103337f000000000000000000000000000000000000000000000000000000000000000081565b610410610478366004612791565b610cd2565b610390601f5481565b610410610494366004612791565b610cf3565b61039064e8d4a5100081565b6104106104b33660046127ce565b610d32565b600154610333906001600160a01b031681565b6105006104d93660046126d0565b60056020526000908152604090208054600182015460028301546003909301549192909184565b6040516103409493929190612801565b61039060105481565b610390600a81565b6105487f000000000000000000000000000000000000000000000000000000000000000081565b6040516103409190612877565b6103907f69d1171ac0a63777a6733cda21aec9ed3d48a4fd11f273c934a691dec5e5589c81565b6103907f862f91c9d89d6135b19873b921c90b702cb2e175c371b8430026b9577e69111981565b6103907f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b601354610333906001600160a01b031681565b610390601c5481565b61035c6105f4366004612702565b60176020526000908152604090205460ff1681565b600454610333906001600160a01b031681565b6103907fea672c1c09cd95c51af9509f646f3615ff0071aae8652bd821471ee9037fd72c81565b6103907fcd9f023a942ee35097ead74b2505bea9f2c5d47465db92dd195cf7f01a41cfe181565b61068e604051806040016040528060058152602001640312e302e360dc1b81525081565b60405161034091906128e7565b6103906106a93660046126d0565b601e6020526000908152604090205481565b610390601d5481565b601554610333906001600160a01b031681565b61035c6106e5366004612791565b610d5d565b6103906106f83660046126d0565b60166020526000908152604090205481565b6103906107183660046126d0565b6001600160a01b031660009081526005602052604090206002015490565b600654600754600854600954610755939291906001600160a01b031684565b60405161034094939291906128f8565b601454610333906001600160a01b031681565b6103907f6f430d649a8640e48ff9bfbc353b3f99ed630163857821b3b4075e3871dafbf581565b610390600081565b6103906107b536600461292d565b610d86565b6103907f2f0dbbe8c2c0170206c50ec0cafa1c0dbd03e73e67c2a960178df30a0a30ee2e81565b6103907f900d80def0427daac599092fcb16b21808ec68dd9a2e1eae89d1e8db2135737581565b600254610333906001600160a01b031681565b61041061082936600461297d565b6118d5565b601954610333906001600160a01b031681565b61085461084f3660046126d0565b611943565b6040516103409291906129e1565b600a54610390565b600b5461035c9060ff1681565b600354610333906001600160a01b031681565b6103907f2a0e761830cc61f2707ea7bb138008bf9dda7f7d34c77736d0a116604e95ea1681565b6103907f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81565b6103907f152ebba56b9738ee3d8baea1b76fa31dcdcd79b1929bfea7d58ee12cfdf1a65381565b610390600f5481565b6103907fa18eaea71a088b547b8c932b48861853b3434d9a3240b94466c607e28b69659581565b61041061093d366004612791565b611cc8565b61039060125481565b6103907f7cbb3cdf689b8ea3e9d265f66bc4e0a99069268217017d38d2a5a559abc6271981565b610410610980366004612a0f565b611ce4565b6103907ff206625bad3d9112d5609b8d356e6fbd514cd1f69980d4ce2b3e6e68e1789ace81565b6104106109ba3660046127ce565b611f05565b610390600e5481565b60195461035c90600160a01b900460ff1681565b61039061271081565b6103907fd45f7ccff42f059d4e47c3f027c444272257266f7e88b981e142f0aa38fbfd7881565b610333610a1a366004612702565b611f99565b60006001600160e01b03198216637965db0b60e01b1480610a5057506301ffc9a760e01b6001600160e01b03198316145b92915050565b6001600160a01b0381161580610a7457506001600160a01b03811630145b15610a925760405163d92e233d60e01b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316816001600160a01b03166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610afa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b1e9190612a4d565b6001600160a01b031614610b4557604051636448d6e960e11b815260040160405180910390fd5b6001600160a01b03811660009081526005602052604090205415610b7c5760405163c976754d60e01b815260040160405180910390fd5b604080516080810182524280825260208083019182526000838501818152606085018281526001600160a01b038816835260059093529490209251835590516001830155915160028201559051600390910155600a805490811015610c2757600a80546001810182556000919091527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a80180546001600160a01b0319166001600160a01b0384161790555b816001600160a01b03166000805160206130618339815191526000604051610c4f9190612ab7565b60405180910390a25050565b60009081526020819052604090206001015490565b6060600a805480602002602001604051908101604052809291908181526020018280548015610cc857602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610caa575b5050505050905090565b610cdb82610c5b565b610ce481611fc3565b610cee8383611fd0565b505050565b6001600160a01b0381163314610d245760405162461bcd60e51b8152600401610d1b90612ac5565b60405180910390fd5b610d2e8282612054565b5050565b6000610d3d81611fc3565b506001600160a01b03909116600090815260056020526040902060020155565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b60025460408051635453491f60e01b815290516000926001600160a01b031691635453491f916004808301926020929190829003018187875af1158015610dd1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610df59190612b23565b6010556002546040805163cea5a1a760e01b815290516001600160a01b039092169163cea5a1a79160048082019260209290919082900301816000875af1158015610e44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e689190612b23565b6011556001600160a01b0383166000908152600560205260409020600201548214801590610e9a575060115460105411155b15610eb85760405163356680b760e01b815260040160405180910390fd5b6001600160a01b038316600090815260056020526040902060020154601954839190600160a01b900460ff161515600103610ef257600091505b808203610f125760405163084df06b60e41b815260040160405180910390fd5b818111156113ae576000610f268383612b5a565b905060115481601054610f399190612b6d565b1015610f5c57601054601154610f4f9190612b5a565b905081811115610f5c5750805b604051636c82bbbf60e11b81526000906001600160a01b038816906307a2d13a90829063d905777e90610f93908d90600401612641565b602060405180830381865afa158015610fb0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fd49190612b23565b6040518263ffffffff1660e01b8152600401610ff091906126ae565b602060405180830381865afa15801561100d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110319190612b23565b90506000811161105457604051637c946ed760e01b815260040160405180910390fd5b81811015611060578091505b600254604051635a56909960e01b81526000916001600160a01b031690635a56909990611093908b908790600401612b80565b602060405180830381865afa1580156110b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110d49190612b23565b905080156110f5576040516339589fdd60e21b815260040160405180910390fd5b6040516370a0823160e01b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190611144908d90600401612641565b602060405180830381865afa158015611161573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111859190612b23565b6002546040516316a7a12b60e31b81529192506001600160a01b03169063b53d0958906111b8908c908890600401612b80565b600060405180830381600087803b1580156111d257600080fd5b505af11580156111e6573d6000803e3d6000fd5b50506040516370a0823160e01b8152600092506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691506370a0823190611239908e90600401612641565b602060405180830381865afa158015611256573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061127a9190612b23565b9050600061129161128b8484612b5a565b886120b9565b90508581111561129f578095505b80601060008282546112b19190612b6d565b9250508190555085600f60008282546112ca9190612b5a565b9091555050600254601054604051634d28468560e11b81526001600160a01b0390921691639a508d0a91611300916004016126ae565b600060405180830381600087803b15801561131a57600080fd5b505af115801561132e573d6000803e3d6000fd5b5050600254600f5460405163e315cd7560e01b81526001600160a01b03909216935063e315cd759250611363916004016126ae565b600060405180830381600087803b15801561137d57600080fd5b505af1158015611391573d6000803e3d6000fd5b5050505085876113a19190612b5a565b9750505050505050611872565b6001600160a01b0385166000908152600560205260409020600301548211156113ea5760405163d49d8c2360e01b815260040160405180910390fd5b60405163402d267d60e01b81526000906001600160a01b0387169063402d267d90611419908a90600401612641565b602060405180830381865afa158015611436573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061145a9190612b23565b90506000811161147d57604051637c946ed760e01b815260040160405180910390fd5b60006114898385612b5a565b9050818111156114965750805b60006011546010546114a89190612b5a565b9050808211156114b6578091505b811561186e5760025460405163300d25a560e21b81526001600160a01b039091169063c034969490611510907f0000000000000000000000000000000000000000000000000000000000000000908c908790600401612b8e565b600060405180830381600087803b15801561152a57600080fd5b505af115801561153e573d6000803e3d6000fd5b50506002546040516370a0823160e01b8152600093506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811693506370a082319261159692911690600401612641565b602060405180830381865afa1580156115b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115d79190612b23565b60025460405163af76d4bd60e01b81529192506001600160a01b03169063af76d4bd9061160a908c908790600401612b80565b600060405180830381600087803b15801561162457600080fd5b505af1158015611638573d6000803e3d6000fd5b50506002546040516370a0823160e01b8152600093506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811693506370a082319261169092911690600401612641565b602060405180830381865afa1580156116ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116d19190612b23565b60025460405163300d25a560e21b81529192506001600160a01b03169063c034969490611727907f0000000000000000000000000000000000000000000000000000000000000000908e90600090600401612bcb565b600060405180830381600087803b15801561174157600080fd5b505af1158015611755573d6000803e3d6000fd5b5050505080826117659190612b5a565b935083601060008282546117799190612b5a565b9250508190555083600f60008282546117929190612b6d565b9091555050600254601054604051634d28468560e11b81526001600160a01b0390921691639a508d0a916117c8916004016126ae565b600060405180830381600087803b1580156117e257600080fd5b505af11580156117f6573d6000803e3d6000fd5b5050600254600f5460405163e315cd7560e01b81526001600160a01b03909216935063e315cd75925061182b916004016126ae565b600060405180830381600087803b15801561184557600080fd5b505af1158015611859573d6000803e3d6000fd5b5050505083866118699190612b6d565b965050505b5050505b6001600160a01b03851660008181526005602052604090819020600201849055517f5e2b8821ad6e0e26207e0cb4d242d07eeb1cbb1cfd853e645bdcd27cc5484f95906118c290849086906129e1565b60405180910390a25090505b9392505050565b600684905560078390556008829055600980546001600160a01b0319166001600160a01b0383161790556040518290849086907f94aff052e386f7223093efb6183667af7a14a6d206ce5e9c66a9c064ebe9452890611935908690612641565b60405180910390a450505050565b6001600160a01b0381166000908152600560205260408120548190810361197d57604051630631bc2160e51b815260040160405180910390fd5b600260009054906101000a90046001600160a01b03166001600160a01b031663e0bf18ad6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156119cd57600080fd5b505af11580156119e1573d6000803e3d6000fd5b505050506000806119f1856120cf565b915091506000611a0286848461220b565b60025481516040808401519051631d8325ef60e01b81529394506000936001600160a01b0390931692631d8325ef92611a45928992899291908e90600401612bf3565b6060604051808303816000875af1158015611a64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a889190612cf7565b6002546040516356dd3ccf60e11b815291925060009182916001600160a01b03169063adba799e90611ac290869088908b90600401612d9f565b60408051808303816000875af1158015611ae0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b049190612dc8565b600254604051633e986eed60e01b81529294509092506001600160a01b031690633e986eed90611b3a90859085906004016129e1565b600060405180830381600087803b158015611b5457600080fd5b505af1158015611b68573d6000803e3d6000fd5b505050506001600160a01b038981166000818152600560205260408082204260018201556002908101549054888301519251637ff0007760e01b81529495600080516020613081833981519152958d958d959390921692637ff0007792611bd192600401612dfb565b602060405180830381865afa158015611bee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c129190612b23565b60025460208a015160408b01516001600160a01b0390921691637ff0007791611c3a91612b6d565b60006040518363ffffffff1660e01b8152600401611c59929190612dfb565b602060405180830381865afa158015611c76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c9a9190612b23565b8a60200151604051611cb196959493929190612e16565b60405180910390a250939792965091945050505050565b611cd182610c5b565b611cda81611fc3565b610cee8383612054565b6001600160a01b0382166000908152600560205260408120549003611d1c57604051630631bc2160e51b815260040160405180910390fd5b6001600160a01b03821660009081526005602052604081206002015415801590611d44575081155b15611d6257604051633546382f60e21b815260040160405180910390fd5b506001600160a01b038216600090815260056020526040812060020154600f805491928392611d92908490612b5a565b92505081905550826001600160a01b0316600080516020613081833981519152600083600080600080604051611dcd96959493929190612e70565b60405180910390a2604080516080810182526000808252602080830182815283850183815260608086018581526001600160a01b038b168652600590945295909320935184555160018401559051600283015551600390910155600a5415611ebb5760005b600a54811015611eb9576000600a8281548110611e5157611e51612ebf565b6000918252602090912001546001600160a01b03908116915086168114611ea65780838381518110611e8557611e85612ebf565b60200260200101906001600160a01b031690816001600160a01b0316815250505b5080611eb181612ed5565b915050611e32565b505b8051611ece90600a9060208401906125a1565b50836001600160a01b03166000805160206130618339815191526001604051611ef79190612ab7565b60405180910390a250505050565b6001600160a01b0382166000908152600560205260408120549003611f3d57604051630631bc2160e51b815260040160405180910390fd5b6001600160a01b038216600081815260056020526040908190206003018390555132907fb3eef2123fec1523a6bbc90aceb203000154c1a4974335fe06b544c7534d4b8990611f8d9085906126ae565b60405180910390a35050565b600a8181548110611fa957600080fd5b6000918252602090912001546001600160a01b0316905081565b611fcd81336123cb565b50565b611fda8282610d5d565b610d2e576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556120103390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b61205e8282610d5d565b15610d2e576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60008183106120c857816118ce565b5090919050565b6002546040516370a0823160e01b8152600091829182916001600160a01b03808716926370a0823192612106921690600401612641565b602060405180830381865afa158015612123573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121479190612b23565b90506000846001600160a01b03166307a2d13a836040518263ffffffff1660e01b815260040161217791906126ae565b602060405180830381865afa158015612194573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121b89190612b23565b6001600160a01b03861660009081526005602052604081206002015491925080828411156121f1576121ea8385612b5a565b91506121fe565b6121fb8484612b5a565b90505b9097909650945050505050565b61223f604051806080016040528060008152602001600081526020016000815260200160006001600160a01b031681525090565b6040805160808101825260065481526007546020820152600854918101919091526009546001600160a01b03908116606083015260135416156123c35760135460405163921f8a8f60e01b81526001600160a01b039091169063921f8a8f906122b090889088908890600401612eef565b60408051808303816000875af11580156122ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122f29190612dc8565b6020830152808252156123c35760007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166307d3277f6040518163ffffffff1660e01b81526004016040805180830381865afa15801561235e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123829190612f1f565b6001600160a01b03166060840152905061ffff8116156123c1578151612710906123b19061ffff841690612f52565b6123bb9190612f87565b60408301525b505b949350505050565b6123d58282610d5d565b610d2e576123e281612424565b6123ed836020612436565b6040516020016123fe929190612fbd565b60408051601f198184030181529082905262461bcd60e51b8252610d1b916004016128e7565b6060610a506001600160a01b03831660145b60606000612445836002612f52565b612450906002612b6d565b6001600160401b0381111561246757612467612c3f565b6040519080825280601f01601f191660200182016040528015612491576020820181803683370190505b509050600360fc1b816000815181106124ac576124ac612ebf565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106124db576124db612ebf565b60200101906001600160f81b031916908160001a90535060006124ff846002612f52565b61250a906001612b6d565b90505b6001811115612582576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061253e5761253e612ebf565b1a60f81b82828151811061255457612554612ebf565b60200101906001600160f81b031916908160001a90535060049490941c9361257b8161300f565b905061250d565b5083156118ce5760405162461bcd60e51b8152600401610d1b90613026565b8280548282559060005260206000209081019282156125f6579160200282015b828111156125f657825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906125c1565b50612602929150612606565b5090565b5b808211156126025760008155600101612607565b6001600160a01b031690565b6000610a508261261b565b61263b81612627565b82525050565b60208101610a508284612632565b6001600160e01b031981165b8114611fcd57600080fd5b8035610a508161264f565b60006020828403121561268657612686600080fd5b60006123c38484612666565b80151561263b565b60208101610a508284612692565b8061263b565b60208101610a5082846126a8565b61265b81612627565b8035610a50816126bc565b6000602082840312156126e5576126e5600080fd5b60006123c384846126c5565b8061265b565b8035610a50816126f1565b60006020828403121561271757612717600080fd5b60006123c384846126f7565b600061272f8383612632565b505060200190565b6000612741825190565b80845260209384019383018060005b838110156127755781516127648882612723565b975060208301925050600101612750565b509495945050505050565b602080825281016118ce8184612737565b600080604083850312156127a7576127a7600080fd5b60006127b385856126f7565b92505060206127c4858286016126c5565b9150509250929050565b600080604083850312156127e4576127e4600080fd5b60006127f085856126c5565b92505060206127c4858286016126f7565b6080810161280f82876126a8565b61281c60208301866126a8565b61282960408301856126a8565b61283660608301846126a8565b95945050505050565b6000610a506128536128508461261b565b90565b61261b565b6000610a508261283f565b6000610a5082612858565b61263b81612863565b60208101610a50828461286e565b60005b838110156128a0578181015183820152602001612888565b50506000910152565b601f01601f191690565b60006128bd825190565b8084526020840193506128d4818560208601612885565b6128dd816128a9565b9093019392505050565b602080825281016118ce81846128b3565b6080810161290682876126a8565b61291360208301866126a8565b61292060408301856126a8565b6128366060830184612632565b60008060006060848603121561294557612945600080fd5b600061295186866126c5565b9350506020612962868287016126c5565b9250506040612973868287016126f7565b9150509250925092565b6000806000806080858703121561299657612996600080fd5b60006129a287876126f7565b94505060206129b3878288016126f7565b93505060406129c4878288016126f7565b92505060606129d5878288016126c5565b91505092959194509250565b604081016129ef82856126a8565b6118ce60208301846126a8565b80151561265b565b8035610a50816129fc565b60008060408385031215612a2557612a25600080fd5b6000612a3185856126c5565b92505060206127c485828601612a04565b8051610a50816126bc565b600060208284031215612a6257612a62600080fd5b60006123c38484612a42565b634e487b7160e01b600052602160045260246000fd5b60028110611fcd57611fcd612a6e565b80612a9e81612a84565b919050565b6000610a5082612a94565b61263b81612aa3565b60208101610a508284612aae565b60208082528101610a5081602f81527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560208201526e103937b632b9903337b91039b2b63360891b604082015260600190565b8051610a50816126f1565b600060208284031215612b3857612b38600080fd5b60006123c38484612b18565b634e487b7160e01b600052601160045260246000fd5b81810381811115610a5057610a50612b44565b80820180821115610a5057610a50612b44565b604081016129ef8285612632565b60608101612b9c8286612632565b612ba96020830185612632565b6123c360408301846126a8565b6000610a506128508381565b61263b81612bb6565b60608101612bd98286612632565b612be66020830185612632565b6123c36040830184612bc2565b60a08101612c0182886126a8565b612c0e60208301876126a8565b612c1b60408301866126a8565b612c2860608301856126a8565b612c356080830184612632565b9695505050505050565b634e487b7160e01b600052604160045260246000fd5b612c5e826128a9565b81018181106001600160401b0382111715612c7b57612c7b612c3f565b6040525050565b6000612c8d60405190565b9050612a9e8282612c55565b600060608284031215612cae57612cae600080fd5b612cb86060612c82565b90506000612cc68484612b18565b8252506020612cd784848301612b18565b6020830152506040612ceb84828501612b18565b60408301525092915050565b600060608284031215612d0c57612d0c600080fd5b60006123c38484612c99565b80516060830190612d2984826126a8565b506020820151612d3c60208501826126a8565b506040820151612d4f60408501826126a8565b50505050565b80516080830190612d6684826126a8565b506020820151612d7960208501826126a8565b506040820151612d8c60408501826126a8565b506060820151612d4f6060850182612632565b6101008101612dae8286612d18565b612dbb6060830185612d55565b6123c360e08301846126a8565b60008060408385031215612dde57612dde600080fd5b6000612dea8585612b18565b92505060206127c485828601612b18565b60408101612e0982856126a8565b6118ce6020830184612aae565b60c08101612e2482896126a8565b612e3160208301886126a8565b612e3e60408301876126a8565b612e4b60608301866126a8565b612e5860808301856126a8565b612e6560a08301846126a8565b979650505050505050565b60c08101612e7e8289612bc2565b612e8b60208301886126a8565b612e986040830187612bc2565b612ea56060830186612bc2565b612eb26080830185612bc2565b612e6560a0830184612bc2565b634e487b7160e01b600052603260045260246000fd5b60006000198203612ee857612ee8612b44565b5060010190565b60608101612efd8286612632565b612ba960208301856126a8565b61ffff811661265b565b8051610a5081612f0a565b60008060408385031215612f3557612f35600080fd5b6000612f418585612f14565b92505060206127c485828601612a42565b6000816000190483118215151615612f6c57612f6c612b44565b500290565b634e487b7160e01b600052601260045260246000fd5b600082612f9657612f96612f71565b500490565b6000612fa5825190565b612fb3818560208601612885565b9290920192915050565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b81526017016000612fe98285612f9b565b7001034b99036b4b9b9b4b733903937b6329607d1b815260110191506123c38284612f9b565b60008161301e5761301e612b44565b506000190190565b60208082528181019081527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604083015260608201610a5056febcf55f13710eed7eda89416c2984da5475fcff67e96fe85e56eed808559a52227f2ad1d3ba35276f35ef140f83e3e0f17b23064fd710113d3f7a5ab30d267811a26469706673582212202d664f941923d9dd2b5b0821fe13a97ac9ac858c7386bbf1a9e764f23bc5745d64736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "title": "STRATEGY MANAGEMENT",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24,
        "contract": "contracts/StrategyManager.sol:StrategyManager",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 9466,
        "contract": "contracts/StrategyManager.sol:StrategyManager",
        "label": "strategyManager",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 9468,
        "contract": "contracts/StrategyManager.sol:StrategyManager",
        "label": "sharesManager",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 9470,
        "contract": "contracts/StrategyManager.sol:StrategyManager",
        "label": "setters",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 9472,
        "contract": "contracts/StrategyManager.sol:StrategyManager",
        "label": "governance",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 9477,
        "contract": "contracts/StrategyManager.sol:StrategyManager",
        "label": "strategies",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(StrategyParams)9638_storage)"
      },
      {
        "astId": 9480,
        "contract": "contracts/StrategyManager.sol:StrategyManager",
        "label": "fees",
        "offset": 0,
        "slot": "6",
        "type": "t_struct(FeeAssessment)9647_storage"
      },
      {
        "astId": 9483,
        "contract": "contracts/StrategyManager.sol:StrategyManager",
        "label": "defaultQueue",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 9485,
        "contract": "contracts/StrategyManager.sol:StrategyManager",
        "label": "useDefaultQueue",
        "offset": 0,
        "slot": "11",
        "type": "t_bool"
      },
      {
        "astId": 9487,
        "contract": "contracts/StrategyManager.sol:StrategyManager",
        "label": "initialized",
        "offset": 1,
        "slot": "11",
        "type": "t_bool"
      },
      {
        "astId": 9491,
        "contract": "contracts/StrategyManager.sol:StrategyManager",
        "label": "_balanceOf",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 9497,
        "contract": "contracts/StrategyManager.sol:StrategyManager",
        "label": "_allowance",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 9499,
        "contract": "contracts/StrategyManager.sol:StrategyManager",
        "label": "totalSupplyAmount",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 9501,
        "contract": "contracts/StrategyManager.sol:StrategyManager",
        "label": "totalDebtAmount",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 9503,
        "contract": "contracts/StrategyManager.sol:StrategyManager",
        "label": "totalIdleAmount",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 9505,
        "contract": "contracts/StrategyManager.sol:StrategyManager",
        "label": "minimumTotalIdle",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 9507,
        "contract": "contracts/StrategyManager.sol:StrategyManager",
        "label": "depositLimit",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 9509,
        "contract": "contracts/StrategyManager.sol:StrategyManager",
        "label": "accountant",
        "offset": 0,
        "slot": "19",
        "type": "t_address"
      },
      {
        "astId": 9511,
        "contract": "contracts/StrategyManager.sol:StrategyManager",
        "label": "depositLimitModule",
        "offset": 0,
        "slot": "20",
        "type": "t_address"
      },
      {
        "astId": 9513,
        "contract": "contracts/StrategyManager.sol:StrategyManager",
        "label": "withdrawLimitModule",
        "offset": 0,
        "slot": "21",
        "type": "t_address"
      },
      {
        "astId": 9517,
        "contract": "contracts/StrategyManager.sol:StrategyManager",
        "label": "roles",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_address,t_bytes32)"
      },
      {
        "astId": 9521,
        "contract": "contracts/StrategyManager.sol:StrategyManager",
        "label": "openRoles",
        "offset": 0,
        "slot": "23",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 9523,
        "contract": "contracts/StrategyManager.sol:StrategyManager",
        "label": "roleManager",
        "offset": 0,
        "slot": "24",
        "type": "t_address"
      },
      {
        "astId": 9525,
        "contract": "contracts/StrategyManager.sol:StrategyManager",
        "label": "futureRoleManager",
        "offset": 0,
        "slot": "25",
        "type": "t_address"
      },
      {
        "astId": 9527,
        "contract": "contracts/StrategyManager.sol:StrategyManager",
        "label": "shutdown",
        "offset": 20,
        "slot": "25",
        "type": "t_bool"
      },
      {
        "astId": 9529,
        "contract": "contracts/StrategyManager.sol:StrategyManager",
        "label": "profitMaxUnlockTime",
        "offset": 0,
        "slot": "26",
        "type": "t_uint256"
      },
      {
        "astId": 9531,
        "contract": "contracts/StrategyManager.sol:StrategyManager",
        "label": "fullProfitUnlockDate",
        "offset": 0,
        "slot": "27",
        "type": "t_uint256"
      },
      {
        "astId": 9533,
        "contract": "contracts/StrategyManager.sol:StrategyManager",
        "label": "profitUnlockingRate",
        "offset": 0,
        "slot": "28",
        "type": "t_uint256"
      },
      {
        "astId": 9535,
        "contract": "contracts/StrategyManager.sol:StrategyManager",
        "label": "lastProfitUpdate",
        "offset": 0,
        "slot": "29",
        "type": "t_uint256"
      },
      {
        "astId": 9539,
        "contract": "contracts/StrategyManager.sol:StrategyManager",
        "label": "nonces",
        "offset": 0,
        "slot": "30",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 9546,
        "contract": "contracts/StrategyManager.sol:StrategyManager",
        "label": "DOMAIN_SEPARATOR",
        "offset": 0,
        "slot": "31",
        "type": "t_bytes32"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(StrategyParams)9638_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct StrategyParams)",
        "numberOfBytes": "32",
        "value": "t_struct(StrategyParams)9638_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_struct(FeeAssessment)9647_storage": {
        "encoding": "inplace",
        "label": "struct FeeAssessment",
        "members": [
          {
            "astId": 9640,
            "contract": "contracts/StrategyManager.sol:StrategyManager",
            "label": "totalFees",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9642,
            "contract": "contracts/StrategyManager.sol:StrategyManager",
            "label": "totalRefunds",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 9644,
            "contract": "contracts/StrategyManager.sol:StrategyManager",
            "label": "protocolFees",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 9646,
            "contract": "contracts/StrategyManager.sol:StrategyManager",
            "label": "protocolFeeRecipient",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/StrategyManager.sol:StrategyManager",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/StrategyManager.sol:StrategyManager",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(StrategyParams)9638_storage": {
        "encoding": "inplace",
        "label": "struct StrategyParams",
        "members": [
          {
            "astId": 9631,
            "contract": "contracts/StrategyManager.sol:StrategyManager",
            "label": "activation",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9633,
            "contract": "contracts/StrategyManager.sol:StrategyManager",
            "label": "lastReport",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 9635,
            "contract": "contracts/StrategyManager.sol:StrategyManager",
            "label": "currentDebt",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 9637,
            "contract": "contracts/StrategyManager.sol:StrategyManager",
            "label": "maxDebt",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}