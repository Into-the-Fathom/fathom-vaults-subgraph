{
  "address": "0x7514Fb61df8a782db0647160c3FE7b14Cd995Efc",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_profitMaxUnlockTime",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_strategyManagerAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_sharesManagerAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_settersAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_governanceAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "DebtDidntChange",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DebtHigherThanMaxDebt",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC20InsufficientAllowance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC20PermitExpired",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC20PermitInvalidSignature",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExceedDepositLimit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InactiveStrategy",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientAssets",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientFunds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientShares",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAsset",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAssetDecimals",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MaxLoss",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProfitUnlockTimeTooLong",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StrategyAlreadyActive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StrategyDebtIsLessThanAssetsNeeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StrategyHasDebt",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StrategyHasUnrealisedLosses",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StrategyIsShutdown",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TooMuchLoss",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UsingModule",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroValue",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DebtPurchased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currentDebt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newDebt",
          "type": "uint256"
        }
      ],
      "name": "DebtUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "RoleSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "enum RoleStatusChange",
          "name": "status",
          "type": "uint8"
        }
      ],
      "name": "RoleStatusChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "Shutdown",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum StrategyChangeType",
          "name": "changeType",
          "type": "uint8"
        }
      ],
      "name": "StrategyChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gain",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "loss",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currentDebt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "protocolFees",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalFees",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalRefunds",
          "type": "uint256"
        }
      ],
      "name": "StrategyReported",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "accountant",
          "type": "address"
        }
      ],
      "name": "UpdateAccountant",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "newDefaultQueue",
          "type": "address[]"
        }
      ],
      "name": "UpdateDefaultQueue",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "depositLimit",
          "type": "uint256"
        }
      ],
      "name": "UpdateDepositLimit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "depositLimitModule",
          "type": "address"
        }
      ],
      "name": "UpdateDepositLimitModule",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minimumTotalIdle",
          "type": "uint256"
        }
      ],
      "name": "UpdateMinimumTotalIdle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "profitMaxUnlockTime",
          "type": "uint256"
        }
      ],
      "name": "UpdateProfitMaxUnlockTime",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "roleManager",
          "type": "address"
        }
      ],
      "name": "UpdateRoleManager",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "useDefaultQueue",
          "type": "bool"
        }
      ],
      "name": "UpdateUseDefaultQueue",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "withdrawLimitModule",
          "type": "address"
        }
      ],
      "name": "UpdateWithdrawLimitModule",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newDebt",
          "type": "uint256"
        }
      ],
      "name": "UpdatedMaxDebtForStrategy",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ACCOUNTANT_MANAGER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ADD_STRATEGY_MANAGER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "API_VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEBT_MANAGER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEBT_PURCHASER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEPOSIT_LIMIT_MANAGER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_TYPE_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "EMERGENCY_MANAGER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FACTORY",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FORCE_REVOKE_MANAGER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_BPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_BPS_EXTENDED",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_DEBT_MANAGER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_QUEUE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINIMUM_IDLE_MANAGER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ONE_YEAR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERMIT_TYPE_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PROFIT_UNLOCK_MANAGER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "QUEUE_MANAGER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REPORTING_MANAGER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REVOKE_STRATEGY_MANAGER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROLE_MANAGER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WITHDRAW_LIMIT_MANAGER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accountant",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newStrategy",
          "type": "address"
        }
      ],
      "name": "addStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "asset",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "buyDebt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "convertToAssets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "convertToShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "defaultQueue",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositLimitModule",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        }
      ],
      "name": "forceRevokeStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fullProfitUnlockDate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "futureRoleManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        }
      ],
      "name": "getDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastProfitUpdate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "maxDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "maxMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maxLoss",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_strategies",
          "type": "address[]"
        }
      ],
      "name": "maxRedeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maxLoss",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_strategies",
          "type": "address[]"
        }
      ],
      "name": "maxWithdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumTotalIdle",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "openRoles",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "previewDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "previewMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "previewRedeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "previewWithdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pricePerShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        }
      ],
      "name": "processReport",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "profitMaxUnlockTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "profitUnlockingRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maxLoss",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_strategies",
          "type": "address[]"
        }
      ],
      "name": "redeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        }
      ],
      "name": "revokeStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roleManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "roles",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAccountant",
          "type": "address"
        }
      ],
      "name": "setAccountant",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "newDefaultQueue",
          "type": "address[]"
        }
      ],
      "name": "setDefaultQueue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_depositLimit",
          "type": "uint256"
        }
      ],
      "name": "setDepositLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_depositLimitModule",
          "type": "address"
        }
      ],
      "name": "setDepositLimitModule",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minimumTotalIdle",
          "type": "uint256"
        }
      ],
      "name": "setMinimumTotalIdle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newProfitMaxUnlockTime",
          "type": "uint256"
        }
      ],
      "name": "setProfitMaxUnlockTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_useDefaultQueue",
          "type": "bool"
        }
      ],
      "name": "setUseDefaultQueue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_withdrawLimitModule",
          "type": "address"
        }
      ],
      "name": "setWithdrawLimitModule",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setters",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sharesManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "shutdown",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "shutdownVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "strategies",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "activation",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastReport",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "currentDebt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxDebt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "strategyManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAssets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDebtAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalIdleAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupplyAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unlockedShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "targetDebt",
          "type": "uint256"
        }
      ],
      "name": "updateDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "newMaxDebt",
          "type": "uint256"
        }
      ],
      "name": "updateMaxDebtForStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "useDefaultQueue",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maxLoss",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_strategies",
          "type": "address[]"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawLimitModule",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x12da91c3a2d481ca5305568a0839e21bd2d456d94f0cb50f7e5263b3f0b42fd0",
  "receipt": {
    "to": null,
    "from": "0xCB409e1A857318378137dFb42a06Ae87290631aD",
    "contractAddress": "0x7514Fb61df8a782db0647160c3FE7b14Cd995Efc",
    "transactionIndex": 1,
    "gasUsed": "3632426",
    "logsBloom": "0x
    "blockHash": "0x6d7b28b32c3bf4cddb49f63106875268bdce25bf7979418c52e042d5a0a79c65",
    "transactionHash": "0x12da91c3a2d481ca5305568a0839e21bd2d456d94f0cb50f7e5263b3f0b42fd0",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 57787633,
        "transactionHash": "0x12da91c3a2d481ca5305568a0839e21bd2d456d94f0cb50f7e5263b3f0b42fd0",
        "address": "0x7514Fb61df8a782db0647160c3FE7b14Cd995Efc",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000cb409e1a857318378137dfb42a06ae87290631ad",
          "0x000000000000000000000000cb409e1a857318378137dfb42a06ae87290631ad"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x6d7b28b32c3bf4cddb49f63106875268bdce25bf7979418c52e042d5a0a79c65"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 57787633,
        "transactionHash": "0x12da91c3a2d481ca5305568a0839e21bd2d456d94f0cb50f7e5263b3f0b42fd0",
        "address": "0x7514Fb61df8a782db0647160c3FE7b14Cd995Efc",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x2f0dbbe8c2c0170206c50ec0cafa1c0dbd03e73e67c2a960178df30a0a30ee2e",
          "0x000000000000000000000000cb409e1a857318378137dfb42a06ae87290631ad",
          "0x000000000000000000000000cb409e1a857318378137dfb42a06ae87290631ad"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x6d7b28b32c3bf4cddb49f63106875268bdce25bf7979418c52e042d5a0a79c65"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 57787633,
        "transactionHash": "0x12da91c3a2d481ca5305568a0839e21bd2d456d94f0cb50f7e5263b3f0b42fd0",
        "address": "0x7514Fb61df8a782db0647160c3FE7b14Cd995Efc",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x2a0e761830cc61f2707ea7bb138008bf9dda7f7d34c77736d0a116604e95ea16",
          "0x000000000000000000000000cb409e1a857318378137dfb42a06ae87290631ad",
          "0x000000000000000000000000cb409e1a857318378137dfb42a06ae87290631ad"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0x6d7b28b32c3bf4cddb49f63106875268bdce25bf7979418c52e042d5a0a79c65"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 57787633,
        "transactionHash": "0x12da91c3a2d481ca5305568a0839e21bd2d456d94f0cb50f7e5263b3f0b42fd0",
        "address": "0x7514Fb61df8a782db0647160c3FE7b14Cd995Efc",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x7cbb3cdf689b8ea3e9d265f66bc4e0a99069268217017d38d2a5a559abc62719",
          "0x000000000000000000000000cb409e1a857318378137dfb42a06ae87290631ad",
          "0x000000000000000000000000cb409e1a857318378137dfb42a06ae87290631ad"
        ],
        "data": "0x",
        "logIndex": 4,
        "blockHash": "0x6d7b28b32c3bf4cddb49f63106875268bdce25bf7979418c52e042d5a0a79c65"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 57787633,
        "transactionHash": "0x12da91c3a2d481ca5305568a0839e21bd2d456d94f0cb50f7e5263b3f0b42fd0",
        "address": "0x7514Fb61df8a782db0647160c3FE7b14Cd995Efc",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x152ebba56b9738ee3d8baea1b76fa31dcdcd79b1929bfea7d58ee12cfdf1a653",
          "0x000000000000000000000000cb409e1a857318378137dfb42a06ae87290631ad",
          "0x000000000000000000000000cb409e1a857318378137dfb42a06ae87290631ad"
        ],
        "data": "0x",
        "logIndex": 5,
        "blockHash": "0x6d7b28b32c3bf4cddb49f63106875268bdce25bf7979418c52e042d5a0a79c65"
      },
      {
        "transactionIndex": 1,
        "blockNumber": 57787633,
        "transactionHash": "0x12da91c3a2d481ca5305568a0839e21bd2d456d94f0cb50f7e5263b3f0b42fd0",
        "address": "0x7514Fb61df8a782db0647160c3FE7b14Cd995Efc",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x633076a97f32ae349b28772e7b1483f67a926f150cbc501d02bdbd77389325ab",
          "0x000000000000000000000000cb409e1a857318378137dfb42a06ae87290631ad",
          "0x000000000000000000000000cb409e1a857318378137dfb42a06ae87290631ad"
        ],
        "data": "0x",
        "logIndex": 6,
        "blockHash": "0x6d7b28b32c3bf4cddb49f63106875268bdce25bf7979418c52e042d5a0a79c65"
      }
    ],
    "blockNumber": 57787633,
    "cumulativeGasUsed": "3632426",
    "status": 1,
    "byzantium": true
  },
  "args": [
    60,
    "0x4cC7f4E55bfCaaFc03A0037B7dA3C796EAb52562",
    "0x7699a1c97bDa66E633AD98D9a275271F66DdAe2f",
    "0xaaF18Eb0a92B280dc60DBcf97F388f0d4C5c4788",
    "0x556E6b4613b188Bb63B73F9d217C10D064Dd0ad8"
  ],
  "numDeployments": 1,
  "solcInputHash": "b3fbebf59ef5838936feb91ec6045ace",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_profitMaxUnlockTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_strategyManagerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sharesManagerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_settersAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_governanceAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DebtDidntChange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DebtHigherThanMaxDebt\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC20PermitExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC20PermitInvalidSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExceedDepositLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InactiveStrategy\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientAssets\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientFunds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientShares\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAsset\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAssetDecimals\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxLoss\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProfitUnlockTimeTooLong\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StrategyAlreadyActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StrategyDebtIsLessThanAssetsNeeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StrategyHasDebt\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StrategyHasUnrealisedLosses\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StrategyIsShutdown\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooMuchLoss\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UsingModule\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroValue\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DebtPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentDebt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDebt\",\"type\":\"uint256\"}],\"name\":\"DebtUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"RoleSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"enum RoleStatusChange\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"RoleStatusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Shutdown\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum StrategyChangeType\",\"name\":\"changeType\",\"type\":\"uint8\"}],\"name\":\"StrategyChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gain\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loss\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentDebt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protocolFees\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalFees\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalRefunds\",\"type\":\"uint256\"}],\"name\":\"StrategyReported\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"accountant\",\"type\":\"address\"}],\"name\":\"UpdateAccountant\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"newDefaultQueue\",\"type\":\"address[]\"}],\"name\":\"UpdateDefaultQueue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositLimit\",\"type\":\"uint256\"}],\"name\":\"UpdateDepositLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositLimitModule\",\"type\":\"address\"}],\"name\":\"UpdateDepositLimitModule\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minimumTotalIdle\",\"type\":\"uint256\"}],\"name\":\"UpdateMinimumTotalIdle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profitMaxUnlockTime\",\"type\":\"uint256\"}],\"name\":\"UpdateProfitMaxUnlockTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"roleManager\",\"type\":\"address\"}],\"name\":\"UpdateRoleManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"useDefaultQueue\",\"type\":\"bool\"}],\"name\":\"UpdateUseDefaultQueue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"withdrawLimitModule\",\"type\":\"address\"}],\"name\":\"UpdateWithdrawLimitModule\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDebt\",\"type\":\"uint256\"}],\"name\":\"UpdatedMaxDebtForStrategy\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ACCOUNTANT_MANAGER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ADD_STRATEGY_MANAGER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"API_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEBT_MANAGER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEBT_PURCHASER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEPOSIT_LIMIT_MANAGER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPE_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EMERGENCY_MANAGER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FACTORY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FORCE_REVOKE_MANAGER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_BPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_BPS_EXTENDED\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_DEBT_MANAGER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_QUEUE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINIMUM_IDLE_MANAGER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ONE_YEAR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPE_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROFIT_UNLOCK_MANAGER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"QUEUE_MANAGER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REPORTING_MANAGER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REVOKE_STRATEGY_MANAGER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROLE_MANAGER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAW_LIMIT_MANAGER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accountant\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newStrategy\",\"type\":\"address\"}],\"name\":\"addStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"convertToAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"convertToShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"defaultQueue\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositLimitModule\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"forceRevokeStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fullProfitUnlockDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"futureRoleManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"getDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastProfitUpdate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"maxDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"maxMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxLoss\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_strategies\",\"type\":\"address[]\"}],\"name\":\"maxRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxLoss\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_strategies\",\"type\":\"address[]\"}],\"name\":\"maxWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumTotalIdle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"openRoles\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pricePerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"processReport\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"profitMaxUnlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"profitUnlockingRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxLoss\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_strategies\",\"type\":\"address[]\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"revokeStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roleManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"roles\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAccountant\",\"type\":\"address\"}],\"name\":\"setAccountant\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"newDefaultQueue\",\"type\":\"address[]\"}],\"name\":\"setDefaultQueue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositLimit\",\"type\":\"uint256\"}],\"name\":\"setDepositLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositLimitModule\",\"type\":\"address\"}],\"name\":\"setDepositLimitModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimumTotalIdle\",\"type\":\"uint256\"}],\"name\":\"setMinimumTotalIdle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newProfitMaxUnlockTime\",\"type\":\"uint256\"}],\"name\":\"setProfitMaxUnlockTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_useDefaultQueue\",\"type\":\"bool\"}],\"name\":\"setUseDefaultQueue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_withdrawLimitModule\",\"type\":\"address\"}],\"name\":\"setWithdrawLimitModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setters\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sharesManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shutdown\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shutdownVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"strategies\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"activation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastReport\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategyManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDebtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalIdleAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupplyAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockedShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"targetDebt\",\"type\":\"uint256\"}],\"name\":\"updateDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newMaxDebt\",\"type\":\"uint256\"}],\"name\":\"updateMaxDebtForStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"useDefaultQueue\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxLoss\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_strategies\",\"type\":\"address[]\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawLimitModule\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"title\":\"Yearn V3 Vault\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"The Yearn VaultV3 is designed as a non-opinionated system to distribute funds of  depositors for a specific `asset` into different opportunities (aka Strategies) and manage accounting in a robust way.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FathomVault.sol\":\"FathomVault\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":10},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd6e52cb394d7f5abe5dca2d4908a6be40417914720932de757de34a99ab87f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/FathomVault.sol\":{\"content\":\"// SPDX-License-Identifier: GNU AGPLv3\\npragma solidity ^0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {AccessControl} from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"./Interfaces/IVault.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"./VaultStorage.sol\\\";\\nimport \\\"./Interfaces/IVaultEvents.sol\\\";\\nimport \\\"./Interfaces/IAccountant.sol\\\";\\nimport \\\"./Interfaces/IStrategy.sol\\\";\\nimport \\\"./Interfaces/IDepositLimitModule.sol\\\";\\nimport \\\"./Interfaces/IWithdrawLimitModule.sol\\\";\\nimport \\\"./Interfaces/IFactory.sol\\\";\\nimport \\\"./Interfaces/IStrategyManager.sol\\\";\\nimport \\\"./Interfaces/ISharesManager.sol\\\";\\nimport \\\"./Interfaces/ISetters.sol\\\";\\nimport \\\"./Interfaces/IGovernance.sol\\\";\\n\\n/**\\n@title Yearn V3 Vault\\n@notice The Yearn VaultV3 is designed as a non-opinionated system to distribute funds of \\ndepositors for a specific `asset` into different opportunities (aka Strategies)\\nand manage accounting in a robust way.\\n*/\\n\\n// Solidity version of the Vyper contract\\ncontract FathomVault is AccessControl, IVault, ReentrancyGuard, VaultStorage, IVaultEvents {\\n    // solhint-disable not-rely-on-time\\n    // solhint-disable function-max-lines\\n    // solhint-disable code-complexity\\n    // solhint-disable var-name-mixedcase\\n    // solhint-disable max-line-length\\n    // solhint-disable ordering\\n\\n    // Factory address\\n    address public immutable FACTORY;\\n\\n    error ProfitUnlockTimeTooLong();\\n    error InsufficientFunds();\\n    error ZeroAddress();\\n    error MaxLoss();\\n    error ERC20InsufficientAllowance();\\n    error ERC20PermitExpired();\\n    error ERC20PermitInvalidSignature();\\n    error InsufficientShares();\\n    error InactiveStrategy();\\n    error StrategyIsShutdown();\\n    error ExceedDepositLimit();\\n    error ZeroValue();\\n    error StrategyDebtIsLessThanAssetsNeeded();\\n    error InsufficientAssets();\\n    error TooMuchLoss();\\n    error InvalidAssetDecimals();\\n    error UsingModule();\\n    error InvalidAsset();\\n    error StrategyAlreadyActive();\\n    error StrategyHasDebt();\\n    error DebtDidntChange();\\n    error StrategyHasUnrealisedLosses();\\n    error DebtHigherThanMaxDebt();\\n\\n    // Constructor\\n    constructor(\\n        uint256 _profitMaxUnlockTime,\\n        address _strategyManagerAddress,\\n        address _sharesManagerAddress,\\n        address _settersAddress,\\n        address _governanceAddress\\n    ) {\\n        FACTORY = msg.sender;\\n        // Must be less than one year for report cycles\\n        if (_profitMaxUnlockTime > ONE_YEAR) {\\n            revert ProfitUnlockTimeTooLong();\\n        }\\n\\n        profitMaxUnlockTime = _profitMaxUnlockTime;\\n        strategyManager = _strategyManagerAddress;\\n        sharesManager = _sharesManagerAddress;\\n        setters = _settersAddress;\\n        governance = _governanceAddress;\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _grantRole(DEPOSIT_LIMIT_MANAGER, msg.sender);\\n        _grantRole(ADD_STRATEGY_MANAGER, msg.sender);\\n        _grantRole(MAX_DEBT_MANAGER, msg.sender);\\n        _grantRole(DEBT_MANAGER, msg.sender);\\n        _grantRole(REPORTING_MANAGER, msg.sender);\\n\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                DOMAIN_TYPE_HASH,\\n                keccak256(bytes(ISharesManager(sharesManager).name())), // \\\"Yearn Vault\\\" in the example\\n                keccak256(bytes(API_VERSION)), // API_VERSION in the example\\n                block.chainid, // Current chain ID\\n                address(this) // Address of the contract\\n            )\\n        );\\n\\n    }\\n\\n    // SHARE MANAGEMENT\\n    // ERC20\\n    function _burnShares(uint256 shares, address owner) internal {\\n        ISharesManager(sharesManager).burnShares(shares, owner);\\n    }\\n\\n    // assets = shares * (total_assets / total_supply) --- (== price_per_share * shares)\\n    function _convertToAssets(uint256 shares, Rounding rounding) internal view returns (uint256) {\\n        return ISharesManager(sharesManager).convertToAssets(shares, rounding);\\n    }\\n\\n    // shares = amount * (total_supply / total_assets) --- (== amount / price_per_share)\\n    function _convertToShares(uint256 assets, Rounding rounding) internal view returns (uint256) {\\n        return ISharesManager(sharesManager).convertToShares(assets, rounding);\\n    }\\n\\n    // Used only to transfer tokens that are not the type managed by this Vault.\\n    // Used to handle non-compliant tokens like USDT\\n    function _erc20SafeTransferFrom(address token, address sender, address receiver, uint256 amount) internal {\\n        ISharesManager(sharesManager).erc20SafeTransferFrom(token, sender, receiver, amount);\\n    }\\n\\n    // Used only to send tokens that are not the type managed by this Vault.\\n    // Used to handle non-compliant tokens like USDT\\n    function _erc20SafeTransfer(address token, address receiver, uint256 amount) internal {\\n        ISharesManager(sharesManager).erc20SafeTransfer(token, receiver, amount);\\n    }\\n\\n    function _issueShares(uint256 shares, address recipient) internal {\\n        ISharesManager(sharesManager).issueShares(shares, recipient);\\n    }\\n\\n    // Issues shares that are worth 'amount' in the underlying token (asset).\\n    // WARNING: this takes into account that any new assets have been summed \\n    // to total_assets (otherwise pps will go down).\\n    function _issueSharesForAmount(uint256 amount, address recipient) internal returns (uint256) {\\n        return ISharesManager(sharesManager).issueSharesForAmount(amount, recipient);\\n    }\\n\\n    // SETTERS\\n    // @notice Set the new accountant address.\\n    // @param new_accountant The new accountant address.\\n    function setAccountant(address newAccountant) external override onlyRole(ACCOUNTANT_MANAGER) {\\n        ISetters(setters).setAccountant(newAccountant);\\n    }\\n\\n    // @notice Set the new default queue array.\\n    // @dev Will check each strategy to make sure it is active.\\n    // @param new_default_queue The new default queue array.\\n    function setDefaultQueue(address[] calldata newDefaultQueue) external override onlyRole(QUEUE_MANAGER) {\\n        ISetters(setters).setDefaultQueue(newDefaultQueue);\\n    }\\n\\n    // @notice Set a new value for `use_default_queue`.\\n    // @dev If set `True` the default queue will always be\\n    //  used no matter whats passed in.\\n    // @param use_default_queue new value.\\n    function setUseDefaultQueue(bool _useDefaultQueue) external override onlyRole(QUEUE_MANAGER) {\\n        ISetters(setters).setUseDefaultQueue(_useDefaultQueue);\\n    }\\n\\n    // @notice Set the new deposit limit.\\n    // @dev Can not be changed if a deposit_limit_module\\n    //  is set or if shutdown.\\n    // @param deposit_limit The new deposit limit.\\n    function setDepositLimit(uint256 _depositLimit) external override onlyRole(DEPOSIT_LIMIT_MANAGER) {\\n        ISharesManager(sharesManager).setDepositLimit(_depositLimit);\\n    }\\n\\n    // @notice Set a contract to handle the deposit limit.\\n    // @dev The default `deposit_limit` will need to be set to\\n    //  max uint256 since the module will override it.\\n    // @param deposit_limit_module Address of the module.\\n    function setDepositLimitModule(address _depositLimitModule) external override onlyRole(DEPOSIT_LIMIT_MANAGER) {\\n        ISetters(setters).setDepositLimitModule(_depositLimitModule);\\n    }\\n\\n    // @notice Set a contract to handle the withdraw limit.\\n    // @dev This will override the default `max_withdraw`.\\n    // @param withdraw_limit_module Address of the module.\\n    function setWithdrawLimitModule(address _withdrawLimitModule) external override onlyRole(WITHDRAW_LIMIT_MANAGER) {\\n        ISetters(setters).setWithdrawLimitModule(_withdrawLimitModule);\\n    }\\n\\n    // @notice Set the new minimum total idle.\\n    // @param minimum_total_idle The new minimum total idle.\\n    function setMinimumTotalIdle(uint256 _minimumTotalIdle) external override onlyRole(MINIMUM_IDLE_MANAGER) {\\n        ISetters(setters).setMinimumTotalIdle(_minimumTotalIdle);\\n    }\\n\\n    // @notice Set the new profit max unlock time.\\n    // @dev The time is denominated in seconds and must be less than 1 year.\\n    //  We only need to update locking period if setting to 0,\\n    //  since the current period will use the old rate and on the next\\n    //  report it will be reset with the new unlocking time.\\n    \\n    //  Setting to 0 will cause any currently locked profit to instantly\\n    //  unlock and an immediate increase in the vaults Price Per Share.\\n\\n    // @param new_profit_max_unlock_time The new profit max unlock time.\\n    function setProfitMaxUnlockTime(uint256 _newProfitMaxUnlockTime) external override onlyRole(PROFIT_UNLOCK_MANAGER) {\\n        ISetters(setters).setProfitMaxUnlockTime(_newProfitMaxUnlockTime);\\n    }\\n\\n    // VAULT STATUS VIEWS - GETTERS\\n\\n    // @notice Get the amount of shares that have been unlocked.\\n    // @return The amount of shares that are have been unlocked.\\n    function unlockedShares() external view override returns (uint256) {\\n        return ISharesManager(sharesManager).unlockedShares();\\n    }\\n\\n    // @notice Get the price per share (pps) of the vault.\\n    // @dev This value offers limited precision. Integrations that require \\n    //    exact precision should use convertToAssets or convertToShares instead.\\n    // @return The price per share.\\n    function pricePerShare() external view override returns (uint256) {\\n        return _convertToAssets(10**ISharesManager(sharesManager).decimals(), Rounding.ROUND_DOWN);\\n    }\\n\\n    // REPORTING MANAGEMENT\\n    \\n    // @notice Process the report of a strategy.\\n    // @param strategy The strategy to process the report for.\\n    // @return The gain and loss of the strategy.\\n    function processReport(address strategy) external override onlyRole(REPORTING_MANAGER) nonReentrant returns (uint256, uint256) {\\n        return IStrategyManager(strategyManager).processReport(strategy);\\n    }\\n\\n    // @notice Used for governance to buy bad debt from the vault.\\n    // @dev This should only ever be used in an emergency in place\\n    //  of force revoking a strategy in order to not report a loss.\\n    //  It allows the DEBT_PURCHASER role to buy the strategies debt\\n    //  for an equal amount of `asset`. \\n\\n    // @param strategy The strategy to buy the debt for\\n    // @param amount The amount of debt to buy from the vault.\\n    function buyDebt(address strategy, uint256 amount) external override onlyRole(DEBT_PURCHASER) nonReentrant {\\n        IGovernance(governance).buyDebt(strategy, amount);\\n    }\\n\\n    // STRATEGY MANAGEMENT\\n\\n    // @notice Add a new strategy.\\n    // @param new_strategy The new strategy to add.\\n    function addStrategy(address newStrategy) external override onlyRole(ADD_STRATEGY_MANAGER) {\\n        IStrategyManager(strategyManager).addStrategy(newStrategy);\\n    }\\n\\n    // @notice Revoke a strategy.\\n    // @param strategy The strategy to revoke.\\n    function revokeStrategy(address strategy) external override onlyRole(REVOKE_STRATEGY_MANAGER) {\\n        IStrategyManager(strategyManager).revokeStrategy(strategy, false);\\n    }\\n\\n    // @notice Force revoke a strategy.\\n    // @dev The vault will remove the strategy and write off any debt left \\n    //    in it as a loss. This function is a dangerous function as it can force a \\n    //    strategy to take a loss. All possible assets should be removed from the \\n    //    strategy first via update_debt. If a strategy is removed erroneously it \\n    //    can be re-added and the loss will be credited as profit. Fees will apply.\\n    // @param strategy The strategy to force revoke.\\n    function forceRevokeStrategy(address strategy) external override onlyRole(FORCE_REVOKE_MANAGER) {\\n        IStrategyManager(strategyManager).revokeStrategy(strategy, true);\\n    }\\n\\n    // DEBT MANAGEMENT\\n\\n    // @notice Update the max debt for a strategy.\\n    // @param strategy The strategy to update the max debt for.\\n    // @param new_max_debt The new max debt for the strategy.\\n    function updateMaxDebtForStrategy(address strategy, uint256 newMaxDebt) external override onlyRole(MAX_DEBT_MANAGER) {\\n        // Delegate call to StrategyManager\\n        IStrategyManager(strategyManager).updateMaxDebtForStrategy(strategy, newMaxDebt);\\n    }\\n\\n    // @notice Update the debt for a strategy.\\n    // @param strategy The strategy to update the debt for.\\n    // @param target_debt The target debt for the strategy.\\n    // @return The amount of debt added or removed.\\n    function updateDebt(address sender, address strategy, uint256 targetDebt) external override onlyRole(DEBT_MANAGER) nonReentrant returns (uint256) {\\n        return IStrategyManager(strategyManager).updateDebt(sender, strategy, targetDebt);\\n    }\\n\\n    // EMERGENCY MANAGEMENT\\n\\n    // @notice Shutdown the vault.\\n    function shutdownVault() external override onlyRole(EMERGENCY_MANAGER) {\\n        IGovernance(governance).shutdownVault();\\n    }\\n\\n    // ## SHARE MANAGEMENT ##\\n    // ## ERC20 + ERC4626 ##\\n\\n    // @notice Deposit assets into the vault.\\n    // @param assets The amount of assets to deposit.\\n    // @param receiver The address to receive the shares.\\n    // @return The amount of shares minted.\\n    function deposit(uint256 assets, address receiver) external override nonReentrant returns (uint256) {\\n        return ISharesManager(sharesManager).deposit(msg.sender, receiver, assets);\\n    }\\n\\n    // @notice Mint shares for the receiver.\\n    // @param shares The amount of shares to mint.\\n    // @param receiver The address to receive the shares.\\n    // @return The amount of assets deposited.\\n    function mint(uint256 shares, address receiver) external override nonReentrant returns (uint256) {\\n        return ISharesManager(sharesManager).mint(msg.sender, receiver, shares);\\n    }\\n\\n    // @notice Withdraw an amount of asset to `receiver` burning `owner`s shares.\\n    // @dev The default behavior is to not allow any loss.\\n    // @param assets The amount of asset to withdraw.\\n    // @param receiver The address to receive the assets.\\n    // @param owner The address who's shares are being burnt.\\n    // @param max_loss Optional amount of acceptable loss in Basis Points.\\n    // @param strategies Optional array of strategies to withdraw from.\\n    // @return The amount of shares actually burnt.\\n    function withdraw(\\n        uint256 assets,\\n        address receiver,\\n        address owner,\\n        uint256 maxLoss,\\n        address[] memory _strategies\\n    ) external override nonReentrant returns (uint256) {\\n        return ISharesManager(sharesManager).withdraw(assets, receiver, owner, maxLoss, _strategies);\\n    }\\n\\n    // @notice Redeems an amount of shares of `owners` shares sending funds to `receiver`.\\n    // @dev The default behavior is to allow losses to be realized.\\n    // @param shares The amount of shares to burn.\\n    // @param receiver The address to receive the assets.\\n    // @param owner The address who's shares are being burnt.\\n    // @param max_loss Optional amount of acceptable loss in Basis Points.\\n    // @param strategies Optional array of strategies to withdraw from.\\n    // @return The amount of assets actually withdrawn.\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address owner,\\n        uint256 maxLoss,\\n        address[] memory _strategies\\n    ) external override nonReentrant returns (uint256) {\\n        return ISharesManager(sharesManager).redeem(shares, receiver, owner, maxLoss, _strategies);\\n    }\\n\\n    // @notice Approve an address to spend the vault's shares.\\n    // @param spender The address to approve.\\n    // @param amount The amount of shares to approve.\\n    // @return True if the approval was successful.\\n    function approve(address spender, uint256 amount) external override returns (bool) {\\n        return ISharesManager(sharesManager).approve(msg.sender, spender, amount);\\n    }\\n\\n    // @notice Transfer shares to a receiver.\\n    // @param receiver The address to transfer shares to.\\n    // @param amount The amount of shares to transfer.\\n    // @return True if the transfer was successful.\\n    function transfer(address receiver, uint256 amount) external override returns (bool) {\\n        if (receiver == address(this) || receiver == address(0)) {\\n            revert ZeroAddress();\\n        }\\n        ISharesManager(sharesManager).transfer(msg.sender, receiver, amount);\\n        return true;\\n    }\\n\\n    // @notice Transfer shares from a sender to a receiver.\\n    // @param sender The address to transfer shares from.\\n    // @param receiver The address to transfer shares to.\\n    // @param amount The amount of shares to transfer.\\n    // @return True if the transfer was successful.\\n    function transferFrom(address sender, address receiver, uint256 amount) external override returns (bool) {\\n        if (receiver == address(this) || receiver == address(0)) {\\n            revert ZeroAddress();\\n        }\\n        return ISharesManager(sharesManager).transferFrom(sender, receiver, amount);\\n    }\\n\\n    // ## ERC20+4626 compatibility\\n\\n    // @notice Increase the allowance for a spender.\\n    // @param spender The address to increase the allowance for.\\n    // @param amount The amount to increase the allowance by.\\n    // @return True if the increase was successful.\\n    function increaseAllowance(address spender, uint256 amount) external override returns (bool) {\\n        return ISharesManager(sharesManager).increaseAllowance(msg.sender, spender, amount);\\n    }\\n\\n    // @notice Decrease the allowance for a spender.\\n    // @param spender The address to decrease the allowance for.\\n    // @param amount The amount to decrease the allowance by.\\n    // @return True if the decrease was successful.\\n    function decreaseAllowance(address spender, uint256 amount) external override returns (bool) {\\n        return ISharesManager(sharesManager).decreaseAllowance(msg.sender, spender, amount);\\n    }\\n\\n    // @notice Approve an address to spend the vault's shares.\\n    // @param owner The address to approve.\\n    // @param spender The address to approve.\\n    // @param amount The amount of shares to approve.\\n    // @param deadline The deadline for the permit.\\n    // @param v The v component of the signature.\\n    // @param r The r component of the signature.\\n    // @param s The s component of the signature.\\n    // @return True if the approval was successful.\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external override returns (bool) {\\n        return ISharesManager(sharesManager).permit(owner, spender, amount, deadline, v, r, s);\\n    }\\n\\n    // @notice Get the balance of a user.\\n    // @param addr The address to get the balance of.\\n    // @return The balance of the user.\\n    function balanceOf(address addr) external view override returns (uint256) {\\n        return ISharesManager(sharesManager).balanceOf(addr);\\n    }\\n\\n    // @notice Get the total supply of shares.\\n    // @return The total supply of shares.\\n    function totalSupply() external view override returns (uint256) {\\n        return ISharesManager(sharesManager).totalSupply();\\n    }\\n\\n    // @notice Get the address of the asset.\\n    // @return The address of the asset.\\n    function asset() external view override returns (address) {\\n        return ISharesManager(sharesManager).asset();\\n    }\\n\\n    // @notice Get the number of decimals of the asset/share.\\n    // @return The number of decimals of the asset/share.\\n    function decimals() external view override returns (uint8) {\\n        return ISharesManager(sharesManager).decimals();\\n    }\\n\\n    // @notice Get the total assets held by the vault.\\n    // @return The total assets held by the vault.\\n    function totalAssets() external view override returns (uint256) {\\n        return ISharesManager(sharesManager).totalAssets();\\n    }\\n\\n    // @notice Convert an amount of assets to shares.\\n    // @param assets The amount of assets to convert.\\n    // @return The amount of shares.\\n    function convertToShares(uint256 assets) external view override returns (uint256) {\\n        return _convertToShares(assets, Rounding.ROUND_DOWN);\\n    }\\n\\n    // @notice Preview the amount of shares that would be minted for a deposit.\\n    // @param assets The amount of assets to deposit.\\n    // @return The amount of shares that would be minted.\\n    function previewDeposit(uint256 assets) external view override returns (uint256) {\\n        return _convertToShares(assets, Rounding.ROUND_DOWN);\\n    }\\n\\n    // @notice Preview the amount of assets that would be deposited for a mint.\\n    // @param shares The amount of shares to mint.\\n    // @return The amount of assets that would be deposited.\\n    function previewMint(uint256 shares) external view override returns (uint256) {\\n        return _convertToAssets(shares, Rounding.ROUND_UP);\\n    }\\n\\n    // @notice Convert an amount of shares to assets.\\n    // @param shares The amount of shares to convert.\\n    // @return The amount of assets.\\n    function convertToAssets(uint256 shares) external view override returns (uint256) {\\n        return _convertToAssets(shares, Rounding.ROUND_DOWN);\\n    }\\n\\n    // @notice Get the maximum amount of assets that can be deposited.\\n    // @param receiver The address that will receive the shares.\\n    // @return The maximum amount of assets that can be deposited.\\n    function maxDeposit(address receiver) external view override returns (uint256) {\\n        return ISharesManager(sharesManager).maxDeposit(receiver);\\n    }\\n\\n    // @notice Get the maximum amount of shares that can be minted.\\n    // @param receiver The address that will receive the shares.\\n    // @return The maximum amount of shares that can be minted.\\n    function maxMint(address receiver) external view override returns (uint256) {\\n        return ISharesManager(sharesManager).maxMint(receiver);\\n    }\\n\\n    // @notice Get the maximum amount of assets that can be withdrawn.\\n    // @dev Complies to normal 4626 interface and takes custom params.\\n    // @param owner The address that owns the shares.\\n    // @param max_loss Custom max_loss if any.\\n    // @param strategies Custom strategies queue if any.\\n    // @return The maximum amount of assets that can be withdrawn.\\n    function maxWithdraw(address owner, uint256 maxLoss, address[] memory _strategies) external override returns (uint256) {\\n        return ISharesManager(sharesManager).maxWithdraw(owner, maxLoss, _strategies);\\n    }\\n\\n    // @notice Get the maximum amount of shares that can be redeemed.\\n    // @dev Complies to normal 4626 interface and takes custom params.\\n    // @param owner The address that owns the shares.\\n    // @param max_loss Custom max_loss if any.\\n    // @param strategies Custom strategies queue if any.\\n    // @return The maximum amount of shares that can be redeemed.\\n    function maxRedeem(address owner, uint256 maxLoss, address[] memory _strategies) external override returns (uint256) {\\n        return ISharesManager(sharesManager).maxRedeem(owner, maxLoss, _strategies);\\n    }\\n\\n    // @notice Preview the amount of shares that would be redeemed for a withdraw.\\n    // @param assets The amount of assets to withdraw.\\n    // @return The amount of shares that would be redeemed.\\n    function previewWithdraw(uint256 assets) external view override returns (uint256) {\\n        return _convertToShares(assets, Rounding.ROUND_UP);\\n    }\\n\\n    // @notice Preview the amount of assets that would be withdrawn for a redeem.\\n    // @param shares The amount of shares to redeem.\\n    // @return The amount of assets that would be withdrawn.\\n    function previewRedeem(uint256 shares) external view override returns (uint256) {\\n        return _convertToAssets(shares, Rounding.ROUND_DOWN);\\n    }\\n\\n    function allowance(address owner, address spender) external view override returns (uint256) {\\n        return ISharesManager(sharesManager).allowance(owner, spender);\\n    }\\n\\n    function getDebt(address strategy) external view override returns (uint256) {\\n        return IStrategyManager(strategyManager).getDebt(strategy);\\n    }\\n}\",\"keccak256\":\"0x2d0f94823c4622908036a00a3d439f0f10e1165a8f63318c201ed10d5273af76\",\"license\":\"GNU AGPLv3\"},\"contracts/Interfaces/IAccountant.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.16;\\n\\ninterface IAccountant {\\n    function report(address strategy, uint256 gain, uint256 loss) external returns (uint256, uint256);\\n}\",\"keccak256\":\"0x0f704ea311ec644bcb45f1de8c501af3d70cb09b5c01d9c861c14b3ef9be47f8\",\"license\":\"GPL-3.0\"},\"contracts/Interfaces/IDepositLimitModule.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.16;\\n\\ninterface IDepositLimitModule {\\n    function availableDepositLimit(address receiver) external view returns (uint256);\\n}\",\"keccak256\":\"0x84e894f08cbdee58c0df13247ca971da0ae1ca59b2d36d9bd5fb321f8328d3dd\",\"license\":\"GPL-3.0\"},\"contracts/Interfaces/IERC4626.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC4626.sol)\\n\\npragma solidity ^0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC4626 \\\"Tokenized Vault Standard\\\", as defined in\\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\\n *\\n * _Available since v4.7._\\n */\\ninterface IERC4626 is IERC20, IERC20Metadata {\\n    // solhint-disable ordering\\n    // solhint-disable max-line-length\\n    event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\\n\\n    event Withdraw(\\n        address indexed sender,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /**\\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\\n     *\\n     * - MUST be an ERC-20 token contract.\\n     * - MUST NOT revert.\\n     */\\n    function asset() external view returns (address assetTokenAddress);\\n\\n    /**\\n     * @dev Returns the total amount of the underlying asset that is \\u201cmanaged\\u201d by Vault.\\n     *\\n     * - SHOULD include any compounding that occurs from yield.\\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT revert.\\n     */\\n    function totalAssets() external view returns (uint256 totalManagedAssets);\\n\\n    /**\\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\\n     * through a deposit call.\\n     *\\n     * - MUST return a limited value if receiver is subject to some deposit limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\\n     * - MUST NOT revert.\\n     */\\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\\n     *   in the same transaction.\\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   deposit execution, and are accounted for during deposit.\\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\\n     * - MUST return a limited value if receiver is subject to some mint limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\\n     * - MUST NOT revert.\\n     */\\n    function maxMint(address receiver) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\\n     *   same transaction.\\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\\n     */\\n    function previewMint(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\\n     *   execution, and are accounted for during mint.\\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\\n     * Vault, through a withdraw call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxWithdraw(address owner, uint256 maxLoss, address[] memory strategies) external returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\\n     *   called\\n     *   in the same transaction.\\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   withdraw execution, and are accounted for during withdraw.\\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function withdraw(uint256 assets, address receiver, address owner, uint256 maxLoss, address[] memory strategies) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\\n     * through a redeem call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxRedeem(address owner, uint256 maxLoss, address[] memory strategies) external returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\\n     *   same transaction.\\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\\n     */\\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   redeem execution, and are accounted for during redeem.\\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function redeem(uint256 shares, address receiver, address owner, uint256 maxLoss, address[] memory strategies) external returns (uint256 assets);\\n}\",\"keccak256\":\"0xe2e626a58bddb0c8b459117fcf8f2b746431da070ea8d80d3d56bca5f1c8fa1d\",\"license\":\"MIT\"},\"contracts/Interfaces/IFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.16;\\n\\ninterface IFactory {\\n    function protocolFeeConfig() external view returns (uint16, address);\\n}\",\"keccak256\":\"0x40d6ccadd2d8acc52c61503f36d78c893d0841b427a390b52382b03368ddd9db\",\"license\":\"GPL-3.0\"},\"contracts/Interfaces/IGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.16;\\n\\ninterface IGovernance {\\n    function buyDebt(address strategy, uint256 amount) external;\\n    function shutdownVault() external;\\n}\",\"keccak256\":\"0x9ac27d4cb5c0b07b40c933907d53c74b7205026e514e7676a026e9e614692a36\",\"license\":\"GPL-3.0\"},\"contracts/Interfaces/ISetters.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.16;\\n\\ninterface ISetters {\\n    function setAccountant(address newAccountant) external;\\n    function setDefaultQueue(address[] calldata newDefaultQueue) external;\\n    function setUseDefaultQueue(bool _useDefaultQueue) external;\\n    function setDepositLimit(uint256 _depositLimit) external;\\n    function setDepositLimitModule(address _depositLimitModule) external;\\n    function setWithdrawLimitModule(address _withdrawLimitModule) external;\\n    function setMinimumTotalIdle(uint256 _minimumTotalIdle) external;\\n    function setProfitMaxUnlockTime(uint256 _newProfitMaxUnlockTime) external;\\n}\",\"keccak256\":\"0x26b5657a6505c7ecaf36e1b5d67e7757689efffbfc18a3ae1df29289dc735c05\",\"license\":\"GPL-3.0\"},\"contracts/Interfaces/ISharesManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.16;\\n\\nimport \\\"../VaultStructs.sol\\\";\\nimport {IERC4626} from \\\"./IERC4626.sol\\\";\\n\\ninterface ISharesManager is IERC4626 {\\n    // solhint-disable max-line-length\\n    // solhint-disable ordering\\n\\n    function initialize(address _strategyManager, address _setters) external;\\n    function balanceOf(address addr) external view returns (uint256);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function spendAllowance(address owner, address spender, uint256 amount) external;\\n    function transfer(address sender, address receiver, uint256 amount) external;\\n    function transferFrom(address sender, address receiver, uint256 amount) external returns (bool);\\n    function approve(address owner, address spender, uint256 amount) external returns (bool);\\n    function increaseAllowance(address owner, address spender, uint256 amount) external returns (bool);\\n    function decreaseAllowance(address owner, address spender, uint256 amount) external returns (bool);\\n    function permit(address owner, address spender, uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external returns (bool);\\n    function burnShares(uint256 shares, address owner) external;\\n    function unlockedShares() external view returns (uint256);\\n    function totalSupply() external view returns (uint256);\\n    function burnUnlockedShares() external;\\n    function totalAssets() external view returns (uint256);\\n    function convertToAssets(uint256 shares, Rounding rounding) external view returns (uint256);\\n    function convertToShares(uint256 assets, Rounding rounding) external view returns (uint256);\\n    function erc20SafeApprove(address token, address spender, uint256 amount) external;\\n    function erc20SafeTransferFrom(address token, address sender, address receiver, uint256 amount) external;\\n    function erc20SafeTransfer(address token, address receiver, uint256 amount) external;\\n    function issueShares(uint256 shares, address recipient) external;\\n    function issueSharesForAmount(uint256 amount, address recipient) external returns (uint256);\\n    function maxDeposit(address receiver) external view returns (uint256);\\n    function maxWithdraw(address owner, uint256 _maxLoss, address[] memory _strategies) external returns (uint256);\\n    function deposit(address sender, address recipient, uint256 assets) external returns (uint256);\\n    function mint(address sender, address recipient, uint256 shares) external returns (uint256);\\n    function assessShareOfUnrealisedLosses(address strategy, uint256 assetsNeeded) external view returns (uint256);\\n    function withdrawFromStrategy(address strategy, uint256 assetsToWithdraw) external;\\n    function calculateShareManagement(uint256 loss, uint256 totalFees, uint256 protocolFees) external returns (ShareManagement memory shareManagement);\\n    function handleShareBurnsAndIssues(ShareManagement memory shares, FeeAssessment memory fees, uint256 gain, uint256 loss, address strategy) external returns (uint256 , uint256);\\n    function manageUnlockingOfShares(uint256 previouslyLockedShares, uint256 newlyLockedShares) external;\\n    function setDepositLimit(uint256 _depositLimit) external;\\n    function getTotalIdleAmount() external returns (uint256);\\n    function setTotalIdleAmount(uint256 totalIdleAmount) external;\\n    function getMinimumTotalIdle() external returns (uint256);\\n    function setMinimumTotalIdle(uint256 minimumTotalIdle) external;\\n    function setTotalDebtAmount(uint256 totalDebtAmount) external;\\n    function depositToStrategy(address strategy, uint256 assetsToDeposit) external;\\n}\",\"keccak256\":\"0x98bc1cfa3e8dbf6255aa4ba3ad055ab8472e7192fec09a12fec1956267b814ff\",\"license\":\"GPL-3.0\"},\"contracts/Interfaces/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.16;\\n\\ninterface IStrategy {\\n    function redeem(uint256 shares, address receiver, address owner) external returns (uint256);\\n    function deposit(uint256 assets, address receiver) external returns (uint256);\\n    function asset() external view returns (address);\\n    function balanceOf(address owner) external view returns (uint256);\\n    function maxDeposit(address receiver) external view returns (uint256);\\n    function totalAssets() external view returns (uint256);\\n    function convertToAssets(uint256 shares) external view returns (uint256);\\n    function convertToShares(uint256 assets) external view returns (uint256);\\n    function previewWithdraw(uint256 assets) external view returns (uint256);\\n    function maxRedeem(address owner) external view returns (uint256);\\n}\",\"keccak256\":\"0x4a4ac422957ef074941cce14aa4a41619eec52ffffcf5cc2d5fbbd07b8875554\",\"license\":\"GPL-3.0\"},\"contracts/Interfaces/IStrategyManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.16;\\n\\ninterface IStrategyManager {\\n    // solhint-disable ordering\\n    function addStrategy(address newStrategy) external;\\n    function revokeStrategy(address strategy, bool force) external;\\n    function updateMaxDebtForStrategy(address strategy, uint256 newMaxDebt) external;\\n    function updateDebt(address sender, address strategy, uint256 targetDebt) external returns (uint256);\\n    function processReport(address strategy) external returns (uint256, uint256);\\n    function getDefaultQueueLength() external view returns(uint256 length);\\n    function getDefaultQueue() external view returns(address[] memory);\\n    function getDebt(address strategy) external view returns (uint256);\\n    function setDebt(address strategy, uint256 _newDebt) external;\\n}\",\"keccak256\":\"0xd7e54a7e412c9f1bd52acf4e0961267bc7c771fa1f2e66d582e2603551951a15\",\"license\":\"GPL-3.0\"},\"contracts/Interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.16;\\n\\nimport \\\"../VaultStructs.sol\\\";\\n\\ninterface IVault {\\n    // solhint-disable ordering\\n    \\n    function setAccountant(address newAccountant) external;\\n\\n    function setDefaultQueue(address[] memory newDefaultQueue) external;\\n\\n    function setUseDefaultQueue(bool) external;\\n\\n    function setDepositLimit(uint256 depositLimit) external;\\n\\n    function setDepositLimitModule(\\n        address newDepositLimitModule\\n    ) external;\\n\\n    function setWithdrawLimitModule(\\n        address newWithdrawLimitModule\\n    ) external;\\n\\n    function setMinimumTotalIdle(uint256 minimumTotalIdle) external;\\n\\n    function setProfitMaxUnlockTime(\\n        uint256 newProfitMaxUnlockTime\\n    ) external;\\n\\n    function processReport(\\n        address strategy\\n    ) external returns (uint256, uint256);\\n\\n    function buyDebt(address strategy, uint256 amount) external;\\n\\n    function addStrategy(address newStrategy) external;\\n\\n    function revokeStrategy(address strategy) external;\\n\\n    function forceRevokeStrategy(address strategy) external;\\n\\n    function updateMaxDebtForStrategy(\\n        address strategy,\\n        uint256 newMaxDebt\\n    ) external;\\n\\n    function updateDebt(\\n        address sender,\\n        address strategy,\\n        uint256 targetDebt\\n    ) external returns (uint256);\\n\\n    function shutdownVault() external;\\n\\n    //// NON-STANDARD ERC-4626 FUNCTIONS \\\\\\\\\\\\\\\\\\n\\n    function withdraw(\\n        uint256 assets,\\n        address receiver,\\n        address owner,\\n        uint256 maxLoss,\\n        address[] memory strategies\\n    ) external returns (uint256);\\n\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address owner,\\n        uint256 maxLoss,\\n        address[] memory strategies\\n    ) external returns (uint256);\\n\\n    //// NON-STANDARD ERC-20 FUNCTIONS \\\\\\\\\\\\\\\\\\n\\n    function increaseAllowance(\\n        address spender,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function decreaseAllowance(\\n        address spender,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (bool);\\n\\n    function maxWithdraw(\\n        address owner,\\n        uint256 maxLoss,\\n        address[] memory strategies\\n    ) external returns (uint256);\\n\\n    function maxRedeem(\\n        address owner,\\n        uint256 maxLoss,\\n        address[] memory strategies\\n    ) external returns (uint256);\\n\\n    function unlockedShares() external view returns (uint256);\\n\\n    function pricePerShare() external view returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function deposit(uint256 assets, address receiver) external returns (uint256);\\n\\n    function mint(uint256 shares, address receiver) external returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transfer(address receiver, uint256 amount) external returns (bool);\\n\\n    function transferFrom(address sender, address receiver, uint256 amount) external returns (bool);\\n\\n    function balanceOf(address addr) external view returns (uint256);\\n\\n    function asset() external view returns (address);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function totalAssets() external view returns (uint256);\\n\\n    function convertToShares(uint256 assets) external view returns (uint256);\\n\\n    function previewDeposit(uint256 assets) external view returns (uint256);\\n\\n    function previewMint(uint256 shares) external view returns (uint256);\\n\\n    function convertToAssets(uint256 shares) external view returns (uint256);\\n\\n    function maxDeposit(address receiver) external view returns (uint256);\\n\\n    function maxMint(address receiver) external view returns (uint256);\\n\\n    function previewWithdraw(uint256 assets) external view returns (uint256);\\n\\n    function previewRedeem(uint256 shares) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function getDebt(address strategy) external view returns (uint256);\\n}\",\"keccak256\":\"0x09bfa9689220a3ae2377de69ceaf7f8ea6586224cf758be9b45253f87f751b73\",\"license\":\"GPL-3.0\"},\"contracts/Interfaces/IVaultEvents.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL 3.0\\n// Copyright Fathom 2023\\n\\npragma solidity ^0.8.16;\\n\\nimport \\\"../VaultStructs.sol\\\";\\n\\ninterface IVaultEvents {\\n    // STRATEGY EVENTS\\n    event StrategyChanged(address indexed strategy, StrategyChangeType changeType);\\n    event StrategyReported(\\n        address indexed strategy,\\n        uint256 gain,\\n        uint256 loss,\\n        uint256 currentDebt,\\n        uint256 protocolFees,\\n        uint256 totalFees,\\n        uint256 totalRefunds\\n    );\\n    // DEBT MANAGEMENT EVENTS\\n    event DebtUpdated(\\n        address indexed strategy,\\n        uint256 currentDebt,\\n        uint256 newDebt\\n    );\\n    // ROLE UPDATES\\n    event RoleSet(address indexed account, bytes32 role);\\n    event RoleStatusChanged(bytes32 indexed role, RoleStatusChange indexed status);\\n    event UpdateRoleManager(address indexed roleManager);\\n\\n    event UpdateAccountant(address indexed accountant);\\n    event UpdateDefaultQueue(address[] newDefaultQueue);\\n    event UpdateUseDefaultQueue(bool useDefaultQueue);\\n    event UpdatedMaxDebtForStrategy(\\n        address indexed sender,\\n        address indexed strategy,\\n        uint256 newDebt\\n    );\\n    event UpdateDepositLimit(uint256 depositLimit);\\n    event UpdateMinimumTotalIdle(uint256 minimumTotalIdle);\\n    event UpdateProfitMaxUnlockTime(uint256 profitMaxUnlockTime);\\n    event DebtPurchased(address indexed strategy, uint256 amount);\\n    event Shutdown();\\n\\n    // STORAGE MANAGEMENT EVENTS\\n    event UpdateDepositLimitModule(address indexed depositLimitModule);\\n    event UpdateWithdrawLimitModule(address indexed withdrawLimitModule);\\n}\",\"keccak256\":\"0x809fab69d54383c6137fea5d99022f5c3773701f9c7ae46235ab354aaf5d0702\",\"license\":\"AGPL 3.0\"},\"contracts/Interfaces/IWithdrawLimitModule.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.16;\\n\\ninterface IWithdrawLimitModule {\\n    function availableWithdrawLimit(address owner, uint256 maxLoss, address[] calldata strategies) external returns (uint256);\\n}\",\"keccak256\":\"0xffae5d1b3b7b503e76d5b86e65d2a231274190efdf4dce364255bf20f208ebca\",\"license\":\"GPL-3.0\"},\"contracts/VaultStorage.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL 3.0\\n// Copyright Fathom 2023\\n\\npragma solidity ^0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./VaultStructs.sol\\\";\\n\\ncontract VaultStorage {\\n    // CONSTANTS\\n    // The max length the withdrawal queue can be.\\n    uint256 public constant MAX_QUEUE = 10;\\n    // 100% in Basis Points.\\n    uint256 public constant MAX_BPS = 10000;\\n    // Extended for profit locking calculations.\\n    uint256 public constant MAX_BPS_EXTENDED = 1000000000000;\\n    // The version of this vault.\\n    string public constant API_VERSION = \\\"1.0.0\\\";\\n    uint256 public immutable ONE_YEAR = 31556952;\\n\\n    address public strategyManager;\\n    address public sharesManager;\\n    address public setters;\\n    address public governance;\\n\\n    // STORAGE\\n    // HashMap that records all the strategies that are allowed to receive assets from the vault.\\n    mapping(address => StrategyParams) public strategies;\\n\\n    // The current default withdrawal queue.\\n    address[] public defaultQueue;\\n\\n    // Should the vault use the default_queue regardless whats passed in.\\n    bool public useDefaultQueue;\\n    bool initialized;\\n\\n    // ERC20 - amount of shares per account\\n    mapping(address => uint256) internal _balanceOf;\\n    // ERC20 - owner -> (spender -> amount)\\n    mapping(address => mapping(address => uint256)) internal _allowance;\\n\\n    // Total amount of shares that are currently minted including those locked.\\n    // NOTE: To get the ERC20 compliant version use totalSupply().\\n    uint256 public totalSupplyAmount;\\n\\n    // Total amount of assets that has been deposited in strategies.\\n    uint256 public totalDebtAmount;\\n    // Current assets held in the vault contract. Replacing balanceOf(this) to avoid price_per_share manipulation.\\n    uint256 public totalIdleAmount;\\n    // Minimum amount of assets that should be kept in the vault contract to allow for fast, cheap redeems.\\n    uint256 public minimumTotalIdle;\\n    // Maximum amount of tokens that the vault can accept. If totalAssets > deposit_limit, deposits will revert.\\n    uint256 public depositLimit;\\n    // Contract that charges fees and can give refunds.\\n    address public accountant;\\n    // Contract to control the deposit limit.\\n    address public depositLimitModule;\\n    // Contract to control the withdraw limit.\\n    address public withdrawLimitModule;\\n\\n    // HashMap mapping addresses to their roles\\n    mapping(address => bytes32) public roles;\\n    // HashMap mapping roles to their permissioned state. If false, the role is not open to the public.\\n    mapping(bytes32 => bool) public openRoles;\\n\\n    // Address that can add and remove roles to addresses.\\n    address public roleManager;\\n    // Temporary variable to store the address of the next role_manager until the role is accepted.\\n    address public futureRoleManager;\\n\\n    // State of the vault - if set to true, only withdrawals will be available. It can't be reverted.\\n    bool public shutdown;\\n    // The amount of time profits will unlock over.\\n    uint256 public profitMaxUnlockTime;\\n    // The timestamp of when the current unlocking period ends.\\n    uint256 public fullProfitUnlockDate;\\n    // The per second rate at which profit will unlock.\\n    uint256 public profitUnlockingRate;\\n    // Last timestamp of the most recent profitable report.\\n    uint256 public lastProfitUpdate;\\n\\n    // EIP-2612 permit() nonces and typehashes\\n    mapping(address => uint256) public nonces;\\n    bytes32 public constant DOMAIN_TYPE_HASH = keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n    bytes32 public DOMAIN_SEPARATOR;\\n    bytes32 public constant PERMIT_TYPE_HASH = keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    // Roles\\n    bytes32 public constant ACCOUNTANT_MANAGER = keccak256(\\\"ACCOUNTANT_MANAGER\\\");\\n    bytes32 public constant QUEUE_MANAGER = keccak256(\\\"QUEUE_MANAGER\\\");\\n    bytes32 public constant DEPOSIT_LIMIT_MANAGER = keccak256(\\\"DEPOSIT_LIMIT_MANAGER\\\");\\n    bytes32 public constant WITHDRAW_LIMIT_MANAGER = keccak256(\\\"WITHDRAW_LIMIT_MANAGER\\\");\\n    bytes32 public constant MINIMUM_IDLE_MANAGER = keccak256(\\\"MINIMUM_IDLE_MANAGER\\\");\\n    bytes32 public constant PROFIT_UNLOCK_MANAGER = keccak256(\\\"PROFIT_UNLOCK_MANAGER\\\");\\n    bytes32 public constant ROLE_MANAGER = keccak256(\\\"ROLE_MANAGER\\\");\\n    bytes32 public constant REPORTING_MANAGER = keccak256(\\\"REPORTING_MANAGER\\\");\\n    bytes32 public constant DEBT_PURCHASER = keccak256(\\\"DEBT_PURCHASER\\\");\\n    bytes32 public constant ADD_STRATEGY_MANAGER = keccak256(\\\"ADD_STRATEGY_MANAGER\\\");\\n    bytes32 public constant REVOKE_STRATEGY_MANAGER = keccak256(\\\"REVOKE_STRATEGY_MANAGER\\\");\\n    bytes32 public constant FORCE_REVOKE_MANAGER = keccak256(\\\"FORCE_REVOKE_MANAGER\\\");\\n    bytes32 public constant MAX_DEBT_MANAGER = keccak256(\\\"MAX_DEBT_MANAGER\\\");\\n    bytes32 public constant DEBT_MANAGER = keccak256(\\\"DEBT_MANAGER\\\");\\n    bytes32 public constant EMERGENCY_MANAGER = keccak256(\\\"EMERGENCY_MANAGER\\\");         \\n}\",\"keccak256\":\"0xe15f9ade9202fbead42c8a2eb96fb8f5fd48a70e4beaca724ad163cc5824a8a9\",\"license\":\"AGPL 3.0\"},\"contracts/VaultStructs.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL 3.0\\n// Copyright Fathom 2023\\n\\npragma solidity ^0.8.16;\\n\\nstruct StrategyParams {\\n    uint256 activation;\\n    uint256 lastReport;\\n    uint256 currentDebt;\\n    uint256 maxDebt;\\n}\\n\\nstruct FeeAssessment {\\n    uint256 totalFees;\\n    uint256 totalRefunds;\\n    uint256 protocolFees;\\n    address protocolFeeRecipient;\\n}\\n\\nstruct ShareManagement {\\n    uint256 sharesToBurn;\\n    uint256 accountantFeesShares;\\n    uint256 protocolFeesShares;\\n}\\n\\nstruct WithdrawalState {\\n    uint256 requestedAssets;\\n    uint256 currTotalIdle;\\n    uint256 currTotalDebt;\\n    uint256 assetsNeeded;\\n    uint256 previousBalance;\\n    uint256 unrealisedLossesShare;\\n}\\n\\n// ENUMS\\nenum StrategyChangeType {\\n    ADDED, // Corresponds to the strategy being added.\\n    REVOKED // Corresponds to the strategy being revoked.\\n}\\n\\nenum RoleStatusChange {\\n    OPENED, // Corresponds to a role being opened.\\n    CLOSED // Corresponds to a role being closed.\\n}\\n\\nenum Rounding {\\n    ROUND_DOWN, // Corresponds to rounding down to the nearest whole number.\\n    ROUND_UP // Corresponds to rounding up to the nearest whole number.\\n}\",\"keccak256\":\"0x98a7128599e8f99c1be3515d79e4aff06cd0d604b6b10d13f87ffe1210330cc4\",\"license\":\"AGPL 3.0\"}},\"version\":1}",
  "bytecode": "0x60c06040526301e185586080523480156200001957600080fd5b50604051620034cd380380620034cd8339810160408190526200003c91620003ad565b600180553360a052608051851115620000685760405163fdfbb0b760e01b815260040160405180910390fd5b6017859055600280546001600160a01b038087166001600160a01b03199283161790925560038054868416908316179055600480548584169083161790556005805492841692909116919091179055620000c4600033620002b1565b620000f07f2f0dbbe8c2c0170206c50ec0cafa1c0dbd03e73e67c2a960178df30a0a30ee2e33620002b1565b6200011c7f2a0e761830cc61f2707ea7bb138008bf9dda7f7d34c77736d0a116604e95ea1633620002b1565b620001487f7cbb3cdf689b8ea3e9d265f66bc4e0a99069268217017d38d2a5a559abc6271933620002b1565b620001747f152ebba56b9738ee3d8baea1b76fa31dcdcd79b1929bfea7d58ee12cfdf1a65333620002b1565b620001a07f633076a97f32ae349b28772e7b1483f67a926f150cbc501d02bdbd77389325ab33620002b1565b600354604080516306fdde0360e01b815290517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f926001600160a01b0316916306fdde039160048083019260009291908290030181865afa1580156200020a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000234919081019062000561565b805160209182012060408051808201825260058152640312e302e360dc1b90840152516200028a93927f06c015bd22b4c69690933c1058878ebdfef31f9aaae40bbe86d8a09fe1b2972c914691309101620005b4565b60405160208183030381529060405280519060200120601c8190555050505050506200060a565b620002bd82826200033a565b62000336576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620002f53390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45b5050565b6000828152602081815260408083206001600160a01b038516845290915290205460ff165b92915050565b805b81146200037357600080fd5b50565b80516200035f8162000365565b60006001600160a01b0382166200035f565b620003678162000383565b80516200035f8162000395565b600080600080600060a08688031215620003ca57620003ca600080fd5b6000620003d8888862000376565b9550506020620003eb88828901620003a0565b9450506040620003fe88828901620003a0565b93505060606200041188828901620003a0565b92505060806200042488828901620003a0565b9150509295509295909350565b634e487b7160e01b600052604160045260246000fd5b601f19601f83011681018181106001600160401b03821117156200046f576200046f62000431565b6040525050565b60006200048260405190565b905062000490828262000447565b919050565b60006001600160401b03821115620004b157620004b162000431565b601f19601f83011660200192915050565b60005b83811015620004df578181015183820152602001620004c5565b50506000910152565b6000620004ff620004f98462000495565b62000476565b9050828152602081018484840111156200051c576200051c600080fd5b62000529848285620004c2565b509392505050565b600082601f830112620005475762000547600080fd5b815162000559848260208601620004e8565b949350505050565b600060208284031215620005785762000578600080fd5b81516001600160401b03811115620005935762000593600080fd5b620005598482850162000531565b805b82525050565b620005a38162000383565b60a08101620005c48288620005a1565b620005d36020830187620005a1565b620005e26040830186620005a1565b620005f16060830185620005a1565b620006006080830184620005a9565b9695505050505050565b60805160a051612e9d62000630600039600061060f0152600061058b0152612e9d6000f3fe608060405234801561001057600080fd5b50600436106104865760003560e01c806377e3b2671161026057806377e3b2671461087d5780637ecebe00146108ae5780638212fd43146108ce5780638afca8f0146108e157806391986003146108ea57806391d14854146108fd57806394bf804d14610910578063993746421461092357806399530b06146109435780639a78e72e1461094b5780639bbca8841461095e5780639e34e348146109715780639f3988f314610984578063a217fddf14610999578063a457c2d7146109a1578063a835cd81146109b4578063a9059cbb146109c7578063a98222c4146109da578063ab5b4d49146109ef578063acded97d14610a04578063b3c187f214610a17578063b3d7f6b914610a2a578063b6cc2d1f14610a3d578063bb994d4814610a5e578063bbe4eb4914610a71578063bdc8144b14610a7e578063bee7e3d914610a91578063c065ca0714610aa4578063c0993eea14610ab9578063c63d75b614610ae0578063c6e6f59214610af3578063c8d74b6014610b06578063c8dffa9514610b1b578063d4ae064f14610b24578063d505accf14610b39578063d547741f14610b4c578063d81a09f614610b5f578063d9a0e97a14610b72578063dd62ed3e14610b7a578063df69b22a14610b8d578063e5236cc914610ba0578063ecf7085814610ba8578063ef8b30f714610af3578063f1daeba814610bb1578063f5b944eb14610bc6578063f6d7bfa014610bed578063f828f50b14610c00578063fc0e74d114610c09578063fd967f4714610c1d578063fec61f0614610c26578063ff1e7f0814610c3b57600080fd5b8062435da51461048b57806301e1d114146104b457806301ffc9a7146104c957806303dcd12c146104e957806306580f2d146104fe57806307a2d13a146105115780630835a3fc146105245780630952864e1461052d578063095ea7b3146105365780630a28a477146105495780630ad283d01461055c57806316b87ac01461057157806316d3bfbb1461058657806318160ddd146105ad578063223e5479146105b557806323b872dd146105c8578063248a9ca3146105db5780632d632692146105ee5780632d772168146105f75780632dd310001461060a5780632f2ff15d14610631578063313ce5671461064457806334b5fab6146106595780633644e5151461066c57806336568abe1461067557806336fba0841461068857806338d52e0f14610694578063395093511461069c57806339b70e38146106af57806339ebf823146106c25780633cd7b5ab146107075780633f7b5e4014610710578063402d267d14610718578063405977e71461072b57806348ea71271461073e5780634bbd71e9146107515780634cdad506146105115780634ce1d38a146107645780634cfe51dc146107795780634d4bb1971461078e5780634fb3ccc5146107b55780635141eebb146107c857806353a66132146107d15780635aa6e675146107f45780635bf6b4fb14610807578063633f228c1461081c578063652da3241461082f57806365cb6765146108445780636e553f651461085757806370a082311461086a575b600080fd5b60155461049e906001600160a01b031681565b6040516104ab9190612066565b60405180910390f35b6104bc610c4e565b6040516104ab919061207a565b6104dc6104d73660046120aa565b610cc0565b6040516104ab91906120d3565b6104bc600080516020612ce883398151915281565b6104bc61050c366004612216565b610cf7565b6104bc61051f3660046122a8565b610d90565b6104bc600e5481565b6104bc60175481565b6104dc6105443660046122c9565b610d9d565b6104bc6105573660046122a8565b610e1c565b6104bc600080516020612d0883398151915281565b61058461057f366004612306565b610e29565b005b6104bc7f000000000000000000000000000000000000000000000000000000000000000081565b6104bc610eaa565b6105846105c3366004612306565b610ef4565b6104dc6105d6366004612327565b610f3c565b6104bc6105e93660046122a8565b610ff9565b6104bc60185481565b610584610605366004612306565b61100e565b61049e7f000000000000000000000000000000000000000000000000000000000000000081565b61058461063f366004612377565b611055565b61064c611076565b6040516104ab91906123b3565b6104bc6106673660046123c1565b6110e4565b6104bc601c5481565b610584610683366004612377565b61115c565b6104bc64e8d4a5100081565b61049e61119b565b6104dc6106aa3660046122c9565b611209565b60025461049e906001600160a01b031681565b6106f76106d0366004612306565b60066020526000908152604090208054600182015460028301546003909301549192909184565b6040516104ab9493929190612421565b6104bc600d5481565b6104bc600a81565b6104bc610726366004612306565b61123e565b6105846107393660046122c9565b6112b0565b61058461074c366004612306565b61133d565b61058461075f366004612306565b611384565b6104bc600080516020612e4883398151915281565b6104bc600080516020612d6883398151915281565b6104bc7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b60105461049e906001600160a01b031681565b6104bc60195481565b6104dc6107df3660046122a8565b60146020526000908152604090205460ff1681565b60055461049e906001600160a01b031681565b6104bc600080516020612d4883398151915281565b61058461082a3660046124a7565b6113cb565b6104bc600080516020612cc883398151915281565b6104bc6108523660046123c1565b61144b565b6104bc610865366004612377565b611480565b6104bc610878366004612306565b61150c565b6108a1604051806040016040528060058152602001640312e302e360dc1b81525081565b6040516104ab9190612546565b6104bc6108bc366004612306565b601b6020526000908152604090205481565b6105846108dc3660046122a8565b61153d565b6104bc601a5481565b60125461049e906001600160a01b031681565b6104dc61090b366004612377565b611584565b6104bc61091e366004612377565b6115ad565b6104bc610931366004612306565b60136020526000908152604090205481565b6104bc6115eb565b6104bc610959366004612306565b611679565b61058461096c36600461256a565b6116aa565b60115461049e906001600160a01b031681565b6104bc600080516020612dc883398151915281565b6104bc600081565b6104dc6109af3660046122c9565b6116f1565b6104bc6109c2366004612327565b611726565b6104dc6109d53660046122c9565b6117d2565b6104bc600080516020612e2883398151915281565b6104bc600080516020612de883398151915281565b60035461049e906001600160a01b031681565b60165461049e906001600160a01b031681565b6104bc610a383660046122a8565b61187f565b610a50610a4b366004612306565b61188c565b6040516104ab92919061258b565b610584610a6c366004612306565b611934565b6008546104dc9060ff1681565b610584610a8c3660046122a8565b61197f565b60045461049e906001600160a01b031681565b6104bc600080516020612d8883398151915281565b6104bc7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81565b6104bc610aee366004612306565b6119c7565b6104bc610b013660046122a8565b6119f8565b6104bc600080516020612ca883398151915281565b6104bc600c5481565b6104bc600080516020612e0883398151915281565b6104dc610b473660046125ba565b611a05565b610584610b5a366004612377565b611a91565b6104bc610b6d366004612216565b611aad565b6104bc611aef565b6104bc610b88366004612659565b611b39565b610584610b9b3660046122a8565b611bad565b610584611bf4565b6104bc600f5481565b6104bc600080516020612da883398151915281565b6104bc7ff206625bad3d9112d5609b8d356e6fbd514cd1f69980d4ce2b3e6e68e1789ace81565b610584610bfb3660046122c9565b611c77565b6104bc600b5481565b6016546104dc90600160a01b900460ff1681565b6104bc61271081565b6104bc600080516020612d2883398151915281565b61049e610c493660046122a8565b611cc1565b600354604080516278744560e21b815290516000926001600160a01b0316916301e1d1149160048083019260209291908290030181865afa158015610c97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cbb9190612686565b905090565b60006001600160e01b03198216637965db0b60e01b1480610cf157506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000610d01611ceb565b6003546040516306580f2d60e01b81526001600160a01b03909116906306580f2d90610d399089908990899089908990600401612704565b6020604051808303816000875af1158015610d58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7c9190612686565b9050610d8760018055565b95945050505050565b6000610cf1826000611d14565b60035460405163e1f21c6760e01b81526000916001600160a01b03169063e1f21c6790610dd290339087908790600401612756565b6020604051808303816000875af1158015610df1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e159190612789565b9392505050565b6000610cf1826001611d47565b600080516020612d48833981519152610e4181611d7a565b600254604051637a163bd760e11b81526001600160a01b039091169063f42c77ae90610e749085906001906004016127aa565b600060405180830381600087803b158015610e8e57600080fd5b505af1158015610ea2573d6000803e3d6000fd5b505050505050565b600354604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd9160048083019260209291908290030181865afa158015610c97573d6000803e3d6000fd5b600080516020612d88833981519152610f0c81611d7a565b60025460405163223e547960e01b81526001600160a01b039091169063223e547990610e74908590600401612066565b60006001600160a01b038316301480610f5c57506001600160a01b038316155b15610f7a5760405163d92e233d60e01b815260040160405180910390fd5b6003546040516323b872dd60e01b81526001600160a01b03909116906323b872dd90610fae90879087908790600401612756565b6020604051808303816000875af1158015610fcd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ff19190612789565b949350505050565b60009081526020819052604090206001015490565b600080516020612e2883398151915261102681611d7a565b600480546040516305aee42d60e31b81526001600160a01b0390911691632d77216891610e7491869101612066565b61105e82610ff9565b61106781611d7a565b6110718383611d87565b505050565b6003546040805163313ce56760e01b815290516000926001600160a01b03169163313ce5679160048083019260209291908290030181865afa1580156110c0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cbb91906127d0565b600354604051631a5afd5b60e11b81526000916001600160a01b0316906334b5fab690611119908790879087906004016127f1565b6020604051808303816000875af1158015611138573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ff19190612686565b6001600160a01b038116331461118d5760405162461bcd60e51b81526004016111849061281e565b60405180910390fd5b6111978282611e0b565b5050565b600354604080516338d52e0f60e01b815290516000926001600160a01b0316916338d52e0f9160048083019260209291908290030181865afa1580156111e5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cbb919061287c565b600354604051633621d16560e11b81526000916001600160a01b031690636c43a2ca90610dd290339087908790600401612756565b60035460405163402d267d60e01b81526000916001600160a01b03169063402d267d9061126f908590600401612066565b602060405180830381865afa15801561128c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cf19190612686565b600080516020612de88339815191526112c881611d7a565b6112d0611ceb565b60055460405163405977e760e01b81526001600160a01b039091169063405977e790611302908690869060040161289d565b600060405180830381600087803b15801561131c57600080fd5b505af1158015611330573d6000803e3d6000fd5b5050505061107160018055565b600080516020612cc883398151915261135581611d7a565b600480546040516348ea712760e01b81526001600160a01b03909116916348ea712791610e7491869101612066565b600080516020612e4883398151915261139c81611d7a565b60048054604051634bbd71e960e01b81526001600160a01b0390911691634bbd71e991610e7491869101612066565b600080516020612d688339815191526113e381611d7a565b600480546040516318cfc8a360e21b81526001600160a01b039091169163633f228c916114149187918791016128f7565b600060405180830381600087803b15801561142e57600080fd5b505af1158015611442573d6000803e3d6000fd5b50505050505050565b6003546040516365cb676560e01b81526000916001600160a01b0316906365cb676590611119908790879087906004016127f1565b600061148a611ceb565b600354604051638340f54960e01b81526001600160a01b0390911690638340f549906114be90339086908890600401612756565b6020604051808303816000875af11580156114dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115019190612686565b9050610cf160018055565b6003546040516370a0823160e01b81526000916001600160a01b0316906370a082319061126f908590600401612066565b600080516020612d0883398151915261155581611d7a565b60048054604051638212fd4360e01b81526001600160a01b0390911691638212fd4391610e749186910161207a565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b60006115b7611ceb565b600354604051636361ddf360e11b81526001600160a01b039091169063c6c3bbe6906114be90339086908890600401612756565b6000610cbb600360009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611643573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061166791906127d0565b61167290600a612a2d565b6000611d14565b600254604051634d3c739760e11b81526000916001600160a01b031690639a78e72e9061126f908590600401612066565b600080516020612d688339815191526116c281611d7a565b600480546040516326ef2a2160e21b81526001600160a01b0390911691639bbca88491610e74918691016120d3565b60035460405163d73b1dc960e01b81526000916001600160a01b03169063d73b1dc990610dd290339087908790600401612756565b6000600080516020612ca883398151915261174081611d7a565b611748611ceb565b60025460405163a835cd8160e01b81526001600160a01b039091169063a835cd819061177c90889088908890600401612756565b6020604051808303816000875af115801561179b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117bf9190612686565b91506117ca60018055565b509392505050565b60006001600160a01b0383163014806117f257506001600160a01b038316155b156118105760405163d92e233d60e01b815260040160405180910390fd5b6003546040516317d5759960e31b81526001600160a01b039091169063beabacc89061184490339087908790600401612756565b600060405180830381600087803b15801561185e57600080fd5b505af1158015611872573d6000803e3d6000fd5b5060019695505050505050565b6000610cf1826001611d14565b600080600080516020612ce88339815191526118a781611d7a565b6118af611ceb565b60025460405163b6cc2d1f60e01b81526001600160a01b039091169063b6cc2d1f906118df908790600401612066565b60408051808303816000875af11580156118fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119219190612a42565b9250925061192e60018055565b50915091565b600080516020612dc883398151915261194c81611d7a565b600254604051637a163bd760e11b81526001600160a01b039091169063f42c77ae90610e749085906000906004016127aa565b600080516020612e2883398151915261199781611d7a565b60035460405163bdc8144b60e01b81526001600160a01b039091169063bdc8144b90610e7490859060040161207a565b60035460405163631ebadb60e11b81526000916001600160a01b03169063c63d75b69061126f908590600401612066565b6000610cf1826000611d47565b60035460405163d505accf60e01b81526000916001600160a01b03169063d505accf90611a42908b908b908b908b908b908b908b90600401612a75565b6020604051808303816000875af1158015611a61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a859190612789565b98975050505050505050565b611a9a82610ff9565b611aa381611d7a565b6110718383611e0b565b6000611ab7611ceb565b600354604051636c0d04fb60e11b81526001600160a01b039091169063d81a09f690610d399089908990899089908990600401612704565b60035460408051636cd074bd60e11b815290516000926001600160a01b03169163d9a0e97a9160048083019260209291908290030181865afa158015610c97573d6000803e3d6000fd5b600354604051636eb1769f60e11b81526000916001600160a01b03169063dd62ed3e90611b6c9086908690600401612ad1565b602060405180830381865afa158015611b89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e159190612686565b600080516020612e08833981519152611bc581611d7a565b60048054604051636fb4d91560e11b81526001600160a01b039091169163df69b22a91610e749186910161207a565b600080516020612d28833981519152611c0c81611d7a565b600560009054906101000a90046001600160a01b03166001600160a01b031663e5236cc96040518163ffffffff1660e01b8152600401600060405180830381600087803b158015611c5c57600080fd5b505af1158015611c70573d6000803e3d6000fd5b5050505050565b600080516020612da8833981519152611c8f81611d7a565b6002546040516307b6bdfd60e51b81526001600160a01b039091169063f6d7bfa090611414908690869060040161289d565b60078181548110611cd157600080fd5b6000918252602090912001546001600160a01b0316905081565b600260015403611d0d5760405162461bcd60e51b815260040161118490612b23565b6002600155565b600354604051637ff0007760e01b81526000916001600160a01b031690637ff0007790611b6c9086908690600401612b77565b600354604051635d4086af60e01b81526000916001600160a01b031690635d4086af90611b6c9086908690600401612b77565b611d848133611e70565b50565b611d918282611584565b611197576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055611dc73390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b611e158282611584565b15611197576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b611e7a8282611584565b61119757611e8781611ec9565b611e92836020611edb565b604051602001611ea3929190612bb4565b60408051601f198184030181529082905262461bcd60e51b825261118491600401612546565b6060610cf16001600160a01b03831660145b60606000611eea836002612c06565b611ef5906002612c25565b6001600160401b03811115611f0c57611f0c612110565b6040519080825280601f01601f191660200182016040528015611f36576020820181803683370190505b509050600360fc1b81600081518110611f5157611f51612c38565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611f8057611f80612c38565b60200101906001600160f81b031916908160001a9053506000611fa4846002612c06565b611faf906001612c25565b90505b6001811115612027576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611fe357611fe3612c38565b1a60f81b828281518110611ff957611ff9612c38565b60200101906001600160f81b031916908160001a90535060049490941c9361202081612c4e565b9050611fb2565b508315610e155760405162461bcd60e51b815260040161118490612c97565b60006001600160a01b038216610cf1565b61206081612046565b82525050565b60208101610cf18284612057565b80612060565b60208101610cf18284612074565b6001600160e01b031981165b8114611d8457600080fd5b8035610cf181612088565b6000602082840312156120bf576120bf600080fd5b6000610ff1848461209f565b801515612060565b60208101610cf182846120cb565b80612094565b8035610cf1816120e1565b61209481612046565b8035610cf1816120f2565b601f01601f191690565b634e487b7160e01b600052604160045260246000fd5b61212f82612106565b81018181106001600160401b038211171561214c5761214c612110565b6040525050565b600061215e60405190565b905061216a8282612126565b919050565b60006001600160401b0382111561218857612188612110565b5060209081020190565b60006121a56121a08461216f565b612153565b838152905060208082019084028301858111156121c4576121c4600080fd5b835b818110156121e857806121d988826120fb565b845250602092830192016121c6565b5050509392505050565b600082601f83011261220657612206600080fd5b8135610ff1848260208601612192565b600080600080600060a0868803121561223157612231600080fd5b600061223d88886120e7565b955050602061224e888289016120fb565b945050604061225f888289016120fb565b9350506060612270888289016120e7565b92505060808601356001600160401b0381111561228f5761228f600080fd5b61229b888289016121f2565b9150509295509295909350565b6000602082840312156122bd576122bd600080fd5b6000610ff184846120e7565b600080604083850312156122df576122df600080fd5b60006122eb85856120fb565b92505060206122fc858286016120e7565b9150509250929050565b60006020828403121561231b5761231b600080fd5b6000610ff184846120fb565b60008060006060848603121561233f5761233f600080fd5b600061234b86866120fb565b935050602061235c868287016120fb565b925050604061236d868287016120e7565b9150509250925092565b6000806040838503121561238d5761238d600080fd5b600061239985856120e7565b92505060206122fc858286016120fb565b60ff8116612060565b60208101610cf182846123aa565b6000806000606084860312156123d9576123d9600080fd5b60006123e586866120fb565b93505060206123f6868287016120e7565b92505060408401356001600160401b0381111561241557612415600080fd5b61236d868287016121f2565b6080810161242f8287612074565b61243c6020830186612074565b6124496040830185612074565b610d876060830184612074565b60008083601f84011261246b5761246b600080fd5b5081356001600160401b0381111561248557612485600080fd5b6020830191508360208202830111156124a0576124a0600080fd5b9250929050565b600080602083850312156124bd576124bd600080fd5b82356001600160401b038111156124d6576124d6600080fd5b6124e285828601612456565b92509250509250929050565b60005b838110156125095781810151838201526020016124f1565b50506000910152565b600061251c825190565b8084526020840193506125338185602086016124ee565b61253c81612106565b9093019392505050565b60208082528101610e158184612512565b801515612094565b8035610cf181612557565b60006020828403121561257f5761257f600080fd5b6000610ff1848461255f565b604081016125998285612074565b610e156020830184612074565b60ff8116612094565b8035610cf1816125a6565b600080600080600080600060e0888a0312156125d8576125d8600080fd5b60006125e48a8a6120fb565b97505060206125f58a828b016120fb565b96505060406126068a828b016120e7565b95505060606126178a828b016120e7565b94505060806126288a828b016125af565b93505060a06126398a828b016120e7565b92505060c061264a8a828b016120e7565b91505092959891949750929550565b6000806040838503121561266f5761266f600080fd5b600061239985856120fb565b8051610cf1816120e1565b60006020828403121561269b5761269b600080fd5b6000610ff1848461267b565b60006126b38383612057565b505060200190565b60006126c5825190565b80845260209384019383018060005b838110156126f95781516126e888826126a7565b9750602083019250506001016126d4565b509495945050505050565b60a081016127128288612074565b61271f6020830187612057565b61272c6040830186612057565b6127396060830185612074565b818103608083015261274b81846126bb565b979650505050505050565b606081016127648286612057565b6127716020830185612057565b610ff16040830184612074565b8051610cf181612557565b60006020828403121561279e5761279e600080fd5b6000610ff1848461277e565b604081016127b88285612057565b610e1560208301846120cb565b8051610cf1816125a6565b6000602082840312156127e5576127e5600080fd5b6000610ff184846127c5565b606081016127ff8286612057565b61280c6020830185612074565b8181036040830152610d8781846126bb565b60208082528101610cf181602f81527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560208201526e103937b632b9903337b91039b2b63360891b604082015260600190565b8051610cf1816120f2565b60006020828403121561289157612891600080fd5b6000610ff18484612871565b604081016125998285612057565b6000610e1560208401846120fb565b8183526000602084019350818060005b858110156126f9576128dc82846128ab565b6128e688826126a7565b9750602083019250506001016128ca565b60208082528101610ff18184866128ba565b634e487b7160e01b600052601160045260246000fd5b80825b600185111561295e5780860481111561293d5761293d612909565b600185161561294b57908102905b80026129578560011c90565b9450612922565b94509492505050565b60008261297657506001610e15565b8161298357506000610e15565b816001811461299957600281146129a3576129d0565b6001915050610e15565b60ff8411156129b4576129b4612909565b8360020a9150848211156129ca576129ca612909565b50610e15565b5060208310610133831016604e8410600b8410161715612a03575081810a838111156129fe576129fe612909565b610e15565b612a10848484600161291f565b92509050818404811115612a2657612a26612909565b0292915050565b600060ff83169250610e156000198484612967565b60008060408385031215612a5857612a58600080fd5b6000612a64858561267b565b92505060206122fc8582860161267b565b60e08101612a83828a612057565b612a906020830189612057565b612a9d6040830188612074565b612aaa6060830187612074565b612ab760808301866123aa565b612ac460a0830185612074565b611a8560c0830184612074565b60408101612adf8285612057565b610e156020830184612057565b601f81526000602082017f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00815291505b5060200190565b60208082528101610cf181612aec565b634e487b7160e01b600052602160045260246000fd5b60028110611d8457611d84612b33565b8061216a81612b49565b6000610cf182612b59565b61206081612b63565b60408101612b858285612074565b610e156020830184612b6e565b6000612b9c825190565b612baa8185602086016124ee565b9290920192915050565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b81526017016000612be08285612b92565b7001034b99036b4b9b9b4b733903937b6329607d1b81526011019150610ff18284612b92565b6000816000190483118215151615612c2057612c20612909565b500290565b80820180821115610cf157610cf1612909565b634e487b7160e01b600052603260045260246000fd5b600081612c5d57612c5d612909565b506000190190565b60208082527f537472696e67733a20686578206c656e67746820696e73756666696369656e7491019081526000612b1c565b60208082528101610cf181612c6556fe152ebba56b9738ee3d8baea1b76fa31dcdcd79b1929bfea7d58ee12cfdf1a653cd9f023a942ee35097ead74b2505bea9f2c5d47465db92dd195cf7f01a41cfe1633076a97f32ae349b28772e7b1483f67a926f150cbc501d02bdbd77389325abc723f4dd6268e1c374639e36d629c765285ee7003913389d582c300f186dde97d45f7ccff42f059d4e47c3f027c444272257266f7e88b981e142f0aa38fbfd78ea672c1c09cd95c51af9509f646f3615ff0071aae8652bd821471ee9037fd72c862f91c9d89d6135b19873b921c90b702cb2e175c371b8430026b9577e6911192a0e761830cc61f2707ea7bb138008bf9dda7f7d34c77736d0a116604e95ea167cbb3cdf689b8ea3e9d265f66bc4e0a99069268217017d38d2a5a559abc627196f430d649a8640e48ff9bfbc353b3f99ed630163857821b3b4075e3871dafbf5900d80def0427daac599092fcb16b21808ec68dd9a2e1eae89d1e8db21357375a18eaea71a088b547b8c932b48861853b3434d9a3240b94466c607e28b6965952f0dbbe8c2c0170206c50ec0cafa1c0dbd03e73e67c2a960178df30a0a30ee2e69d1171ac0a63777a6733cda21aec9ed3d48a4fd11f273c934a691dec5e5589ca26469706673582212206f635ffdcec7a06372e2b80fd14a57eb06efe805b763f7bafbe567435be3404f64736f6c63430008100033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106104865760003560e01c806377e3b2671161026057806377e3b2671461087d5780637ecebe00146108ae5780638212fd43146108ce5780638afca8f0146108e157806391986003146108ea57806391d14854146108fd57806394bf804d14610910578063993746421461092357806399530b06146109435780639a78e72e1461094b5780639bbca8841461095e5780639e34e348146109715780639f3988f314610984578063a217fddf14610999578063a457c2d7146109a1578063a835cd81146109b4578063a9059cbb146109c7578063a98222c4146109da578063ab5b4d49146109ef578063acded97d14610a04578063b3c187f214610a17578063b3d7f6b914610a2a578063b6cc2d1f14610a3d578063bb994d4814610a5e578063bbe4eb4914610a71578063bdc8144b14610a7e578063bee7e3d914610a91578063c065ca0714610aa4578063c0993eea14610ab9578063c63d75b614610ae0578063c6e6f59214610af3578063c8d74b6014610b06578063c8dffa9514610b1b578063d4ae064f14610b24578063d505accf14610b39578063d547741f14610b4c578063d81a09f614610b5f578063d9a0e97a14610b72578063dd62ed3e14610b7a578063df69b22a14610b8d578063e5236cc914610ba0578063ecf7085814610ba8578063ef8b30f714610af3578063f1daeba814610bb1578063f5b944eb14610bc6578063f6d7bfa014610bed578063f828f50b14610c00578063fc0e74d114610c09578063fd967f4714610c1d578063fec61f0614610c26578063ff1e7f0814610c3b57600080fd5b8062435da51461048b57806301e1d114146104b457806301ffc9a7146104c957806303dcd12c146104e957806306580f2d146104fe57806307a2d13a146105115780630835a3fc146105245780630952864e1461052d578063095ea7b3146105365780630a28a477146105495780630ad283d01461055c57806316b87ac01461057157806316d3bfbb1461058657806318160ddd146105ad578063223e5479146105b557806323b872dd146105c8578063248a9ca3146105db5780632d632692146105ee5780632d772168146105f75780632dd310001461060a5780632f2ff15d14610631578063313ce5671461064457806334b5fab6146106595780633644e5151461066c57806336568abe1461067557806336fba0841461068857806338d52e0f14610694578063395093511461069c57806339b70e38146106af57806339ebf823146106c25780633cd7b5ab146107075780633f7b5e4014610710578063402d267d14610718578063405977e71461072b57806348ea71271461073e5780634bbd71e9146107515780634cdad506146105115780634ce1d38a146107645780634cfe51dc146107795780634d4bb1971461078e5780634fb3ccc5146107b55780635141eebb146107c857806353a66132146107d15780635aa6e675146107f45780635bf6b4fb14610807578063633f228c1461081c578063652da3241461082f57806365cb6765146108445780636e553f651461085757806370a082311461086a575b600080fd5b60155461049e906001600160a01b031681565b6040516104ab9190612066565b60405180910390f35b6104bc610c4e565b6040516104ab919061207a565b6104dc6104d73660046120aa565b610cc0565b6040516104ab91906120d3565b6104bc600080516020612ce883398151915281565b6104bc61050c366004612216565b610cf7565b6104bc61051f3660046122a8565b610d90565b6104bc600e5481565b6104bc60175481565b6104dc6105443660046122c9565b610d9d565b6104bc6105573660046122a8565b610e1c565b6104bc600080516020612d0883398151915281565b61058461057f366004612306565b610e29565b005b6104bc7f000000000000000000000000000000000000000000000000000000000000000081565b6104bc610eaa565b6105846105c3366004612306565b610ef4565b6104dc6105d6366004612327565b610f3c565b6104bc6105e93660046122a8565b610ff9565b6104bc60185481565b610584610605366004612306565b61100e565b61049e7f000000000000000000000000000000000000000000000000000000000000000081565b61058461063f366004612377565b611055565b61064c611076565b6040516104ab91906123b3565b6104bc6106673660046123c1565b6110e4565b6104bc601c5481565b610584610683366004612377565b61115c565b6104bc64e8d4a5100081565b61049e61119b565b6104dc6106aa3660046122c9565b611209565b60025461049e906001600160a01b031681565b6106f76106d0366004612306565b60066020526000908152604090208054600182015460028301546003909301549192909184565b6040516104ab9493929190612421565b6104bc600d5481565b6104bc600a81565b6104bc610726366004612306565b61123e565b6105846107393660046122c9565b6112b0565b61058461074c366004612306565b61133d565b61058461075f366004612306565b611384565b6104bc600080516020612e4883398151915281565b6104bc600080516020612d6883398151915281565b6104bc7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b60105461049e906001600160a01b031681565b6104bc60195481565b6104dc6107df3660046122a8565b60146020526000908152604090205460ff1681565b60055461049e906001600160a01b031681565b6104bc600080516020612d4883398151915281565b61058461082a3660046124a7565b6113cb565b6104bc600080516020612cc883398151915281565b6104bc6108523660046123c1565b61144b565b6104bc610865366004612377565b611480565b6104bc610878366004612306565b61150c565b6108a1604051806040016040528060058152602001640312e302e360dc1b81525081565b6040516104ab9190612546565b6104bc6108bc366004612306565b601b6020526000908152604090205481565b6105846108dc3660046122a8565b61153d565b6104bc601a5481565b60125461049e906001600160a01b031681565b6104dc61090b366004612377565b611584565b6104bc61091e366004612377565b6115ad565b6104bc610931366004612306565b60136020526000908152604090205481565b6104bc6115eb565b6104bc610959366004612306565b611679565b61058461096c36600461256a565b6116aa565b60115461049e906001600160a01b031681565b6104bc600080516020612dc883398151915281565b6104bc600081565b6104dc6109af3660046122c9565b6116f1565b6104bc6109c2366004612327565b611726565b6104dc6109d53660046122c9565b6117d2565b6104bc600080516020612e2883398151915281565b6104bc600080516020612de883398151915281565b60035461049e906001600160a01b031681565b60165461049e906001600160a01b031681565b6104bc610a383660046122a8565b61187f565b610a50610a4b366004612306565b61188c565b6040516104ab92919061258b565b610584610a6c366004612306565b611934565b6008546104dc9060ff1681565b610584610a8c3660046122a8565b61197f565b60045461049e906001600160a01b031681565b6104bc600080516020612d8883398151915281565b6104bc7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81565b6104bc610aee366004612306565b6119c7565b6104bc610b013660046122a8565b6119f8565b6104bc600080516020612ca883398151915281565b6104bc600c5481565b6104bc600080516020612e0883398151915281565b6104dc610b473660046125ba565b611a05565b610584610b5a366004612377565b611a91565b6104bc610b6d366004612216565b611aad565b6104bc611aef565b6104bc610b88366004612659565b611b39565b610584610b9b3660046122a8565b611bad565b610584611bf4565b6104bc600f5481565b6104bc600080516020612da883398151915281565b6104bc7ff206625bad3d9112d5609b8d356e6fbd514cd1f69980d4ce2b3e6e68e1789ace81565b610584610bfb3660046122c9565b611c77565b6104bc600b5481565b6016546104dc90600160a01b900460ff1681565b6104bc61271081565b6104bc600080516020612d2883398151915281565b61049e610c493660046122a8565b611cc1565b600354604080516278744560e21b815290516000926001600160a01b0316916301e1d1149160048083019260209291908290030181865afa158015610c97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cbb9190612686565b905090565b60006001600160e01b03198216637965db0b60e01b1480610cf157506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000610d01611ceb565b6003546040516306580f2d60e01b81526001600160a01b03909116906306580f2d90610d399089908990899089908990600401612704565b6020604051808303816000875af1158015610d58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7c9190612686565b9050610d8760018055565b95945050505050565b6000610cf1826000611d14565b60035460405163e1f21c6760e01b81526000916001600160a01b03169063e1f21c6790610dd290339087908790600401612756565b6020604051808303816000875af1158015610df1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e159190612789565b9392505050565b6000610cf1826001611d47565b600080516020612d48833981519152610e4181611d7a565b600254604051637a163bd760e11b81526001600160a01b039091169063f42c77ae90610e749085906001906004016127aa565b600060405180830381600087803b158015610e8e57600080fd5b505af1158015610ea2573d6000803e3d6000fd5b505050505050565b600354604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd9160048083019260209291908290030181865afa158015610c97573d6000803e3d6000fd5b600080516020612d88833981519152610f0c81611d7a565b60025460405163223e547960e01b81526001600160a01b039091169063223e547990610e74908590600401612066565b60006001600160a01b038316301480610f5c57506001600160a01b038316155b15610f7a5760405163d92e233d60e01b815260040160405180910390fd5b6003546040516323b872dd60e01b81526001600160a01b03909116906323b872dd90610fae90879087908790600401612756565b6020604051808303816000875af1158015610fcd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ff19190612789565b949350505050565b60009081526020819052604090206001015490565b600080516020612e2883398151915261102681611d7a565b600480546040516305aee42d60e31b81526001600160a01b0390911691632d77216891610e7491869101612066565b61105e82610ff9565b61106781611d7a565b6110718383611d87565b505050565b6003546040805163313ce56760e01b815290516000926001600160a01b03169163313ce5679160048083019260209291908290030181865afa1580156110c0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cbb91906127d0565b600354604051631a5afd5b60e11b81526000916001600160a01b0316906334b5fab690611119908790879087906004016127f1565b6020604051808303816000875af1158015611138573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ff19190612686565b6001600160a01b038116331461118d5760405162461bcd60e51b81526004016111849061281e565b60405180910390fd5b6111978282611e0b565b5050565b600354604080516338d52e0f60e01b815290516000926001600160a01b0316916338d52e0f9160048083019260209291908290030181865afa1580156111e5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cbb919061287c565b600354604051633621d16560e11b81526000916001600160a01b031690636c43a2ca90610dd290339087908790600401612756565b60035460405163402d267d60e01b81526000916001600160a01b03169063402d267d9061126f908590600401612066565b602060405180830381865afa15801561128c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cf19190612686565b600080516020612de88339815191526112c881611d7a565b6112d0611ceb565b60055460405163405977e760e01b81526001600160a01b039091169063405977e790611302908690869060040161289d565b600060405180830381600087803b15801561131c57600080fd5b505af1158015611330573d6000803e3d6000fd5b5050505061107160018055565b600080516020612cc883398151915261135581611d7a565b600480546040516348ea712760e01b81526001600160a01b03909116916348ea712791610e7491869101612066565b600080516020612e4883398151915261139c81611d7a565b60048054604051634bbd71e960e01b81526001600160a01b0390911691634bbd71e991610e7491869101612066565b600080516020612d688339815191526113e381611d7a565b600480546040516318cfc8a360e21b81526001600160a01b039091169163633f228c916114149187918791016128f7565b600060405180830381600087803b15801561142e57600080fd5b505af1158015611442573d6000803e3d6000fd5b50505050505050565b6003546040516365cb676560e01b81526000916001600160a01b0316906365cb676590611119908790879087906004016127f1565b600061148a611ceb565b600354604051638340f54960e01b81526001600160a01b0390911690638340f549906114be90339086908890600401612756565b6020604051808303816000875af11580156114dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115019190612686565b9050610cf160018055565b6003546040516370a0823160e01b81526000916001600160a01b0316906370a082319061126f908590600401612066565b600080516020612d0883398151915261155581611d7a565b60048054604051638212fd4360e01b81526001600160a01b0390911691638212fd4391610e749186910161207a565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b60006115b7611ceb565b600354604051636361ddf360e11b81526001600160a01b039091169063c6c3bbe6906114be90339086908890600401612756565b6000610cbb600360009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611643573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061166791906127d0565b61167290600a612a2d565b6000611d14565b600254604051634d3c739760e11b81526000916001600160a01b031690639a78e72e9061126f908590600401612066565b600080516020612d688339815191526116c281611d7a565b600480546040516326ef2a2160e21b81526001600160a01b0390911691639bbca88491610e74918691016120d3565b60035460405163d73b1dc960e01b81526000916001600160a01b03169063d73b1dc990610dd290339087908790600401612756565b6000600080516020612ca883398151915261174081611d7a565b611748611ceb565b60025460405163a835cd8160e01b81526001600160a01b039091169063a835cd819061177c90889088908890600401612756565b6020604051808303816000875af115801561179b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117bf9190612686565b91506117ca60018055565b509392505050565b60006001600160a01b0383163014806117f257506001600160a01b038316155b156118105760405163d92e233d60e01b815260040160405180910390fd5b6003546040516317d5759960e31b81526001600160a01b039091169063beabacc89061184490339087908790600401612756565b600060405180830381600087803b15801561185e57600080fd5b505af1158015611872573d6000803e3d6000fd5b5060019695505050505050565b6000610cf1826001611d14565b600080600080516020612ce88339815191526118a781611d7a565b6118af611ceb565b60025460405163b6cc2d1f60e01b81526001600160a01b039091169063b6cc2d1f906118df908790600401612066565b60408051808303816000875af11580156118fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119219190612a42565b9250925061192e60018055565b50915091565b600080516020612dc883398151915261194c81611d7a565b600254604051637a163bd760e11b81526001600160a01b039091169063f42c77ae90610e749085906000906004016127aa565b600080516020612e2883398151915261199781611d7a565b60035460405163bdc8144b60e01b81526001600160a01b039091169063bdc8144b90610e7490859060040161207a565b60035460405163631ebadb60e11b81526000916001600160a01b03169063c63d75b69061126f908590600401612066565b6000610cf1826000611d47565b60035460405163d505accf60e01b81526000916001600160a01b03169063d505accf90611a42908b908b908b908b908b908b908b90600401612a75565b6020604051808303816000875af1158015611a61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a859190612789565b98975050505050505050565b611a9a82610ff9565b611aa381611d7a565b6110718383611e0b565b6000611ab7611ceb565b600354604051636c0d04fb60e11b81526001600160a01b039091169063d81a09f690610d399089908990899089908990600401612704565b60035460408051636cd074bd60e11b815290516000926001600160a01b03169163d9a0e97a9160048083019260209291908290030181865afa158015610c97573d6000803e3d6000fd5b600354604051636eb1769f60e11b81526000916001600160a01b03169063dd62ed3e90611b6c9086908690600401612ad1565b602060405180830381865afa158015611b89573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e159190612686565b600080516020612e08833981519152611bc581611d7a565b60048054604051636fb4d91560e11b81526001600160a01b039091169163df69b22a91610e749186910161207a565b600080516020612d28833981519152611c0c81611d7a565b600560009054906101000a90046001600160a01b03166001600160a01b031663e5236cc96040518163ffffffff1660e01b8152600401600060405180830381600087803b158015611c5c57600080fd5b505af1158015611c70573d6000803e3d6000fd5b5050505050565b600080516020612da8833981519152611c8f81611d7a565b6002546040516307b6bdfd60e51b81526001600160a01b039091169063f6d7bfa090611414908690869060040161289d565b60078181548110611cd157600080fd5b6000918252602090912001546001600160a01b0316905081565b600260015403611d0d5760405162461bcd60e51b815260040161118490612b23565b6002600155565b600354604051637ff0007760e01b81526000916001600160a01b031690637ff0007790611b6c9086908690600401612b77565b600354604051635d4086af60e01b81526000916001600160a01b031690635d4086af90611b6c9086908690600401612b77565b611d848133611e70565b50565b611d918282611584565b611197576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055611dc73390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b611e158282611584565b15611197576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b611e7a8282611584565b61119757611e8781611ec9565b611e92836020611edb565b604051602001611ea3929190612bb4565b60408051601f198184030181529082905262461bcd60e51b825261118491600401612546565b6060610cf16001600160a01b03831660145b60606000611eea836002612c06565b611ef5906002612c25565b6001600160401b03811115611f0c57611f0c612110565b6040519080825280601f01601f191660200182016040528015611f36576020820181803683370190505b509050600360fc1b81600081518110611f5157611f51612c38565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110611f8057611f80612c38565b60200101906001600160f81b031916908160001a9053506000611fa4846002612c06565b611faf906001612c25565b90505b6001811115612027576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110611fe357611fe3612c38565b1a60f81b828281518110611ff957611ff9612c38565b60200101906001600160f81b031916908160001a90535060049490941c9361202081612c4e565b9050611fb2565b508315610e155760405162461bcd60e51b815260040161118490612c97565b60006001600160a01b038216610cf1565b61206081612046565b82525050565b60208101610cf18284612057565b80612060565b60208101610cf18284612074565b6001600160e01b031981165b8114611d8457600080fd5b8035610cf181612088565b6000602082840312156120bf576120bf600080fd5b6000610ff1848461209f565b801515612060565b60208101610cf182846120cb565b80612094565b8035610cf1816120e1565b61209481612046565b8035610cf1816120f2565b601f01601f191690565b634e487b7160e01b600052604160045260246000fd5b61212f82612106565b81018181106001600160401b038211171561214c5761214c612110565b6040525050565b600061215e60405190565b905061216a8282612126565b919050565b60006001600160401b0382111561218857612188612110565b5060209081020190565b60006121a56121a08461216f565b612153565b838152905060208082019084028301858111156121c4576121c4600080fd5b835b818110156121e857806121d988826120fb565b845250602092830192016121c6565b5050509392505050565b600082601f83011261220657612206600080fd5b8135610ff1848260208601612192565b600080600080600060a0868803121561223157612231600080fd5b600061223d88886120e7565b955050602061224e888289016120fb565b945050604061225f888289016120fb565b9350506060612270888289016120e7565b92505060808601356001600160401b0381111561228f5761228f600080fd5b61229b888289016121f2565b9150509295509295909350565b6000602082840312156122bd576122bd600080fd5b6000610ff184846120e7565b600080604083850312156122df576122df600080fd5b60006122eb85856120fb565b92505060206122fc858286016120e7565b9150509250929050565b60006020828403121561231b5761231b600080fd5b6000610ff184846120fb565b60008060006060848603121561233f5761233f600080fd5b600061234b86866120fb565b935050602061235c868287016120fb565b925050604061236d868287016120e7565b9150509250925092565b6000806040838503121561238d5761238d600080fd5b600061239985856120e7565b92505060206122fc858286016120fb565b60ff8116612060565b60208101610cf182846123aa565b6000806000606084860312156123d9576123d9600080fd5b60006123e586866120fb565b93505060206123f6868287016120e7565b92505060408401356001600160401b0381111561241557612415600080fd5b61236d868287016121f2565b6080810161242f8287612074565b61243c6020830186612074565b6124496040830185612074565b610d876060830184612074565b60008083601f84011261246b5761246b600080fd5b5081356001600160401b0381111561248557612485600080fd5b6020830191508360208202830111156124a0576124a0600080fd5b9250929050565b600080602083850312156124bd576124bd600080fd5b82356001600160401b038111156124d6576124d6600080fd5b6124e285828601612456565b92509250509250929050565b60005b838110156125095781810151838201526020016124f1565b50506000910152565b600061251c825190565b8084526020840193506125338185602086016124ee565b61253c81612106565b9093019392505050565b60208082528101610e158184612512565b801515612094565b8035610cf181612557565b60006020828403121561257f5761257f600080fd5b6000610ff1848461255f565b604081016125998285612074565b610e156020830184612074565b60ff8116612094565b8035610cf1816125a6565b600080600080600080600060e0888a0312156125d8576125d8600080fd5b60006125e48a8a6120fb565b97505060206125f58a828b016120fb565b96505060406126068a828b016120e7565b95505060606126178a828b016120e7565b94505060806126288a828b016125af565b93505060a06126398a828b016120e7565b92505060c061264a8a828b016120e7565b91505092959891949750929550565b6000806040838503121561266f5761266f600080fd5b600061239985856120fb565b8051610cf1816120e1565b60006020828403121561269b5761269b600080fd5b6000610ff1848461267b565b60006126b38383612057565b505060200190565b60006126c5825190565b80845260209384019383018060005b838110156126f95781516126e888826126a7565b9750602083019250506001016126d4565b509495945050505050565b60a081016127128288612074565b61271f6020830187612057565b61272c6040830186612057565b6127396060830185612074565b818103608083015261274b81846126bb565b979650505050505050565b606081016127648286612057565b6127716020830185612057565b610ff16040830184612074565b8051610cf181612557565b60006020828403121561279e5761279e600080fd5b6000610ff1848461277e565b604081016127b88285612057565b610e1560208301846120cb565b8051610cf1816125a6565b6000602082840312156127e5576127e5600080fd5b6000610ff184846127c5565b606081016127ff8286612057565b61280c6020830185612074565b8181036040830152610d8781846126bb565b60208082528101610cf181602f81527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560208201526e103937b632b9903337b91039b2b63360891b604082015260600190565b8051610cf1816120f2565b60006020828403121561289157612891600080fd5b6000610ff18484612871565b604081016125998285612057565b6000610e1560208401846120fb565b8183526000602084019350818060005b858110156126f9576128dc82846128ab565b6128e688826126a7565b9750602083019250506001016128ca565b60208082528101610ff18184866128ba565b634e487b7160e01b600052601160045260246000fd5b80825b600185111561295e5780860481111561293d5761293d612909565b600185161561294b57908102905b80026129578560011c90565b9450612922565b94509492505050565b60008261297657506001610e15565b8161298357506000610e15565b816001811461299957600281146129a3576129d0565b6001915050610e15565b60ff8411156129b4576129b4612909565b8360020a9150848211156129ca576129ca612909565b50610e15565b5060208310610133831016604e8410600b8410161715612a03575081810a838111156129fe576129fe612909565b610e15565b612a10848484600161291f565b92509050818404811115612a2657612a26612909565b0292915050565b600060ff83169250610e156000198484612967565b60008060408385031215612a5857612a58600080fd5b6000612a64858561267b565b92505060206122fc8582860161267b565b60e08101612a83828a612057565b612a906020830189612057565b612a9d6040830188612074565b612aaa6060830187612074565b612ab760808301866123aa565b612ac460a0830185612074565b611a8560c0830184612074565b60408101612adf8285612057565b610e156020830184612057565b601f81526000602082017f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00815291505b5060200190565b60208082528101610cf181612aec565b634e487b7160e01b600052602160045260246000fd5b60028110611d8457611d84612b33565b8061216a81612b49565b6000610cf182612b59565b61206081612b63565b60408101612b858285612074565b610e156020830184612b6e565b6000612b9c825190565b612baa8185602086016124ee565b9290920192915050565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b81526017016000612be08285612b92565b7001034b99036b4b9b9b4b733903937b6329607d1b81526011019150610ff18284612b92565b6000816000190483118215151615612c2057612c20612909565b500290565b80820180821115610cf157610cf1612909565b634e487b7160e01b600052603260045260246000fd5b600081612c5d57612c5d612909565b506000190190565b60208082527f537472696e67733a20686578206c656e67746820696e73756666696369656e7491019081526000612b1c565b60208082528101610cf181612c6556fe152ebba56b9738ee3d8baea1b76fa31dcdcd79b1929bfea7d58ee12cfdf1a653cd9f023a942ee35097ead74b2505bea9f2c5d47465db92dd195cf7f01a41cfe1633076a97f32ae349b28772e7b1483f67a926f150cbc501d02bdbd77389325abc723f4dd6268e1c374639e36d629c765285ee7003913389d582c300f186dde97d45f7ccff42f059d4e47c3f027c444272257266f7e88b981e142f0aa38fbfd78ea672c1c09cd95c51af9509f646f3615ff0071aae8652bd821471ee9037fd72c862f91c9d89d6135b19873b921c90b702cb2e175c371b8430026b9577e6911192a0e761830cc61f2707ea7bb138008bf9dda7f7d34c77736d0a116604e95ea167cbb3cdf689b8ea3e9d265f66bc4e0a99069268217017d38d2a5a559abc627196f430d649a8640e48ff9bfbc353b3f99ed630163857821b3b4075e3871dafbf5900d80def0427daac599092fcb16b21808ec68dd9a2e1eae89d1e8db21357375a18eaea71a088b547b8c932b48861853b3434d9a3240b94466c607e28b6965952f0dbbe8c2c0170206c50ec0cafa1c0dbd03e73e67c2a960178df30a0a30ee2e69d1171ac0a63777a6733cda21aec9ed3d48a4fd11f273c934a691dec5e5589ca26469706673582212206f635ffdcec7a06372e2b80fd14a57eb06efe805b763f7bafbe567435be3404f64736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "title": "Yearn V3 Vault",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "The Yearn VaultV3 is designed as a non-opinionated system to distribute funds of  depositors for a specific `asset` into different opportunities (aka Strategies) and manage accounting in a robust way.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24,
        "contract": "contracts/FathomVault.sol:FathomVault",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 399,
        "contract": "contracts/FathomVault.sol:FathomVault",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 9120,
        "contract": "contracts/FathomVault.sol:FathomVault",
        "label": "strategyManager",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 9122,
        "contract": "contracts/FathomVault.sol:FathomVault",
        "label": "sharesManager",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 9124,
        "contract": "contracts/FathomVault.sol:FathomVault",
        "label": "setters",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 9126,
        "contract": "contracts/FathomVault.sol:FathomVault",
        "label": "governance",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 9131,
        "contract": "contracts/FathomVault.sol:FathomVault",
        "label": "strategies",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_struct(StrategyParams)9289_storage)"
      },
      {
        "astId": 9134,
        "contract": "contracts/FathomVault.sol:FathomVault",
        "label": "defaultQueue",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 9136,
        "contract": "contracts/FathomVault.sol:FathomVault",
        "label": "useDefaultQueue",
        "offset": 0,
        "slot": "8",
        "type": "t_bool"
      },
      {
        "astId": 9138,
        "contract": "contracts/FathomVault.sol:FathomVault",
        "label": "initialized",
        "offset": 1,
        "slot": "8",
        "type": "t_bool"
      },
      {
        "astId": 9142,
        "contract": "contracts/FathomVault.sol:FathomVault",
        "label": "_balanceOf",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 9148,
        "contract": "contracts/FathomVault.sol:FathomVault",
        "label": "_allowance",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 9150,
        "contract": "contracts/FathomVault.sol:FathomVault",
        "label": "totalSupplyAmount",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 9152,
        "contract": "contracts/FathomVault.sol:FathomVault",
        "label": "totalDebtAmount",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 9154,
        "contract": "contracts/FathomVault.sol:FathomVault",
        "label": "totalIdleAmount",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 9156,
        "contract": "contracts/FathomVault.sol:FathomVault",
        "label": "minimumTotalIdle",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 9158,
        "contract": "contracts/FathomVault.sol:FathomVault",
        "label": "depositLimit",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 9160,
        "contract": "contracts/FathomVault.sol:FathomVault",
        "label": "accountant",
        "offset": 0,
        "slot": "16",
        "type": "t_address"
      },
      {
        "astId": 9162,
        "contract": "contracts/FathomVault.sol:FathomVault",
        "label": "depositLimitModule",
        "offset": 0,
        "slot": "17",
        "type": "t_address"
      },
      {
        "astId": 9164,
        "contract": "contracts/FathomVault.sol:FathomVault",
        "label": "withdrawLimitModule",
        "offset": 0,
        "slot": "18",
        "type": "t_address"
      },
      {
        "astId": 9168,
        "contract": "contracts/FathomVault.sol:FathomVault",
        "label": "roles",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_address,t_bytes32)"
      },
      {
        "astId": 9172,
        "contract": "contracts/FathomVault.sol:FathomVault",
        "label": "openRoles",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 9174,
        "contract": "contracts/FathomVault.sol:FathomVault",
        "label": "roleManager",
        "offset": 0,
        "slot": "21",
        "type": "t_address"
      },
      {
        "astId": 9176,
        "contract": "contracts/FathomVault.sol:FathomVault",
        "label": "futureRoleManager",
        "offset": 0,
        "slot": "22",
        "type": "t_address"
      },
      {
        "astId": 9178,
        "contract": "contracts/FathomVault.sol:FathomVault",
        "label": "shutdown",
        "offset": 20,
        "slot": "22",
        "type": "t_bool"
      },
      {
        "astId": 9180,
        "contract": "contracts/FathomVault.sol:FathomVault",
        "label": "profitMaxUnlockTime",
        "offset": 0,
        "slot": "23",
        "type": "t_uint256"
      },
      {
        "astId": 9182,
        "contract": "contracts/FathomVault.sol:FathomVault",
        "label": "fullProfitUnlockDate",
        "offset": 0,
        "slot": "24",
        "type": "t_uint256"
      },
      {
        "astId": 9184,
        "contract": "contracts/FathomVault.sol:FathomVault",
        "label": "profitUnlockingRate",
        "offset": 0,
        "slot": "25",
        "type": "t_uint256"
      },
      {
        "astId": 9186,
        "contract": "contracts/FathomVault.sol:FathomVault",
        "label": "lastProfitUpdate",
        "offset": 0,
        "slot": "26",
        "type": "t_uint256"
      },
      {
        "astId": 9190,
        "contract": "contracts/FathomVault.sol:FathomVault",
        "label": "nonces",
        "offset": 0,
        "slot": "27",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 9197,
        "contract": "contracts/FathomVault.sol:FathomVault",
        "label": "DOMAIN_SEPARATOR",
        "offset": 0,
        "slot": "28",
        "type": "t_bytes32"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(StrategyParams)9289_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct StrategyParams)",
        "numberOfBytes": "32",
        "value": "t_struct(StrategyParams)9289_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/FathomVault.sol:FathomVault",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/FathomVault.sol:FathomVault",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(StrategyParams)9289_storage": {
        "encoding": "inplace",
        "label": "struct StrategyParams",
        "members": [
          {
            "astId": 9282,
            "contract": "contracts/FathomVault.sol:FathomVault",
            "label": "activation",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9284,
            "contract": "contracts/FathomVault.sol:FathomVault",
            "label": "lastReport",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 9286,
            "contract": "contracts/FathomVault.sol:FathomVault",
            "label": "currentDebt",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 9288,
            "contract": "contracts/FathomVault.sol:FathomVault",
            "label": "maxDebt",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}