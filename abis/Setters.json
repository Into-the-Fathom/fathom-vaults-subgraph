{
  "address": "0xD8E148D42CAfbff410B470A7382E9db9B9Ec5Ed5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sharesManager",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InactiveStrategy",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProfitUnlockTimeTooLong",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "StrategyIsShutdown",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UsingDepositLimit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UsingModule",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DebtPurchased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currentDebt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newDebt",
          "type": "uint256"
        }
      ],
      "name": "DebtUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "RoleSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "enum RoleStatusChange",
          "name": "status",
          "type": "uint8"
        }
      ],
      "name": "RoleStatusChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "Shutdown",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum StrategyChangeType",
          "name": "changeType",
          "type": "uint8"
        }
      ],
      "name": "StrategyChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gain",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "loss",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currentDebt",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "protocolFees",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalFees",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalRefunds",
          "type": "uint256"
        }
      ],
      "name": "StrategyReported",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "accountant",
          "type": "address"
        }
      ],
      "name": "UpdateAccountant",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "newDefaultQueue",
          "type": "address[]"
        }
      ],
      "name": "UpdateDefaultQueue",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "depositLimit",
          "type": "uint256"
        }
      ],
      "name": "UpdateDepositLimit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "depositLimitModule",
          "type": "address"
        }
      ],
      "name": "UpdateDepositLimitModule",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minimumTotalIdle",
          "type": "uint256"
        }
      ],
      "name": "UpdateMinimumTotalIdle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "profitMaxUnlockTime",
          "type": "uint256"
        }
      ],
      "name": "UpdateProfitMaxUnlockTime",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "roleManager",
          "type": "address"
        }
      ],
      "name": "UpdateRoleManager",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "useDefaultQueue",
          "type": "bool"
        }
      ],
      "name": "UpdateUseDefaultQueue",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "withdrawLimitModule",
          "type": "address"
        }
      ],
      "name": "UpdateWithdrawLimitModule",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newDebt",
          "type": "uint256"
        }
      ],
      "name": "UpdatedMaxDebtForStrategy",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ACCOUNTANT_MANAGER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ADD_STRATEGY_MANAGER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "API_VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEBT_MANAGER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEBT_PURCHASER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEPOSIT_LIMIT_MANAGER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_TYPE_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "EMERGENCY_MANAGER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FORCE_REVOKE_MANAGER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_BPS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_BPS_EXTENDED",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_DEBT_MANAGER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_QUEUE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINIMUM_IDLE_MANAGER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ONE_YEAR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERMIT_TYPE_HASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PROFIT_UNLOCK_MANAGER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "QUEUE_MANAGER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REPORTING_MANAGER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REVOKE_STRATEGY_MANAGER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROLE_MANAGER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WITHDRAW_LIMIT_MANAGER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accountant",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "defaultQueue",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositLimitModule",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fullProfitUnlockDate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "futureRoleManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governance",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastProfitUpdate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumTotalIdle",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "openRoles",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "profitMaxUnlockTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "profitUnlockingRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roleManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "roles",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAccountant",
          "type": "address"
        }
      ],
      "name": "setAccountant",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "newDefaultQueue",
          "type": "address[]"
        }
      ],
      "name": "setDefaultQueue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_depositLimit",
          "type": "uint256"
        }
      ],
      "name": "setDepositLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_depositLimitModule",
          "type": "address"
        }
      ],
      "name": "setDepositLimitModule",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minimumTotalIdle",
          "type": "uint256"
        }
      ],
      "name": "setMinimumTotalIdle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newProfitMaxUnlockTime",
          "type": "uint256"
        }
      ],
      "name": "setProfitMaxUnlockTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_useDefaultQueue",
          "type": "bool"
        }
      ],
      "name": "setUseDefaultQueue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_withdrawLimitModule",
          "type": "address"
        }
      ],
      "name": "setWithdrawLimitModule",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setters",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sharesManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "shutdown",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "strategies",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "activation",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastReport",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "currentDebt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxDebt",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "strategyManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDebtAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalIdleAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupplyAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "useDefaultQueue",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawLimitModule",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x205070e327e6cdbe521101c2223db26322b054e6b951bd417c92adf35ae45f58",
  "receipt": {
    "to": null,
    "from": "0xCB409e1A857318378137dFb42a06Ae87290631aD",
    "contractAddress": "0xD8E148D42CAfbff410B470A7382E9db9B9Ec5Ed5",
    "transactionIndex": 2,
    "gasUsed": "1707467",
    "logsBloom": "0x
    "blockHash": "0x7e7d1c0fe9d1d9f605f94b2dfc7fc6c765e1c0a65924511bd359df606cc53f3e",
    "transactionHash": "0x205070e327e6cdbe521101c2223db26322b054e6b951bd417c92adf35ae45f58",
    "logs": [],
    "blockNumber": 57592463,
    "cumulativeGasUsed": "2808835",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x3C1FDB4342C0443aa9D8A3803c3981F149b9BDDc"
  ],
  "numDeployments": 2,
  "solcInputHash": "880edf3a5f941ba519f3f64226bcec03",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sharesManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InactiveStrategy\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProfitUnlockTimeTooLong\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StrategyIsShutdown\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UsingDepositLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UsingModule\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DebtPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentDebt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDebt\",\"type\":\"uint256\"}],\"name\":\"DebtUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"RoleSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"enum RoleStatusChange\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"RoleStatusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Shutdown\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum StrategyChangeType\",\"name\":\"changeType\",\"type\":\"uint8\"}],\"name\":\"StrategyChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gain\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loss\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentDebt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protocolFees\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalFees\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalRefunds\",\"type\":\"uint256\"}],\"name\":\"StrategyReported\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"accountant\",\"type\":\"address\"}],\"name\":\"UpdateAccountant\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"newDefaultQueue\",\"type\":\"address[]\"}],\"name\":\"UpdateDefaultQueue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositLimit\",\"type\":\"uint256\"}],\"name\":\"UpdateDepositLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositLimitModule\",\"type\":\"address\"}],\"name\":\"UpdateDepositLimitModule\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minimumTotalIdle\",\"type\":\"uint256\"}],\"name\":\"UpdateMinimumTotalIdle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profitMaxUnlockTime\",\"type\":\"uint256\"}],\"name\":\"UpdateProfitMaxUnlockTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"roleManager\",\"type\":\"address\"}],\"name\":\"UpdateRoleManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"useDefaultQueue\",\"type\":\"bool\"}],\"name\":\"UpdateUseDefaultQueue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"withdrawLimitModule\",\"type\":\"address\"}],\"name\":\"UpdateWithdrawLimitModule\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDebt\",\"type\":\"uint256\"}],\"name\":\"UpdatedMaxDebtForStrategy\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ACCOUNTANT_MANAGER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ADD_STRATEGY_MANAGER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"API_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEBT_MANAGER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEBT_PURCHASER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEPOSIT_LIMIT_MANAGER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPE_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EMERGENCY_MANAGER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FORCE_REVOKE_MANAGER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_BPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_BPS_EXTENDED\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_DEBT_MANAGER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_QUEUE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINIMUM_IDLE_MANAGER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ONE_YEAR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPE_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROFIT_UNLOCK_MANAGER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"QUEUE_MANAGER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REPORTING_MANAGER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REVOKE_STRATEGY_MANAGER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROLE_MANAGER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAW_LIMIT_MANAGER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accountant\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"defaultQueue\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositLimitModule\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fullProfitUnlockDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"futureRoleManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastProfitUpdate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumTotalIdle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"openRoles\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"profitMaxUnlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"profitUnlockingRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roleManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"roles\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAccountant\",\"type\":\"address\"}],\"name\":\"setAccountant\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"newDefaultQueue\",\"type\":\"address[]\"}],\"name\":\"setDefaultQueue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositLimit\",\"type\":\"uint256\"}],\"name\":\"setDepositLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositLimitModule\",\"type\":\"address\"}],\"name\":\"setDepositLimitModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimumTotalIdle\",\"type\":\"uint256\"}],\"name\":\"setMinimumTotalIdle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newProfitMaxUnlockTime\",\"type\":\"uint256\"}],\"name\":\"setProfitMaxUnlockTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_useDefaultQueue\",\"type\":\"bool\"}],\"name\":\"setUseDefaultQueue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_withdrawLimitModule\",\"type\":\"address\"}],\"name\":\"setWithdrawLimitModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setters\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sharesManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shutdown\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"strategies\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"activation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastReport\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategyManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDebtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalIdleAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupplyAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"useDefaultQueue\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawLimitModule\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"title\":\"SETTERS CONTRACT\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Setters.sol\":\"Setters\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":10},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd6e52cb394d7f5abe5dca2d4908a6be40417914720932de757de34a99ab87f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/Interfaces/IERC4626.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC4626.sol)\\n\\npragma solidity ^0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC4626 \\\"Tokenized Vault Standard\\\", as defined in\\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\\n *\\n * _Available since v4.7._\\n */\\ninterface IERC4626 is IERC20, IERC20Metadata {\\n    // solhint-disable ordering\\n    // solhint-disable max-line-length\\n    event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\\n\\n    event Withdraw(\\n        address indexed sender,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /**\\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\\n     *\\n     * - MUST be an ERC-20 token contract.\\n     * - MUST NOT revert.\\n     */\\n    function asset() external view returns (address assetTokenAddress);\\n\\n    /**\\n     * @dev Returns the total amount of the underlying asset that is \\u201cmanaged\\u201d by Vault.\\n     *\\n     * - SHOULD include any compounding that occurs from yield.\\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT revert.\\n     */\\n    function totalAssets() external view returns (uint256 totalManagedAssets);\\n\\n    /**\\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\\n     * through a deposit call.\\n     *\\n     * - MUST return a limited value if receiver is subject to some deposit limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\\n     * - MUST NOT revert.\\n     */\\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\\n     *   in the same transaction.\\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   deposit execution, and are accounted for during deposit.\\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\\n     * - MUST return a limited value if receiver is subject to some mint limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\\n     * - MUST NOT revert.\\n     */\\n    function maxMint(address receiver) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\\n     *   same transaction.\\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\\n     */\\n    function previewMint(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\\n     *   execution, and are accounted for during mint.\\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\\n     * Vault, through a withdraw call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxWithdraw(address owner, uint256 maxLoss, address[] memory strategies) external returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\\n     *   called\\n     *   in the same transaction.\\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   withdraw execution, and are accounted for during withdraw.\\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function withdraw(uint256 assets, address receiver, address owner, uint256 maxLoss, address[] memory strategies) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\\n     * through a redeem call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxRedeem(address owner, uint256 maxLoss, address[] memory strategies) external returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\\n     *   same transaction.\\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\\n     */\\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   redeem execution, and are accounted for during redeem.\\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function redeem(uint256 shares, address receiver, address owner, uint256 maxLoss, address[] memory strategies) external returns (uint256 assets);\\n}\",\"keccak256\":\"0xe2e626a58bddb0c8b459117fcf8f2b746431da070ea8d80d3d56bca5f1c8fa1d\",\"license\":\"MIT\"},\"contracts/Interfaces/ISetters.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.16;\\n\\ninterface ISetters {\\n    function setAccountant(address newAccountant) external;\\n    function setDefaultQueue(address[] calldata newDefaultQueue) external;\\n    function setUseDefaultQueue(bool _useDefaultQueue) external;\\n    function setDepositLimit(uint256 _depositLimit) external;\\n    function setDepositLimitModule(address _depositLimitModule) external;\\n    function setWithdrawLimitModule(address _withdrawLimitModule) external;\\n    function setMinimumTotalIdle(uint256 _minimumTotalIdle) external;\\n    function setProfitMaxUnlockTime(uint256 _newProfitMaxUnlockTime) external;\\n}\",\"keccak256\":\"0x26b5657a6505c7ecaf36e1b5d67e7757689efffbfc18a3ae1df29289dc735c05\",\"license\":\"GPL-3.0\"},\"contracts/Interfaces/ISharesManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.16;\\n\\nimport \\\"../VaultStructs.sol\\\";\\nimport {IERC4626} from \\\"./IERC4626.sol\\\";\\n\\ninterface ISharesManager is IERC4626 {\\n    // solhint-disable max-line-length\\n    // solhint-disable ordering\\n\\n    function balanceOf(address addr) external view returns (uint256);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function spendAllowance(address owner, address spender, uint256 amount) external;\\n    function transfer(address sender, address receiver, uint256 amount) external;\\n    function transferFrom(address sender, address receiver, uint256 amount) external returns (bool);\\n    function approve(address owner, address spender, uint256 amount) external returns (bool);\\n    function increaseAllowance(address owner, address spender, uint256 amount) external returns (bool);\\n    function decreaseAllowance(address owner, address spender, uint256 amount) external returns (bool);\\n    function permit(address owner, address spender, uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external returns (bool);\\n    function burnShares(uint256 shares, address owner) external;\\n    function unlockedShares() external view returns (uint256);\\n    function totalSupply() external view returns (uint256);\\n    function burnUnlockedShares() external;\\n    function totalAssets() external view returns (uint256);\\n    function convertToAssets(uint256 shares, Rounding rounding) external view returns (uint256);\\n    function convertToShares(uint256 assets, Rounding rounding) external view returns (uint256);\\n    function erc20SafeApprove(address token, address spender, uint256 amount) external;\\n    function erc20SafeTransferFrom(address token, address sender, address receiver, uint256 amount) external;\\n    function erc20SafeTransfer(address token, address receiver, uint256 amount) external;\\n    function issueShares(uint256 shares, address recipient) external;\\n    function issueSharesForAmount(uint256 amount, address recipient) external returns (uint256);\\n    function maxDeposit(address receiver) external view returns (uint256);\\n    function maxWithdraw(address owner, uint256 _maxLoss, address[] memory _strategies) external returns (uint256);\\n    function deposit(address sender, address recipient, uint256 assets) external returns (uint256);\\n    function mint(address sender, address recipient, uint256 shares) external returns (uint256);\\n    function assessShareOfUnrealisedLosses(address strategy, uint256 assetsNeeded) external view returns (uint256);\\n    function withdrawFromStrategy(address strategy, uint256 assetsToWithdraw) external;\\n    function calculateShareManagement(uint256 loss, uint256 totalFees, uint256 protocolFees) external returns (ShareManagement memory shareManagement);\\n    function handleShareBurnsAndIssues(ShareManagement memory shares, FeeAssessment memory fees, uint256 gain, uint256 loss, address strategy) external returns (uint256 , uint256);\\n    function manageUnlockingOfShares(uint256 previouslyLockedShares, uint256 newlyLockedShares) external;\\n    function setDepositLimit(uint256 _depositLimit) external;\\n    function getTotalIdleAmount() external returns (uint256);\\n    function setTotalIdleAmount(uint256 totalIdleAmount) external;\\n    function getMinimumTotalIdle() external returns (uint256);\\n    function setMinimumTotalIdle(uint256 minimumTotalIdle) external;\\n    function setTotalDebtAmount(uint256 totalDebtAmount) external;\\n    function depositToStrategy(address strategy, uint256 assetsToDeposit) external;\\n}\",\"keccak256\":\"0xfa000901939ba856471c33032f0d8c841c01ad3990c2f3c8cc7846c08e0bc65e\",\"license\":\"GPL-3.0\"},\"contracts/Interfaces/IVaultEvents.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL 3.0\\n// Copyright Fathom 2023\\n\\npragma solidity ^0.8.16;\\n\\nimport \\\"../VaultStructs.sol\\\";\\n\\ninterface IVaultEvents {\\n    // STRATEGY EVENTS\\n    event StrategyChanged(address indexed strategy, StrategyChangeType changeType);\\n    event StrategyReported(\\n        address indexed strategy,\\n        uint256 gain,\\n        uint256 loss,\\n        uint256 currentDebt,\\n        uint256 protocolFees,\\n        uint256 totalFees,\\n        uint256 totalRefunds\\n    );\\n    // DEBT MANAGEMENT EVENTS\\n    event DebtUpdated(\\n        address indexed strategy,\\n        uint256 currentDebt,\\n        uint256 newDebt\\n    );\\n    // ROLE UPDATES\\n    event RoleSet(address indexed account, bytes32 role);\\n    event RoleStatusChanged(bytes32 indexed role, RoleStatusChange indexed status);\\n    event UpdateRoleManager(address indexed roleManager);\\n\\n    event UpdateAccountant(address indexed accountant);\\n    event UpdateDefaultQueue(address[] newDefaultQueue);\\n    event UpdateUseDefaultQueue(bool useDefaultQueue);\\n    event UpdatedMaxDebtForStrategy(\\n        address indexed sender,\\n        address indexed strategy,\\n        uint256 newDebt\\n    );\\n    event UpdateDepositLimit(uint256 depositLimit);\\n    event UpdateMinimumTotalIdle(uint256 minimumTotalIdle);\\n    event UpdateProfitMaxUnlockTime(uint256 profitMaxUnlockTime);\\n    event DebtPurchased(address indexed strategy, uint256 amount);\\n    event Shutdown();\\n\\n    // STORAGE MANAGEMENT EVENTS\\n    event UpdateDepositLimitModule(address indexed depositLimitModule);\\n    event UpdateWithdrawLimitModule(address indexed withdrawLimitModule);\\n}\",\"keccak256\":\"0x809fab69d54383c6137fea5d99022f5c3773701f9c7ae46235ab354aaf5d0702\",\"license\":\"AGPL 3.0\"},\"contracts/Setters.sol\":{\"content\":\"// SPDX-License-Identifier: GNU AGPLv3\\npragma solidity ^0.8.16;\\n\\nimport \\\"./VaultStorage.sol\\\";\\nimport \\\"./Interfaces/IVaultEvents.sol\\\";\\nimport \\\"./Interfaces/ISetters.sol\\\";\\nimport \\\"./Interfaces/ISharesManager.sol\\\";\\nimport {AccessControl} from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\n/**\\n@title SETTERS CONTRACT\\n*/\\n\\ncontract Setters is AccessControl, VaultStorage, IVaultEvents, ISetters {\\n    // solhint-disable not-rely-on-time\\n    // solhint-disable var-name-mixedcase\\n    // solhint-disable function-max-lines\\n    // solhint-disable code-complexity\\n    // solhint-disable max-line-length\\n\\n    error InactiveStrategy();\\n    error StrategyIsShutdown();\\n    error UsingModule();\\n    error UsingDepositLimit();\\n    error ProfitUnlockTimeTooLong();\\n\\n    constructor(\\n        address _sharesManager\\n    ) {\\n        sharesManager = _sharesManager;\\n    }\\n\\n    // @notice Set the new accountant address.\\n    // @param new_accountant The new accountant address.\\n    function setAccountant(address newAccountant) external override onlyRole(ACCOUNTANT_MANAGER) {\\n        accountant = newAccountant;\\n        emit UpdateAccountant(newAccountant);\\n    }\\n\\n    // @notice Set the new default queue array.\\n    // @dev Will check each strategy to make sure it is active.\\n    // @param new_default_queue The new default queue array.\\n    function setDefaultQueue(address[] calldata newDefaultQueue) external override onlyRole(QUEUE_MANAGER) {\\n        // Make sure every strategy in the new queue is active.\\n        for (uint256 i = 0; i < newDefaultQueue.length; i++) {\\n            address strategy = newDefaultQueue[i];\\n            if (strategies[strategy].activation == 0) {\\n                revert InactiveStrategy();\\n            }\\n        }\\n        // Save the new queue.\\n        defaultQueue = newDefaultQueue;\\n        emit UpdateDefaultQueue(newDefaultQueue);\\n    }\\n\\n    // @notice Set a new value for `use_default_queue`.\\n    // @dev If set `True` the default queue will always be\\n    //  used no matter whats passed in.\\n    // @param use_default_queue new value.\\n    function setUseDefaultQueue(bool _useDefaultQueue) external override onlyRole(QUEUE_MANAGER) {\\n        useDefaultQueue = _useDefaultQueue;\\n        emit UpdateUseDefaultQueue(_useDefaultQueue);\\n    }\\n\\n    // @notice Set the new deposit limit.\\n    // @dev Can not be changed if a deposit_limit_module\\n    //  is set or if shutdown.\\n    // @param deposit_limit The new deposit limit.\\n    function setDepositLimit(uint256 _depositLimit) external override {\\n        if (shutdown == true) {\\n            revert StrategyIsShutdown();\\n        }\\n        if (depositLimitModule != address(0)) {\\n            revert UsingModule();\\n        }\\n        depositLimit = _depositLimit;\\n        emit UpdateDepositLimit(_depositLimit);\\n    }\\n\\n    // @notice Set a contract to handle the deposit limit.\\n    // @dev The default `deposit_limit` will need to be set to\\n    //  max uint256 since the module will override it.\\n    // @param deposit_limit_module Address of the module.\\n    function setDepositLimitModule(address _depositLimitModule) external override onlyRole(DEPOSIT_LIMIT_MANAGER) {\\n        if (shutdown == true) {\\n            revert StrategyIsShutdown();\\n        }\\n        if (depositLimit != type(uint256).max) {\\n            revert UsingDepositLimit();\\n        }\\n        depositLimitModule = _depositLimitModule;\\n        emit UpdateDepositLimitModule(_depositLimitModule);\\n    }\\n\\n    // @notice Set a contract to handle the withdraw limit.\\n    // @dev This will override the default `max_withdraw`.\\n    // @param withdraw_limit_module Address of the module.\\n    function setWithdrawLimitModule(address _withdrawLimitModule) external override onlyRole(WITHDRAW_LIMIT_MANAGER) {\\n        withdrawLimitModule = _withdrawLimitModule;\\n        emit UpdateWithdrawLimitModule(_withdrawLimitModule);\\n    }\\n\\n    // @notice Set the new minimum total idle.\\n    // @param minimum_total_idle The new minimum total idle.\\n    function setMinimumTotalIdle(uint256 _minimumTotalIdle) external override onlyRole(MINIMUM_IDLE_MANAGER) {\\n        minimumTotalIdle = _minimumTotalIdle;\\n        emit UpdateMinimumTotalIdle(_minimumTotalIdle);\\n    }\\n\\n    // @notice Set the new profit max unlock time.\\n    // @dev The time is denominated in seconds and must be less than 1 year.\\n    //  We only need to update locking period if setting to 0,\\n    //  since the current period will use the old rate and on the next\\n    //  report it will be reset with the new unlocking time.\\n    \\n    //  Setting to 0 will cause any currently locked profit to instantly\\n    //  unlock and an immediate increase in the vaults Price Per Share.\\n\\n    // @param new_profit_max_unlock_time The new profit max unlock time.\\n    function setProfitMaxUnlockTime(uint256 _newProfitMaxUnlockTime) external override onlyRole(PROFIT_UNLOCK_MANAGER) {\\n        // Must be less than one year for report cycles\\n        if (_newProfitMaxUnlockTime > ONE_YEAR) {\\n            revert ProfitUnlockTimeTooLong();\\n        }\\n\\n        // If setting to 0 we need to reset any locked values.\\n        if (_newProfitMaxUnlockTime == 0) {\\n            // Burn any shares the vault still has.\\n            ISharesManager(sharesManager).burnShares(_balanceOf[address(this)], address(this));\\n            // Reset unlocking variables to 0.\\n            profitUnlockingRate = 0;\\n            fullProfitUnlockDate = 0;\\n        }\\n        profitMaxUnlockTime = _newProfitMaxUnlockTime;\\n        emit UpdateProfitMaxUnlockTime(_newProfitMaxUnlockTime);\\n    }\\n}\\n    \",\"keccak256\":\"0x82cf75ebe2330ee57ae59984bc0a6b369dbd82ff37e9393ff98738a696fa604d\",\"license\":\"GNU AGPLv3\"},\"contracts/VaultStorage.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL 3.0\\n// Copyright Fathom 2023\\n\\npragma solidity ^0.8.16;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./VaultStructs.sol\\\";\\n\\ncontract VaultStorage {\\n    // CONSTANTS\\n    // The max length the withdrawal queue can be.\\n    uint256 public constant MAX_QUEUE = 10;\\n    // 100% in Basis Points.\\n    uint256 public constant MAX_BPS = 10000;\\n    // Extended for profit locking calculations.\\n    uint256 public constant MAX_BPS_EXTENDED = 1000000000000;\\n    // The version of this vault.\\n    string public constant API_VERSION = \\\"1.0.0\\\";\\n    uint256 public immutable ONE_YEAR = 31556952;\\n\\n    address public strategyManager;\\n    address public sharesManager;\\n    address public setters;\\n    address public governance;\\n\\n    // STORAGE\\n    // HashMap that records all the strategies that are allowed to receive assets from the vault.\\n    mapping(address => StrategyParams) public strategies;\\n\\n    // The current default withdrawal queue.\\n    address[] public defaultQueue;\\n\\n    // Should the vault use the default_queue regardless whats passed in.\\n    bool public useDefaultQueue;\\n\\n    // ERC20 - amount of shares per account\\n    mapping(address => uint256) internal _balanceOf;\\n    // ERC20 - owner -> (spender -> amount)\\n    mapping(address => mapping(address => uint256)) internal _allowance;\\n\\n    // Total amount of shares that are currently minted including those locked.\\n    // NOTE: To get the ERC20 compliant version use totalSupply().\\n    uint256 public totalSupplyAmount;\\n\\n    // Total amount of assets that has been deposited in strategies.\\n    uint256 public totalDebtAmount;\\n    // Current assets held in the vault contract. Replacing balanceOf(this) to avoid price_per_share manipulation.\\n    uint256 public totalIdleAmount;\\n    // Minimum amount of assets that should be kept in the vault contract to allow for fast, cheap redeems.\\n    uint256 public minimumTotalIdle;\\n    // Maximum amount of tokens that the vault can accept. If totalAssets > deposit_limit, deposits will revert.\\n    uint256 public depositLimit;\\n    // Contract that charges fees and can give refunds.\\n    address public accountant;\\n    // Contract to control the deposit limit.\\n    address public depositLimitModule;\\n    // Contract to control the withdraw limit.\\n    address public withdrawLimitModule;\\n\\n    // HashMap mapping addresses to their roles\\n    mapping(address => bytes32) public roles;\\n    // HashMap mapping roles to their permissioned state. If false, the role is not open to the public.\\n    mapping(bytes32 => bool) public openRoles;\\n\\n    // Address that can add and remove roles to addresses.\\n    address public roleManager;\\n    // Temporary variable to store the address of the next role_manager until the role is accepted.\\n    address public futureRoleManager;\\n\\n    // State of the vault - if set to true, only withdrawals will be available. It can't be reverted.\\n    bool public shutdown;\\n    // The amount of time profits will unlock over.\\n    uint256 public profitMaxUnlockTime;\\n    // The timestamp of when the current unlocking period ends.\\n    uint256 public fullProfitUnlockDate;\\n    // The per second rate at which profit will unlock.\\n    uint256 public profitUnlockingRate;\\n    // Last timestamp of the most recent profitable report.\\n    uint256 public lastProfitUpdate;\\n\\n    // EIP-2612 permit() nonces and typehashes\\n    mapping(address => uint256) public nonces;\\n    bytes32 public constant DOMAIN_TYPE_HASH = keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n    bytes32 public DOMAIN_SEPARATOR;\\n    bytes32 public constant PERMIT_TYPE_HASH = keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    // Roles\\n    bytes32 public constant ACCOUNTANT_MANAGER = keccak256(\\\"ACCOUNTANT_MANAGER\\\");\\n    bytes32 public constant QUEUE_MANAGER = keccak256(\\\"QUEUE_MANAGER\\\");\\n    bytes32 public constant DEPOSIT_LIMIT_MANAGER = keccak256(\\\"DEPOSIT_LIMIT_MANAGER\\\");\\n    bytes32 public constant WITHDRAW_LIMIT_MANAGER = keccak256(\\\"WITHDRAW_LIMIT_MANAGER\\\");\\n    bytes32 public constant MINIMUM_IDLE_MANAGER = keccak256(\\\"MINIMUM_IDLE_MANAGER\\\");\\n    bytes32 public constant PROFIT_UNLOCK_MANAGER = keccak256(\\\"PROFIT_UNLOCK_MANAGER\\\");\\n    bytes32 public constant ROLE_MANAGER = keccak256(\\\"ROLE_MANAGER\\\");\\n    bytes32 public constant REPORTING_MANAGER = keccak256(\\\"REPORTING_MANAGER\\\");\\n    bytes32 public constant DEBT_PURCHASER = keccak256(\\\"DEBT_PURCHASER\\\");\\n    bytes32 public constant ADD_STRATEGY_MANAGER = keccak256(\\\"ADD_STRATEGY_MANAGER\\\");\\n    bytes32 public constant REVOKE_STRATEGY_MANAGER = keccak256(\\\"REVOKE_STRATEGY_MANAGER\\\");\\n    bytes32 public constant FORCE_REVOKE_MANAGER = keccak256(\\\"FORCE_REVOKE_MANAGER\\\");\\n    bytes32 public constant MAX_DEBT_MANAGER = keccak256(\\\"MAX_DEBT_MANAGER\\\");\\n    bytes32 public constant DEBT_MANAGER = keccak256(\\\"DEBT_MANAGER\\\");\\n    bytes32 public constant EMERGENCY_MANAGER = keccak256(\\\"EMERGENCY_MANAGER\\\");         \\n}\",\"keccak256\":\"0x5efb8345e199739fe5a9374f1a53f9542ce7c841cb1b20ea68fb1892b3550b32\",\"license\":\"AGPL 3.0\"},\"contracts/VaultStructs.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL 3.0\\n// Copyright Fathom 2023\\n\\npragma solidity ^0.8.16;\\n\\nstruct StrategyParams {\\n    uint256 activation;\\n    uint256 lastReport;\\n    uint256 currentDebt;\\n    uint256 maxDebt;\\n}\\n\\nstruct FeeAssessment {\\n    uint256 totalFees;\\n    uint256 totalRefunds;\\n    uint256 protocolFees;\\n    address protocolFeeRecipient;\\n}\\n\\nstruct ShareManagement {\\n    uint256 sharesToBurn;\\n    uint256 accountantFeesShares;\\n    uint256 protocolFeesShares;\\n}\\n\\nstruct WithdrawalState {\\n    uint256 requestedAssets;\\n    uint256 currTotalIdle;\\n    uint256 currTotalDebt;\\n    uint256 assetsNeeded;\\n    uint256 previousBalance;\\n    uint256 unrealisedLossesShare;\\n}\\n\\n// ENUMS\\nenum StrategyChangeType {\\n    ADDED, // Corresponds to the strategy being added.\\n    REVOKED // Corresponds to the strategy being revoked.\\n}\\n\\nenum RoleStatusChange {\\n    OPENED, // Corresponds to a role being opened.\\n    CLOSED // Corresponds to a role being closed.\\n}\\n\\nenum Rounding {\\n    ROUND_DOWN, // Corresponds to rounding down to the nearest whole number.\\n    ROUND_UP // Corresponds to rounding up to the nearest whole number.\\n}\",\"keccak256\":\"0x98a7128599e8f99c1be3515d79e4aff06cd0d604b6b10d13f87ffe1210330cc4\",\"license\":\"AGPL 3.0\"}},\"version\":1}",
  "bytecode": "0x60a06040526301e185586080523480156200001957600080fd5b50604051620018a8380380620018a88339810160408190526200003c916200009c565b600280546001600160a01b0319166001600160a01b0392909216919091179055620000c9565b60006001600160a01b0382165b92915050565b620000808162000062565b81146200008c57600080fd5b50565b80516200006f8162000075565b600060208284031215620000b357620000b3600080fd5b6000620000c184846200008f565b949350505050565b6080516117bc620000ec600039600081816103920152610d6201526117bc6000f3fe608060405234801561001057600080fd5b50600436106102e45760003560e01c80637ecebe001161018f5780637ecebe00146105d25780638212fd43146105f25780638afca8f014610605578063919860031461060e57806391d148541461062157806399374642146106345780639bbca884146106545780639e34e348146106675780639f3988f31461067a578063a217fddf146106a1578063a98222c4146106a9578063ab5b4d49146106be578063acded97d146106e5578063b3c187f2146106f8578063bbe4eb491461070b578063bdc8144b14610718578063bee7e3d91461072b578063c065ca071461073e578063c0993eea14610765578063c8d74b601461078c578063c8dffa95146107b3578063d4ae064f146107bc578063d547741f146107d1578063df69b22a146107e4578063ecf70858146107f7578063f1daeba814610800578063f5b944eb14610827578063f828f50b1461084e578063fc0e74d114610857578063fd967f471461086b578063fec61f0614610874578063ff1e7f081461089b57600080fd5b8062435da5146102e957806301ffc9a71461031257806303dcd12c146103325780630835a3fc146103665780630952864e1461036f5780630ad283d01461037857806316d3bfbb1461038d578063248a9ca3146103b45780632d632692146103c75780632d772168146103d05780632f2ff15d146103e55780633644e515146103f857806336568abe1461040157806336fba0841461041457806339b70e381461042057806339ebf823146104335780633cd7b5ab146104785780633f7b5e401461048157806348ea7127146104895780634bbd71e91461049c5780634ce1d38a146104af5780634cfe51dc146104c45780634d4bb197146104d95780634fb3ccc5146105005780635141eebb1461051357806353a661321461051c5780635aa6e6751461053f5780635bf6b4fb14610552578063633f228c14610579578063652da3241461058c57806377e3b267146105a1575b600080fd5b6014546102fc906001600160a01b031681565b60405161030991906111f0565b60405180910390f35b610325610320366004611220565b6108ae565b6040516103099190611251565b6103597f633076a97f32ae349b28772e7b1483f67a926f150cbc501d02bdbd77389325ab81565b6040516103099190611265565b610359600d5481565b61035960165481565b6103596000805160206116e783398151915281565b6103597f000000000000000000000000000000000000000000000000000000000000000081565b6103596103c2366004611284565b6108e5565b61035960175481565b6103e36103de3660046112b9565b6108fa565b005b6103e36103f33660046112da565b6109b0565b610359601b5481565b6103e361040f3660046112da565b6109d1565b61035964e8d4a5100081565b6001546102fc906001600160a01b031681565b6104686104413660046112b9565b60056020526000908152604090208054600182015460028301546003909301549192909184565b6040516103099493929190611317565b610359600c5481565b610359600a81565b6103e36104973660046112b9565b610a10565b6103e36104aa3660046112b9565b610a73565b61035960008051602061176783398151915281565b61035960008051602061170783398151915281565b6103597f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b600f546102fc906001600160a01b031681565b61035960185481565b61032561052a366004611284565b60136020526000908152604090205460ff1681565b6004546102fc906001600160a01b031681565b6103597fea672c1c09cd95c51af9509f646f3615ff0071aae8652bd821471ee9037fd72c81565b6103e36105873660046113a6565b610ad6565b6103596000805160206116c783398151915281565b6105c5604051806040016040528060058152602001640312e302e360dc1b81525081565b6040516103099190611443565b6103596105e03660046112b9565b601a6020526000908152604090205481565b6103e3610600366004611284565b610bbb565b61035960195481565b6011546102fc906001600160a01b031681565b61032561062f3660046112da565b610c14565b6103596106423660046112b9565b60126020526000908152604090205481565b6103e3610662366004611467565b610c3d565b6010546102fc906001600160a01b031681565b6103597f6f430d649a8640e48ff9bfbc353b3f99ed630163857821b3b4075e3871dafbf581565b610359600081565b61035960008051602061174783398151915281565b6103597f900d80def0427daac599092fcb16b21808ec68dd9a2e1eae89d1e8db2135737581565b6002546102fc906001600160a01b031681565b6015546102fc906001600160a01b031681565b6007546103259060ff1681565b6103e3610726366004611284565b610c93565b6003546102fc906001600160a01b031681565b6103597f2a0e761830cc61f2707ea7bb138008bf9dda7f7d34c77736d0a116604e95ea1681565b6103597f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81565b6103597f152ebba56b9738ee3d8baea1b76fa31dcdcd79b1929bfea7d58ee12cfdf1a65381565b610359600b5481565b61035960008051602061172783398151915281565b6103e36107df3660046112da565b610d2c565b6103e36107f2366004611284565b610d48565b610359600e5481565b6103597f7cbb3cdf689b8ea3e9d265f66bc4e0a99069268217017d38d2a5a559abc6271981565b6103597ff206625bad3d9112d5609b8d356e6fbd514cd1f69980d4ce2b3e6e68e1789ace81565b610359600a5481565b60155461032590600160a01b900460ff1681565b61035961271081565b6103597fd45f7ccff42f059d4e47c3f027c444272257266f7e88b981e142f0aa38fbfd7881565b6102fc6108a9366004611284565b610e5b565b60006001600160e01b03198216637965db0b60e01b14806108df57506301ffc9a760e01b6001600160e01b03198316145b92915050565b60009081526020819052604090206001015490565b60008051602061174783398151915261091281610e85565b601554600160a01b900460ff16151560010361094157604051630f3c386760e01b815260040160405180910390fd5b600019600e541461096557604051634e41418560e11b815260040160405180910390fd5b601080546001600160a01b0319166001600160a01b0384169081179091556040517f777d215db24fb9fee4ded85c66b422abd7162a1caa6ed3ec4c031f6cd29ada5290600090a25050565b6109b9826108e5565b6109c281610e85565b6109cc8383610e92565b505050565b6001600160a01b0381163314610a025760405162461bcd60e51b81526004016109f990611488565b60405180910390fd5b610a0c8282610f16565b5050565b6000805160206116c7833981519152610a2881610e85565b600f80546001600160a01b0319166001600160a01b0384169081179091556040517f28709a2dab2a5d5e8688e96159011151c51644ab21839a8a45b449634d7c8b2b90600090a25050565b600080516020611767833981519152610a8b81610e85565b601180546001600160a01b0319166001600160a01b0384169081179091556040517fce6e3f8beda82a13c441d76efd4a6335760f219f38c60502e6680060874e109d90600090a25050565b600080516020611707833981519152610aee81610e85565b60005b82811015610b6f576000848483818110610b0d57610b0d6114db565b9050602002016020810190610b2291906112b9565b6001600160a01b03811660009081526005602052604081205491925003610b5c57604051630631bc2160e51b815260040160405180910390fd5b5080610b6781611507565b915050610af1565b50610b7c60068484611158565b507f0bc0cb8c5ccee13e6a2fd26a699f57ad7ff6e454e6aae97ec41cd2eb9ebd63a58383604051610bae92919061158c565b60405180910390a1505050565b6000805160206116e7833981519152610bd381610e85565b600d8290556040517f01a4494beed88920b88742cc58f2744e198f55ff192635a1fbabc6be8ffade8190610c08908490611265565b60405180910390a15050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b600080516020611707833981519152610c5581610e85565b6007805460ff19168315151790556040517f1f88e73ebc721f227812938fe07a069ec1f7136aafacb397ed460bd15dee13f190610c08908490611251565b601554600160a01b900460ff161515600103610cc257604051630f3c386760e01b815260040160405180910390fd5b6010546001600160a01b031615610cec576040516364b9991160e11b815260040160405180910390fd5b600e8190556040517fae565aab888bca5e19e25a13db7b0c9144305bf55cb0f3f4d724f730e5acdd6290610d21908390611265565b60405180910390a150565b610d35826108e5565b610d3e81610e85565b6109cc8383610f16565b600080516020611727833981519152610d6081610e85565b7f0000000000000000000000000000000000000000000000000000000000000000821115610da15760405163fdfbb0b760e01b815260040160405180910390fd5b81600003610e265760025430600081815260086020526040908190205490516326459fed60e21b81526001600160a01b03909316926399167fb492610de9929160040161159e565b600060405180830381600087803b158015610e0357600080fd5b505af1158015610e17573d6000803e3d6000fd5b50506000601881905560175550505b60168290556040517ff361aed463da6fa20358e45c6209f1d3e16d4eca706e6eab0b0aeb338729c77a90610c08908490611265565b60068181548110610e6b57600080fd5b6000918252602090912001546001600160a01b0316905081565b610e8f8133610f7b565b50565b610e9c8282610c14565b610a0c576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055610ed23390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b610f208282610c14565b15610a0c576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b610f858282610c14565b610a0c57610f9281610fd4565b610f9d836020610fe6565b604051602001610fae9291906115db565b60408051601f198184030181529082905262461bcd60e51b82526109f991600401611443565b60606108df6001600160a01b03831660145b60606000610ff583600261162d565b61100090600261164c565b6001600160401b038111156110175761101761165f565b6040519080825280601f01601f191660200182016040528015611041576020820181803683370190505b509050600360fc1b8160008151811061105c5761105c6114db565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061108b5761108b6114db565b60200101906001600160f81b031916908160001a90535060006110af84600261162d565b6110ba90600161164c565b90505b6001811115611132576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106110ee576110ee6114db565b1a60f81b828281518110611104576111046114db565b60200101906001600160f81b031916908160001a90535060049490941c9361112b81611675565b90506110bd565b5083156111515760405162461bcd60e51b81526004016109f99061168c565b9392505050565b8280548282559060005260206000209081019282156111ab579160200282015b828111156111ab5781546001600160a01b0319166001600160a01b03843516178255602090920191600190910190611178565b506111b79291506111bb565b5090565b5b808211156111b757600081556001016111bc565b60006001600160a01b0382166108df565b6111ea816111d0565b82525050565b602081016108df82846111e1565b6001600160e01b031981165b8114610e8f57600080fd5b80356108df816111fe565b60006020828403121561123557611235600080fd5b60006112418484611215565b949350505050565b8015156111ea565b602081016108df8284611249565b806111ea565b602081016108df828461125f565b8061120a565b80356108df81611273565b60006020828403121561129957611299600080fd5b60006112418484611279565b61120a816111d0565b80356108df816112a5565b6000602082840312156112ce576112ce600080fd5b600061124184846112ae565b600080604083850312156112f0576112f0600080fd5b60006112fc8585611279565b925050602061130d858286016112ae565b9150509250929050565b60808101611325828761125f565b611332602083018661125f565b61133f604083018561125f565b61134c606083018461125f565b95945050505050565b60008083601f84011261136a5761136a600080fd5b5081356001600160401b0381111561138457611384600080fd5b60208301915083602082028301111561139f5761139f600080fd5b9250929050565b600080602083850312156113bc576113bc600080fd5b82356001600160401b038111156113d5576113d5600080fd5b6113e185828601611355565b92509250509250929050565b60005b838110156114085781810151838201526020016113f0565b50506000910152565b600061141b825190565b8084526020840193506114328185602086016113ed565b601f01601f19169290920192915050565b602080825281016111518184611411565b80151561120a565b80356108df81611454565b60006020828403121561147c5761147c600080fd5b6000611241848461145c565b602080825281016108df81602f81527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560208201526e103937b632b9903337b91039b2b63360891b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019820361151a5761151a6114f1565b5060010190565b600061152d83836111e1565b505060200190565b600061115160208401846112ae565b8183526000602084019350818060005b85811015611581576115668284611535565b6115708882611521565b975060208301925050600101611554565b509495945050505050565b60208082528101611241818486611544565b604081016115ac828561125f565b61115160208301846111e1565b60006115c3825190565b6115d18185602086016113ed565b9290920192915050565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b8152601701600061160782856115b9565b7001034b99036b4b9b9b4b733903937b6329607d1b8152601101915061124182846115b9565b6000816000190483118215151615611647576116476114f1565b500290565b808201808211156108df576108df6114f1565b634e487b7160e01b600052604160045260246000fd5b600081611684576116846114f1565b506000190190565b60208082528181019081527f537472696e67733a20686578206c656e67746820696e73756666696369656e746040830152606082016108df56fecd9f023a942ee35097ead74b2505bea9f2c5d47465db92dd195cf7f01a41cfe1c723f4dd6268e1c374639e36d629c765285ee7003913389d582c300f186dde97862f91c9d89d6135b19873b921c90b702cb2e175c371b8430026b9577e691119a18eaea71a088b547b8c932b48861853b3434d9a3240b94466c607e28b6965952f0dbbe8c2c0170206c50ec0cafa1c0dbd03e73e67c2a960178df30a0a30ee2e69d1171ac0a63777a6733cda21aec9ed3d48a4fd11f273c934a691dec5e5589ca2646970667358221220722d8d86afb4e5cef496de28a9e65de9114d8df51d460c2c234e30796b9da54164736f6c63430008100033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102e45760003560e01c80637ecebe001161018f5780637ecebe00146105d25780638212fd43146105f25780638afca8f014610605578063919860031461060e57806391d148541461062157806399374642146106345780639bbca884146106545780639e34e348146106675780639f3988f31461067a578063a217fddf146106a1578063a98222c4146106a9578063ab5b4d49146106be578063acded97d146106e5578063b3c187f2146106f8578063bbe4eb491461070b578063bdc8144b14610718578063bee7e3d91461072b578063c065ca071461073e578063c0993eea14610765578063c8d74b601461078c578063c8dffa95146107b3578063d4ae064f146107bc578063d547741f146107d1578063df69b22a146107e4578063ecf70858146107f7578063f1daeba814610800578063f5b944eb14610827578063f828f50b1461084e578063fc0e74d114610857578063fd967f471461086b578063fec61f0614610874578063ff1e7f081461089b57600080fd5b8062435da5146102e957806301ffc9a71461031257806303dcd12c146103325780630835a3fc146103665780630952864e1461036f5780630ad283d01461037857806316d3bfbb1461038d578063248a9ca3146103b45780632d632692146103c75780632d772168146103d05780632f2ff15d146103e55780633644e515146103f857806336568abe1461040157806336fba0841461041457806339b70e381461042057806339ebf823146104335780633cd7b5ab146104785780633f7b5e401461048157806348ea7127146104895780634bbd71e91461049c5780634ce1d38a146104af5780634cfe51dc146104c45780634d4bb197146104d95780634fb3ccc5146105005780635141eebb1461051357806353a661321461051c5780635aa6e6751461053f5780635bf6b4fb14610552578063633f228c14610579578063652da3241461058c57806377e3b267146105a1575b600080fd5b6014546102fc906001600160a01b031681565b60405161030991906111f0565b60405180910390f35b610325610320366004611220565b6108ae565b6040516103099190611251565b6103597f633076a97f32ae349b28772e7b1483f67a926f150cbc501d02bdbd77389325ab81565b6040516103099190611265565b610359600d5481565b61035960165481565b6103596000805160206116e783398151915281565b6103597f000000000000000000000000000000000000000000000000000000000000000081565b6103596103c2366004611284565b6108e5565b61035960175481565b6103e36103de3660046112b9565b6108fa565b005b6103e36103f33660046112da565b6109b0565b610359601b5481565b6103e361040f3660046112da565b6109d1565b61035964e8d4a5100081565b6001546102fc906001600160a01b031681565b6104686104413660046112b9565b60056020526000908152604090208054600182015460028301546003909301549192909184565b6040516103099493929190611317565b610359600c5481565b610359600a81565b6103e36104973660046112b9565b610a10565b6103e36104aa3660046112b9565b610a73565b61035960008051602061176783398151915281565b61035960008051602061170783398151915281565b6103597f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b600f546102fc906001600160a01b031681565b61035960185481565b61032561052a366004611284565b60136020526000908152604090205460ff1681565b6004546102fc906001600160a01b031681565b6103597fea672c1c09cd95c51af9509f646f3615ff0071aae8652bd821471ee9037fd72c81565b6103e36105873660046113a6565b610ad6565b6103596000805160206116c783398151915281565b6105c5604051806040016040528060058152602001640312e302e360dc1b81525081565b6040516103099190611443565b6103596105e03660046112b9565b601a6020526000908152604090205481565b6103e3610600366004611284565b610bbb565b61035960195481565b6011546102fc906001600160a01b031681565b61032561062f3660046112da565b610c14565b6103596106423660046112b9565b60126020526000908152604090205481565b6103e3610662366004611467565b610c3d565b6010546102fc906001600160a01b031681565b6103597f6f430d649a8640e48ff9bfbc353b3f99ed630163857821b3b4075e3871dafbf581565b610359600081565b61035960008051602061174783398151915281565b6103597f900d80def0427daac599092fcb16b21808ec68dd9a2e1eae89d1e8db2135737581565b6002546102fc906001600160a01b031681565b6015546102fc906001600160a01b031681565b6007546103259060ff1681565b6103e3610726366004611284565b610c93565b6003546102fc906001600160a01b031681565b6103597f2a0e761830cc61f2707ea7bb138008bf9dda7f7d34c77736d0a116604e95ea1681565b6103597f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f81565b6103597f152ebba56b9738ee3d8baea1b76fa31dcdcd79b1929bfea7d58ee12cfdf1a65381565b610359600b5481565b61035960008051602061172783398151915281565b6103e36107df3660046112da565b610d2c565b6103e36107f2366004611284565b610d48565b610359600e5481565b6103597f7cbb3cdf689b8ea3e9d265f66bc4e0a99069268217017d38d2a5a559abc6271981565b6103597ff206625bad3d9112d5609b8d356e6fbd514cd1f69980d4ce2b3e6e68e1789ace81565b610359600a5481565b60155461032590600160a01b900460ff1681565b61035961271081565b6103597fd45f7ccff42f059d4e47c3f027c444272257266f7e88b981e142f0aa38fbfd7881565b6102fc6108a9366004611284565b610e5b565b60006001600160e01b03198216637965db0b60e01b14806108df57506301ffc9a760e01b6001600160e01b03198316145b92915050565b60009081526020819052604090206001015490565b60008051602061174783398151915261091281610e85565b601554600160a01b900460ff16151560010361094157604051630f3c386760e01b815260040160405180910390fd5b600019600e541461096557604051634e41418560e11b815260040160405180910390fd5b601080546001600160a01b0319166001600160a01b0384169081179091556040517f777d215db24fb9fee4ded85c66b422abd7162a1caa6ed3ec4c031f6cd29ada5290600090a25050565b6109b9826108e5565b6109c281610e85565b6109cc8383610e92565b505050565b6001600160a01b0381163314610a025760405162461bcd60e51b81526004016109f990611488565b60405180910390fd5b610a0c8282610f16565b5050565b6000805160206116c7833981519152610a2881610e85565b600f80546001600160a01b0319166001600160a01b0384169081179091556040517f28709a2dab2a5d5e8688e96159011151c51644ab21839a8a45b449634d7c8b2b90600090a25050565b600080516020611767833981519152610a8b81610e85565b601180546001600160a01b0319166001600160a01b0384169081179091556040517fce6e3f8beda82a13c441d76efd4a6335760f219f38c60502e6680060874e109d90600090a25050565b600080516020611707833981519152610aee81610e85565b60005b82811015610b6f576000848483818110610b0d57610b0d6114db565b9050602002016020810190610b2291906112b9565b6001600160a01b03811660009081526005602052604081205491925003610b5c57604051630631bc2160e51b815260040160405180910390fd5b5080610b6781611507565b915050610af1565b50610b7c60068484611158565b507f0bc0cb8c5ccee13e6a2fd26a699f57ad7ff6e454e6aae97ec41cd2eb9ebd63a58383604051610bae92919061158c565b60405180910390a1505050565b6000805160206116e7833981519152610bd381610e85565b600d8290556040517f01a4494beed88920b88742cc58f2744e198f55ff192635a1fbabc6be8ffade8190610c08908490611265565b60405180910390a15050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b600080516020611707833981519152610c5581610e85565b6007805460ff19168315151790556040517f1f88e73ebc721f227812938fe07a069ec1f7136aafacb397ed460bd15dee13f190610c08908490611251565b601554600160a01b900460ff161515600103610cc257604051630f3c386760e01b815260040160405180910390fd5b6010546001600160a01b031615610cec576040516364b9991160e11b815260040160405180910390fd5b600e8190556040517fae565aab888bca5e19e25a13db7b0c9144305bf55cb0f3f4d724f730e5acdd6290610d21908390611265565b60405180910390a150565b610d35826108e5565b610d3e81610e85565b6109cc8383610f16565b600080516020611727833981519152610d6081610e85565b7f0000000000000000000000000000000000000000000000000000000000000000821115610da15760405163fdfbb0b760e01b815260040160405180910390fd5b81600003610e265760025430600081815260086020526040908190205490516326459fed60e21b81526001600160a01b03909316926399167fb492610de9929160040161159e565b600060405180830381600087803b158015610e0357600080fd5b505af1158015610e17573d6000803e3d6000fd5b50506000601881905560175550505b60168290556040517ff361aed463da6fa20358e45c6209f1d3e16d4eca706e6eab0b0aeb338729c77a90610c08908490611265565b60068181548110610e6b57600080fd5b6000918252602090912001546001600160a01b0316905081565b610e8f8133610f7b565b50565b610e9c8282610c14565b610a0c576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055610ed23390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b610f208282610c14565b15610a0c576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b610f858282610c14565b610a0c57610f9281610fd4565b610f9d836020610fe6565b604051602001610fae9291906115db565b60408051601f198184030181529082905262461bcd60e51b82526109f991600401611443565b60606108df6001600160a01b03831660145b60606000610ff583600261162d565b61100090600261164c565b6001600160401b038111156110175761101761165f565b6040519080825280601f01601f191660200182016040528015611041576020820181803683370190505b509050600360fc1b8160008151811061105c5761105c6114db565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061108b5761108b6114db565b60200101906001600160f81b031916908160001a90535060006110af84600261162d565b6110ba90600161164c565b90505b6001811115611132576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106110ee576110ee6114db565b1a60f81b828281518110611104576111046114db565b60200101906001600160f81b031916908160001a90535060049490941c9361112b81611675565b90506110bd565b5083156111515760405162461bcd60e51b81526004016109f99061168c565b9392505050565b8280548282559060005260206000209081019282156111ab579160200282015b828111156111ab5781546001600160a01b0319166001600160a01b03843516178255602090920191600190910190611178565b506111b79291506111bb565b5090565b5b808211156111b757600081556001016111bc565b60006001600160a01b0382166108df565b6111ea816111d0565b82525050565b602081016108df82846111e1565b6001600160e01b031981165b8114610e8f57600080fd5b80356108df816111fe565b60006020828403121561123557611235600080fd5b60006112418484611215565b949350505050565b8015156111ea565b602081016108df8284611249565b806111ea565b602081016108df828461125f565b8061120a565b80356108df81611273565b60006020828403121561129957611299600080fd5b60006112418484611279565b61120a816111d0565b80356108df816112a5565b6000602082840312156112ce576112ce600080fd5b600061124184846112ae565b600080604083850312156112f0576112f0600080fd5b60006112fc8585611279565b925050602061130d858286016112ae565b9150509250929050565b60808101611325828761125f565b611332602083018661125f565b61133f604083018561125f565b61134c606083018461125f565b95945050505050565b60008083601f84011261136a5761136a600080fd5b5081356001600160401b0381111561138457611384600080fd5b60208301915083602082028301111561139f5761139f600080fd5b9250929050565b600080602083850312156113bc576113bc600080fd5b82356001600160401b038111156113d5576113d5600080fd5b6113e185828601611355565b92509250509250929050565b60005b838110156114085781810151838201526020016113f0565b50506000910152565b600061141b825190565b8084526020840193506114328185602086016113ed565b601f01601f19169290920192915050565b602080825281016111518184611411565b80151561120a565b80356108df81611454565b60006020828403121561147c5761147c600080fd5b6000611241848461145c565b602080825281016108df81602f81527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560208201526e103937b632b9903337b91039b2b63360891b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019820361151a5761151a6114f1565b5060010190565b600061152d83836111e1565b505060200190565b600061115160208401846112ae565b8183526000602084019350818060005b85811015611581576115668284611535565b6115708882611521565b975060208301925050600101611554565b509495945050505050565b60208082528101611241818486611544565b604081016115ac828561125f565b61115160208301846111e1565b60006115c3825190565b6115d18185602086016113ed565b9290920192915050565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b8152601701600061160782856115b9565b7001034b99036b4b9b9b4b733903937b6329607d1b8152601101915061124182846115b9565b6000816000190483118215151615611647576116476114f1565b500290565b808201808211156108df576108df6114f1565b634e487b7160e01b600052604160045260246000fd5b600081611684576116846114f1565b506000190190565b60208082528181019081527f537472696e67733a20686578206c656e67746820696e73756666696369656e746040830152606082016108df56fecd9f023a942ee35097ead74b2505bea9f2c5d47465db92dd195cf7f01a41cfe1c723f4dd6268e1c374639e36d629c765285ee7003913389d582c300f186dde97862f91c9d89d6135b19873b921c90b702cb2e175c371b8430026b9577e691119a18eaea71a088b547b8c932b48861853b3434d9a3240b94466c607e28b6965952f0dbbe8c2c0170206c50ec0cafa1c0dbd03e73e67c2a960178df30a0a30ee2e69d1171ac0a63777a6733cda21aec9ed3d48a4fd11f273c934a691dec5e5589ca2646970667358221220722d8d86afb4e5cef496de28a9e65de9114d8df51d460c2c234e30796b9da54164736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "title": "SETTERS CONTRACT",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 24,
        "contract": "contracts/Setters.sol:Setters",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 9009,
        "contract": "contracts/Setters.sol:Setters",
        "label": "strategyManager",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 9011,
        "contract": "contracts/Setters.sol:Setters",
        "label": "sharesManager",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 9013,
        "contract": "contracts/Setters.sol:Setters",
        "label": "setters",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 9015,
        "contract": "contracts/Setters.sol:Setters",
        "label": "governance",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 9020,
        "contract": "contracts/Setters.sol:Setters",
        "label": "strategies",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_struct(StrategyParams)9176_storage)"
      },
      {
        "astId": 9023,
        "contract": "contracts/Setters.sol:Setters",
        "label": "defaultQueue",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 9025,
        "contract": "contracts/Setters.sol:Setters",
        "label": "useDefaultQueue",
        "offset": 0,
        "slot": "7",
        "type": "t_bool"
      },
      {
        "astId": 9029,
        "contract": "contracts/Setters.sol:Setters",
        "label": "_balanceOf",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 9035,
        "contract": "contracts/Setters.sol:Setters",
        "label": "_allowance",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 9037,
        "contract": "contracts/Setters.sol:Setters",
        "label": "totalSupplyAmount",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 9039,
        "contract": "contracts/Setters.sol:Setters",
        "label": "totalDebtAmount",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 9041,
        "contract": "contracts/Setters.sol:Setters",
        "label": "totalIdleAmount",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 9043,
        "contract": "contracts/Setters.sol:Setters",
        "label": "minimumTotalIdle",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 9045,
        "contract": "contracts/Setters.sol:Setters",
        "label": "depositLimit",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 9047,
        "contract": "contracts/Setters.sol:Setters",
        "label": "accountant",
        "offset": 0,
        "slot": "15",
        "type": "t_address"
      },
      {
        "astId": 9049,
        "contract": "contracts/Setters.sol:Setters",
        "label": "depositLimitModule",
        "offset": 0,
        "slot": "16",
        "type": "t_address"
      },
      {
        "astId": 9051,
        "contract": "contracts/Setters.sol:Setters",
        "label": "withdrawLimitModule",
        "offset": 0,
        "slot": "17",
        "type": "t_address"
      },
      {
        "astId": 9055,
        "contract": "contracts/Setters.sol:Setters",
        "label": "roles",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_address,t_bytes32)"
      },
      {
        "astId": 9059,
        "contract": "contracts/Setters.sol:Setters",
        "label": "openRoles",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 9061,
        "contract": "contracts/Setters.sol:Setters",
        "label": "roleManager",
        "offset": 0,
        "slot": "20",
        "type": "t_address"
      },
      {
        "astId": 9063,
        "contract": "contracts/Setters.sol:Setters",
        "label": "futureRoleManager",
        "offset": 0,
        "slot": "21",
        "type": "t_address"
      },
      {
        "astId": 9065,
        "contract": "contracts/Setters.sol:Setters",
        "label": "shutdown",
        "offset": 20,
        "slot": "21",
        "type": "t_bool"
      },
      {
        "astId": 9067,
        "contract": "contracts/Setters.sol:Setters",
        "label": "profitMaxUnlockTime",
        "offset": 0,
        "slot": "22",
        "type": "t_uint256"
      },
      {
        "astId": 9069,
        "contract": "contracts/Setters.sol:Setters",
        "label": "fullProfitUnlockDate",
        "offset": 0,
        "slot": "23",
        "type": "t_uint256"
      },
      {
        "astId": 9071,
        "contract": "contracts/Setters.sol:Setters",
        "label": "profitUnlockingRate",
        "offset": 0,
        "slot": "24",
        "type": "t_uint256"
      },
      {
        "astId": 9073,
        "contract": "contracts/Setters.sol:Setters",
        "label": "lastProfitUpdate",
        "offset": 0,
        "slot": "25",
        "type": "t_uint256"
      },
      {
        "astId": 9077,
        "contract": "contracts/Setters.sol:Setters",
        "label": "nonces",
        "offset": 0,
        "slot": "26",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 9084,
        "contract": "contracts/Setters.sol:Setters",
        "label": "DOMAIN_SEPARATOR",
        "offset": 0,
        "slot": "27",
        "type": "t_bytes32"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(StrategyParams)9176_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct StrategyParams)",
        "numberOfBytes": "32",
        "value": "t_struct(StrategyParams)9176_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/Setters.sol:Setters",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/Setters.sol:Setters",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(StrategyParams)9176_storage": {
        "encoding": "inplace",
        "label": "struct StrategyParams",
        "members": [
          {
            "astId": 9169,
            "contract": "contracts/Setters.sol:Setters",
            "label": "activation",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9171,
            "contract": "contracts/Setters.sol:Setters",
            "label": "lastReport",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 9173,
            "contract": "contracts/Setters.sol:Setters",
            "label": "currentDebt",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 9175,
            "contract": "contracts/Setters.sol:Setters",
            "label": "maxDebt",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}