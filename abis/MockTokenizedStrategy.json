{
  "address": "0xE6126513c156256A98E7e25317b9c38fAB3b596C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_management",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_keeper",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_profitMaxUnlockTime",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "apiVersion",
          "type": "string"
        }
      ],
      "name": "NewTokenizedStrategy",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "profit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "loss",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "protocolFees",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "performanceFees",
          "type": "uint256"
        }
      ],
      "name": "Reported",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "StrategyShutdown",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newEmergencyAdmin",
          "type": "address"
        }
      ],
      "name": "UpdateEmergencyAdmin",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newKeeper",
          "type": "address"
        }
      ],
      "name": "UpdateKeeper",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newManagement",
          "type": "address"
        }
      ],
      "name": "UpdateManagement",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newPendingManagement",
          "type": "address"
        }
      ],
      "name": "UpdatePendingManagement",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "newPerformanceFee",
          "type": "uint16"
        }
      ],
      "name": "UpdatePerformanceFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newPerformanceFeeRecipient",
          "type": "address"
        }
      ],
      "name": "UpdatePerformanceFeeRecipient",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newProfitMaxUnlockTime",
          "type": "uint256"
        }
      ],
      "name": "UpdateProfitMaxUnlockTime",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BASE_STRATEGY_STORAGE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FACTORY",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_FEE",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MIN_FEE",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptManagement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "apiVersion",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "asset",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "availableDepositLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "availableWithdrawLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "convertToAssets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "convertToShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deployFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "emergencyAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "freeFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fullProfitUnlockDate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "harvestAndReport",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_management",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_performanceFeeRecipient",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_keeper",
          "type": "address"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        }
      ],
      "name": "isEmergencyAuthorized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        }
      ],
      "name": "isKeeperOrManagement",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        }
      ],
      "name": "isManagement",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isShutdown",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keeper",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastReport",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "management",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "maxDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "maxMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_maxMint",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "maxRedeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_maxRedeem",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "maxWithdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_maxWithdraw",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "nonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingManagement",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "performanceFee",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "performanceFeeRecipient",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "previewDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "previewMint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "previewRedeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        }
      ],
      "name": "previewWithdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pricePerShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "profitMaxUnlockTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "profitUnlockingRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maxLoss",
          "type": "uint256"
        }
      ],
      "name": "redeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "redeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "report",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "profit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "loss",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_emergencyAdmin",
          "type": "address"
        }
      ],
      "name": "setEmergencyAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_keeper",
          "type": "address"
        }
      ],
      "name": "setKeeper",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxDebt",
          "type": "uint256"
        }
      ],
      "name": "setMaxDebt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minDebt",
          "type": "uint256"
        }
      ],
      "name": "setMinDebt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_management",
          "type": "address"
        }
      ],
      "name": "setPendingManagement",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_performanceFee",
          "type": "uint16"
        }
      ],
      "name": "setPerformanceFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_performanceFeeRecipient",
          "type": "address"
        }
      ],
      "name": "setPerformanceFeeRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_profitMaxUnlockTime",
          "type": "uint256"
        }
      ],
      "name": "setProfitMaxUnlockTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "shutdownStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tend",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAssets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalIdle",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unlockedShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maxLoss",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "assets",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4045f1657ac06ed175b8180d8a9464f1f52213072839545b5ae09867c95d9d57",
  "receipt": {
    "to": null,
    "from": "0xCB409e1A857318378137dFb42a06Ae87290631aD",
    "contractAddress": "0xE6126513c156256A98E7e25317b9c38fAB3b596C",
    "transactionIndex": 3,
    "gasUsed": "5190813",
    "logsBloom": "0x
    "blockHash": "0xf66e4edf7d627a1f333837f25fe2eb4539267aae60661b570d2867e90bfcc417",
    "transactionHash": "0x4045f1657ac06ed175b8180d8a9464f1f52213072839545b5ae09867c95d9d57",
    "logs": [],
    "blockNumber": 57842252,
    "cumulativeGasUsed": "9253749",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xdf29cb40cb92a1b8e8337f542e3846e185deff96",
    "Mock Tokenized Strategy",
    "0xCB409e1A857318378137dFb42a06Ae87290631aD",
    "0xCB409e1A857318378137dFb42a06Ae87290631aD",
    60
  ],
  "numDeployments": 1,
  "solcInputHash": "88952a32b8eb22bd265573d127cce662",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_management\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_profitMaxUnlockTime\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"apiVersion\",\"type\":\"string\"}],\"name\":\"NewTokenizedStrategy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loss\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protocolFees\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"performanceFees\",\"type\":\"uint256\"}],\"name\":\"Reported\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"StrategyShutdown\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newEmergencyAdmin\",\"type\":\"address\"}],\"name\":\"UpdateEmergencyAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newKeeper\",\"type\":\"address\"}],\"name\":\"UpdateKeeper\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newManagement\",\"type\":\"address\"}],\"name\":\"UpdateManagement\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newPendingManagement\",\"type\":\"address\"}],\"name\":\"UpdatePendingManagement\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"newPerformanceFee\",\"type\":\"uint16\"}],\"name\":\"UpdatePerformanceFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newPerformanceFeeRecipient\",\"type\":\"address\"}],\"name\":\"UpdatePerformanceFeeRecipient\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newProfitMaxUnlockTime\",\"type\":\"uint256\"}],\"name\":\"UpdateProfitMaxUnlockTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASE_STRATEGY_STORAGE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FACTORY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_FEE\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_FEE\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"apiVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"availableDepositLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"availableWithdrawLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"convertToAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"convertToShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deployFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"freeFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fullProfitUnlockDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestAndReport\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_management\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_performanceFeeRecipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"isEmergencyAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"isKeeperOrManagement\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"}],\"name\":\"isManagement\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isShutdown\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keeper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastReport\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"management\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxMint\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxRedeem\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxWithdraw\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingManagement\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceFee\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceFeeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pricePerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"profitMaxUnlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"profitUnlockingRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxLoss\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"report\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"loss\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_emergencyAdmin\",\"type\":\"address\"}],\"name\":\"setEmergencyAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"}],\"name\":\"setKeeper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxDebt\",\"type\":\"uint256\"}],\"name\":\"setMaxDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minDebt\",\"type\":\"uint256\"}],\"name\":\"setMinDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_management\",\"type\":\"address\"}],\"name\":\"setPendingManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_performanceFee\",\"type\":\"uint16\"}],\"name\":\"setPerformanceFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_performanceFeeRecipient\",\"type\":\"address\"}],\"name\":\"setPerformanceFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_profitMaxUnlockTime\",\"type\":\"uint256\"}],\"name\":\"setProfitMaxUnlockTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shutdownStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalIdle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockedShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxLoss\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"This checks that the current chain id is the same as when the contract was deployed to prevent replay attacks. If false it will calculate a new domain separator based on the new chain id.\",\"returns\":{\"_0\":\". The domain separator that will be used for any {permit} calls.\"}},\"acceptManagement()\":{\"details\":\"Can only be called by the current `pendingManagement`.\"},\"allowance(address,address)\":{\"params\":{\"owner\":\"The address who owns the shares.\",\"spender\":\"The address who would be moving the owners shares.\"},\"returns\":{\"_0\":\". The remaining amount of shares of `owner` that could be moved by `spender`.\"}},\"apiVersion()\":{\"returns\":{\"_0\":\". The API version for this TokenizedStrategy\"}},\"approve(address,uint256)\":{\"details\":\"NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\",\"params\":{\"amount\":\"the amount of shares to allow `spender` to move.\",\"spender\":\"the address to allow the shares to be moved by.\"},\"returns\":{\"_0\":\". a boolean value indicating whether the operation succeeded.\"}},\"asset()\":{\"returns\":{\"_0\":\". The underlying asset.\"}},\"balanceOf(address)\":{\"details\":\"If the '_account` is the strategy then this will subtract the amount of shares that have been unlocked since the last profit first.\",\"params\":{\"account\":\"the address to return the balance for.\"},\"returns\":{\"_0\":\". The current balance in y shares of the '_account'.\"}},\"convertToAssets(uint256)\":{\"params\":{\"shares\":\"The amount of the strategies shares.\"},\"returns\":{\"_0\":\". Expected amount of `asset` the shares represents.\"}},\"convertToShares(uint256)\":{\"params\":{\"assets\":\"The amount of underlying.\"},\"returns\":{\"_0\":\". Expected shares that `assets` represents.\"}},\"decimals()\":{\"returns\":{\"_0\":\". The decimals used for the strategy and `asset`.\"}},\"decreaseAllowance(address,uint256)\":{\"details\":\"This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\",\"params\":{\"spender\":\"the account that will be able to move less of the senders shares.\",\"subtractedValue\":\"the amount to decrease the current allowance by.\"},\"returns\":{\"_0\":\". a boolean value indicating whether the operation succeeded.\"}},\"deposit(uint256,address)\":{\"params\":{\"assets\":\"The amount of underlying to deposit in.\",\"receiver\":\"The address to receive the `shares`.\"},\"returns\":{\"shares\":\"The actual amount of shares issued.\"}},\"emergencyAdmin()\":{\"returns\":{\"_0\":\". Address of the emergencyAdmin\"}},\"emergencyWithdraw(uint256)\":{\"details\":\"This can only be called post {shutdownStrategy}. This will update totalDebt and totalIdle based on the amount of loose `asset` after the withdraw leaving `totalAssets` unchanged. A strategist will need to override the {_emergencyWithdraw} function in their strategy for this to work.\",\"params\":{\"amount\":\"The amount of asset to attempt to free.\"}},\"fullProfitUnlockDate()\":{\"returns\":{\"_0\":\". The full profit unlocking timestamp\"}},\"increaseAllowance(address,uint256)\":{\"details\":\"This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - cannot give spender over uint256.max allowance\",\"params\":{\"addedValue\":\"the extra amount to add to the current allowance.\",\"spender\":\"the account that will be able to move the senders shares.\"},\"returns\":{\"_0\":\". a boolean value indicating whether the operation succeeded.\"}},\"init(address,string,address,address,address)\":{\"details\":\"This should be called atomically whenever a new strategy is deployed and can only be called once for each strategy. This will set all the default storage that must be set for a strategy to function. Any changes can be made post deployment through external calls from `management`. The function will also emit an event that off chain indexers can look for to track any new deployments using this TokenizedStrategy. This is called through a low level call in the BaseStrategy so any reverts will return the \\\"init failed\\\" string.\",\"params\":{\"_asset\":\"Address of the underlying asset.\",\"_keeper\":\"Address to set as strategies `keeper`.\",\"_management\":\"Address to set as the strategies `management`.\",\"_name\":\"Name the strategy will use.\",\"_performanceFeeRecipient\":\"Address to receive performance fees.\"}},\"isEmergencyAuthorized(address)\":{\"details\":\"Is left public so that it can be used by the Strategy. When the Strategy calls this the msg.sender would be the address of the strategy so we need to specify the sender. Will return `true` if the check passed.\",\"params\":{\"_sender\":\"The original msg.sender.\"}},\"isKeeperOrManagement(address)\":{\"details\":\"Is left public so that it can be used by the Strategy. When the Strategy calls this the msg.sender would be the address of the strategy so we need to specify the sender. Will return `true` if the check passed.\",\"params\":{\"_sender\":\"The original msg.sender.\"}},\"isManagement(address)\":{\"details\":\"Is left public so that it can be used by the Strategy. When the Strategy calls this the msg.sender would be the address of the strategy so we need to specify the sender. Will return `true` if the check passed.\",\"params\":{\"_sender\":\"The original msg.sender.\"}},\"isShutdown()\":{\"returns\":{\"_0\":\". Whether or not the strategy is shutdown.\"}},\"keeper()\":{\"returns\":{\"_0\":\". Address of the keeper\"}},\"lastReport()\":{\"returns\":{\"_0\":\". The last report.\"}},\"management()\":{\"returns\":{\"_0\":\". Address of management\"}},\"maxDeposit(address)\":{\"params\":{\"owner\":\"The address depositing.\"},\"returns\":{\"_0\":\". The max that `owner` can deposit in `asset`.\"}},\"maxMint(address)\":{\"params\":{\"owner\":\"The address minting.\"},\"returns\":{\"_maxMint\":\"The max that `owner` can mint in shares.\"}},\"maxRedeem(address)\":{\"params\":{\"owner\":\"The owner of the shares.\"},\"returns\":{\"_maxRedeem\":\"Max amount of shares that can be redeemed.\"}},\"maxWithdraw(address)\":{\"params\":{\"owner\":\"The owner of the shares.\"},\"returns\":{\"_maxWithdraw\":\"Max amount of `asset` that can be withdrawn.\"}},\"mint(uint256,address)\":{\"params\":{\"receiver\":\"The address to receive the `shares`.\",\"shares\":\"The amount of strategy shares mint.\"},\"returns\":{\"assets\":\"The actual amount of asset deposited.\"}},\"name()\":{\"returns\":{\"_0\":\". The name the strategy is using for its token.\"}},\"nonces(address)\":{\"details\":\"Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\",\"params\":{\"_owner\":\"the address of the account to return the nonce for.\"},\"returns\":{\"_0\":\". the current nonce for the account.\"}},\"pendingManagement()\":{\"returns\":{\"_0\":\". Address of pendingManagement\"}},\"performanceFee()\":{\"returns\":{\"_0\":\". Current performance fee.\"}},\"performanceFeeRecipient()\":{\"returns\":{\"_0\":\". Address of performanceFeeRecipient\"}},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section].\"},\"previewDeposit(uint256)\":{\"details\":\"This will round down.\",\"params\":{\"assets\":\"The amount of `asset` to deposits.\"},\"returns\":{\"_0\":\". Expected shares that would be issued.\"}},\"previewMint(uint256)\":{\"details\":\"This is used instead of convertToAssets so that it can round up for safer mints.\",\"params\":{\"shares\":\"The amount of shares to mint.\"},\"returns\":{\"_0\":\". The needed amount of `asset` for the mint.\"}},\"previewRedeem(uint256)\":{\"details\":\"This will round down.\",\"params\":{\"shares\":\"The amount of shares that would be redeemed.\"},\"returns\":{\"_0\":\". The amount of `asset` that would be returned.\"}},\"previewWithdraw(uint256)\":{\"details\":\"This is used instead of convertToShares so that it can round up for safer withdraws.\",\"params\":{\"assets\":\"The amount of `asset` that would be withdrawn.\"},\"returns\":{\"_0\":\". The amount of shares that would be burnt.\"}},\"pricePerShare()\":{\"details\":\"This value offers limited precision. Integrations that require exact precision should use convertToAssets or convertToShares instead.\",\"returns\":{\"_0\":\". The price per share.\"}},\"profitMaxUnlockTime()\":{\"returns\":{\"_0\":\". The current profit max unlock time.\"}},\"profitUnlockingRate()\":{\"details\":\"This is denominated in EXTENDED_BPS decimals.\",\"returns\":{\"_0\":\". The current profit unlocking rate.\"}},\"redeem(uint256,address,address)\":{\"details\":\"This will default to allowing any loss passed to be realized.\",\"params\":{\"owner\":\"The address whose shares are burnt.\",\"receiver\":\"The address to receive `assets`.\",\"shares\":\"The amount of shares burnt.\"},\"returns\":{\"_0\":\"assets The actual amount of underlying withdrawn.\"}},\"redeem(uint256,address,address,uint256)\":{\"details\":\"This includes an added parameter to allow for losses.\",\"params\":{\"maxLoss\":\"The amount of acceptable loss in Basis points.\",\"owner\":\"The address whose shares are burnt.\",\"receiver\":\"The address to receive `assets`.\",\"shares\":\"The amount of shares burnt.\"},\"returns\":{\"_0\":\". The actual amount of underlying withdrawn.\"}},\"report()\":{\"details\":\"This should be called through protected relays if swaps are likely occur. This will account for any gains/losses since the last report and charge fees accordingly. Any profit over the fees charged will be immediately locked so there is no change in PricePerShare. Then slowly unlocked over the `maxProfitUnlockTime` each second based on the calculated `profitUnlockingRate`. In case of a loss it will first attempt to offset the loss with any remaining locked shares from the last report in order to reduce any negative impact to PPS. Will then recalculate the new time to unlock profits over and the rate based on a weighted average of any remaining time from the last report and the new amount of shares to be locked.\",\"returns\":{\"loss\":\"The notional amount of loss if any since the last report in terms of `asset`.\",\"profit\":\"The notional amount of gain if any since the last report in terms of `asset`.\"}},\"setEmergencyAdmin(address)\":{\"details\":\"Can only be called by the current `management`.\",\"params\":{\"_emergencyAdmin\":\"New address to set `emergencyAdmin` to.\"}},\"setKeeper(address)\":{\"details\":\"Can only be called by the current `management`.\",\"params\":{\"_keeper\":\"New address to set `keeper` to.\"}},\"setPendingManagement(address)\":{\"details\":\"Can only be called by the current `management`. The address is set to pending management and will then have to call {acceptManagement} in order for the 'management' to officially change. Cannot set `management` to address(0).\",\"params\":{\"_management\":\"New address to set `pendingManagement` to.\"}},\"setPerformanceFee(uint16)\":{\"details\":\"Can only be called by the current `management`. Denominated in Basis Points. So 100% == 10_000. Cannot be set less than the MIN_FEE. Cannot set greater than to MAX_FEE.\",\"params\":{\"_performanceFee\":\"New performance fee.\"}},\"setPerformanceFeeRecipient(address)\":{\"details\":\"Can only be called by the current `management`. Cannot set to address(0).\",\"params\":{\"_performanceFeeRecipient\":\"New address to set `management` to.\"}},\"setProfitMaxUnlockTime(uint256)\":{\"details\":\"Can only be called by the current `management`. Denominated in seconds and cannot be greater than 1 year. NOTE: Setting to 0 will cause all currently locked profit to be unlocked instantly and should be done with care. `profitMaxUnlockTime` is stored as a uint32 for packing but can be passed in as uint256 for simplicity.\",\"params\":{\"_profitMaxUnlockTime\":\"New `profitMaxUnlockTime`.\"}},\"shutdownStrategy()\":{\"details\":\"Can only be called by the current `management` or `emergencyAdmin`. This will stop any new {deposit} or {mint} calls but will not prevent {withdraw} or {redeem}. It will also still allow for {tend} and {report} so that management can report any last losses in an emergency as well as provide any maintenance to allow for full withdraw. This is a one way switch and can never be set back once shutdown.\"},\"symbol()\":{\"details\":\"Will be 'ys + asset symbol'.\",\"returns\":{\"_0\":\". The symbol the strategy is using for its tokens.\"}},\"tend()\":{\"details\":\"Both 'tendTrigger' and '_tend' will need to be overridden for this to be used. This will callback the internal '_tend' call in the BaseStrategy with the total current amount available to the strategy to deploy. Keepers are expected to use protected relays in tend calls so this can be used for illiquid or manipulatable strategies to compound rewards, perform maintenance or deposit/withdraw funds. All accounting for totalDebt and totalIdle updates will be done here post '_tend'. This should never cause an increase in PPS. Total assets should be the same before and after A report() call will be needed to record the profit.\"},\"totalAssets()\":{\"returns\":{\"_0\":\". Total assets the strategy holds.\"}},\"totalDebt()\":{\"returns\":{\"_0\":\". The current amount of debt.\"}},\"totalIdle()\":{\"returns\":{\"_0\":\". The current amount of idle funds.\"}},\"totalSupply()\":{\"returns\":{\"_0\":\". Total amount of shares issued.\"}},\"transfer(address,uint256)\":{\"details\":\"Requirements: - `to` cannot be the zero address. - `to` cannot be the address of the strategy. - the caller must have a balance of at least `_amount`.\",\"params\":{\"amount\":\"The amount of shares to be transferred from sender.\",\"to\":\"The address shares will be transferred to.\"},\"returns\":{\"_0\":\". a boolean value indicating whether the operation succeeded.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `to` cannot be the address of the strategy. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`. Emits a {Transfer} event.\",\"params\":{\"amount\":\"the quantity of shares to move.\",\"from\":\"the address to be moving shares from.\",\"to\":\"the address to be moving shares to.\"},\"returns\":{\"_0\":\". a boolean value indicating whether the operation succeeded.\"}},\"unlockedShares()\":{\"returns\":{\"_0\":\". The amount of shares that have unlocked.\"}},\"withdraw(uint256,address,address)\":{\"details\":\"This will default to not allowing any loss to be taken.\",\"params\":{\"assets\":\"The amount of underlying to withdraw.\",\"owner\":\"The address whose shares are burnt.\",\"receiver\":\"The address to receive `assets`.\"},\"returns\":{\"shares\":\"The actual amount of shares burnt.\"}},\"withdraw(uint256,address,address,uint256)\":{\"details\":\"This includes an added parameter to allow for losses.\",\"params\":{\"assets\":\"The amount of underlying to withdraw.\",\"maxLoss\":\"The amount of acceptable loss in Basis points.\",\"owner\":\"The address whose shares are burnt.\",\"receiver\":\"The address to receive `assets`.\"},\"returns\":{\"shares\":\"The actual amount of shares burnt.\"}}},\"version\":1},\"userdoc\":{\"events\":{\"StrategyShutdown()\":{\"notice\":\"Emitted when a strategy is shutdown.\"},\"UpdateEmergencyAdmin(address)\":{\"notice\":\"Emitted when the 'emergencyAdmin' address is updated to 'newEmergencyAdmin'.\"},\"UpdateKeeper(address)\":{\"notice\":\"Emitted when the 'keeper' address is updated to 'newKeeper'.\"},\"UpdateManagement(address)\":{\"notice\":\"Emitted when the 'management' address is updated to 'newManagement'.\"},\"UpdatePendingManagement(address)\":{\"notice\":\"Emitted when the 'pendingManagement' address is updated to 'newPendingManagement'.\"},\"UpdatePerformanceFee(uint16)\":{\"notice\":\"Emitted when the 'performanceFee' is updated to 'newPerformanceFee'.\"},\"UpdatePerformanceFeeRecipient(address)\":{\"notice\":\"Emitted when the 'performanceFeeRecipient' address is updated to 'newPerformanceFeeRecipient'.\"},\"UpdateProfitMaxUnlockTime(uint256)\":{\"notice\":\"Emitted when the 'profitMaxUnlockTime' is updated to 'newProfitMaxUnlockTime'.\"}},\"kind\":\"user\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"notice\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"acceptManagement()\":{\"notice\":\"Step two of two to set a new 'management' of the strategy.\"},\"allowance(address,address)\":{\"notice\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"apiVersion()\":{\"notice\":\"Get the API version for this TokenizedStrategy.\"},\"approve(address,uint256)\":{\"notice\":\"Sets `amount` as the allowance of `spender` over the caller's tokens.\"},\"asset()\":{\"notice\":\"Get the underlying asset for the strategy.\"},\"balanceOf(address)\":{\"notice\":\"Returns the current balance for a given '_account'.\"},\"convertToAssets(uint256)\":{\"notice\":\"The amount of assets that the strategy would exchange for the amount of shares provided, in an ideal scenario where all the conditions are met.\"},\"convertToShares(uint256)\":{\"notice\":\"The amount of shares that the strategy would  exchange for the amount of assets provided, in an ideal scenario where all the conditions are met.\"},\"decimals()\":{\"notice\":\"Returns the number of decimals used to get its user representation.\"},\"decreaseAllowance(address,uint256)\":{\"notice\":\"Atomically decreases the allowance granted to `spender` by the caller.\"},\"deposit(uint256,address)\":{\"notice\":\"Mints `shares` of strategy shares to `receiver` by depositing exactly `assets` of underlying tokens.\"},\"emergencyAdmin()\":{\"notice\":\"Get the current address that can shutdown and emergency withdraw.\"},\"emergencyWithdraw(uint256)\":{\"notice\":\"To manually withdraw funds from the yield source after a strategy has been shutdown.\"},\"fullProfitUnlockDate()\":{\"notice\":\"Gets the timestamp at which all profits will be unlocked.\"},\"increaseAllowance(address,uint256)\":{\"notice\":\"Atomically increases the allowance granted to `spender` by the caller.\"},\"init(address,string,address,address,address)\":{\"notice\":\"Used to initialize storage for a newly deployed strategy.\"},\"isEmergencyAuthorized(address)\":{\"notice\":\"To check if a sender is the keeper or emergency admin for a specific strategy.\"},\"isKeeperOrManagement(address)\":{\"notice\":\"To check if a sender is the keeper or management for a specific strategy.\"},\"isManagement(address)\":{\"notice\":\"To check if a sender is the management for a specific strategy.\"},\"isShutdown()\":{\"notice\":\"To check if the strategy has been shutdown.\"},\"keeper()\":{\"notice\":\"Get the current address that can call tend and report.\"},\"lastReport()\":{\"notice\":\"The timestamp of the last time protocol fees were charged.\"},\"management()\":{\"notice\":\"Get the current address that controls the strategy.\"},\"maxDeposit(address)\":{\"notice\":\"Total number of underlying assets that can be deposited by `_owner` into the strategy, where `owner` corresponds to the receiver of a {deposit} call.\"},\"maxMint(address)\":{\"notice\":\"Total number of shares that can be minted by `owner` into the strategy, where `_owner` corresponds to the receiver of a {mint} call.\"},\"maxRedeem(address)\":{\"notice\":\"Total number of strategy shares that can be redeemed from the strategy by `owner`, where `owner` corresponds to the msg.sender of a {redeem} call.\"},\"maxWithdraw(address)\":{\"notice\":\"Total number of underlying assets that can be withdrawn from the strategy by `owner`, where `owner` corresponds to the msg.sender of a {redeem} call.\"},\"mint(uint256,address)\":{\"notice\":\"Mints exactly `shares` of strategy shares to `receiver` by depositing `assets` of underlying tokens.\"},\"name()\":{\"notice\":\"Returns the name of the token.\"},\"nonces(address)\":{\"notice\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}.\"},\"pendingManagement()\":{\"notice\":\"Get the current pending management address if any.\"},\"performanceFee()\":{\"notice\":\"Get the current performance fee charged on profits. denominated in Basis Points where 10_000 == 100%\"},\"performanceFeeRecipient()\":{\"notice\":\"Get the current address that receives the performance fees.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval.\"},\"previewDeposit(uint256)\":{\"notice\":\"Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given current on-chain conditions.\"},\"previewMint(uint256)\":{\"notice\":\"Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given current on-chain conditions.\"},\"previewRedeem(uint256)\":{\"notice\":\"Allows an on-chain or off-chain user to simulate the effects of their redemption at the current block, given current on-chain conditions.\"},\"previewWithdraw(uint256)\":{\"notice\":\"Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block, given current on-chain conditions.\"},\"pricePerShare()\":{\"notice\":\"Get the price per share.\"},\"profitMaxUnlockTime()\":{\"notice\":\"Gets the current time profits are set to unlock over.\"},\"profitUnlockingRate()\":{\"notice\":\"The per second rate at which profits are unlocking.\"},\"redeem(uint256,address,address)\":{\"notice\":\"Redeems exactly `shares` from `owner` and sends `assets` of underlying tokens to `receiver`.\"},\"redeem(uint256,address,address,uint256)\":{\"notice\":\"Redeems exactly `shares` from `owner` and sends `assets` of underlying tokens to `receiver`.\"},\"report()\":{\"notice\":\"Function for keepers to call to harvest and record all profits accrued.\"},\"setEmergencyAdmin(address)\":{\"notice\":\"Sets a new address to be able to shutdown the strategy.\"},\"setKeeper(address)\":{\"notice\":\"Sets a new address to be in charge of tend and reports.\"},\"setPendingManagement(address)\":{\"notice\":\"Step one of two to set a new address to be in charge of the strategy.\"},\"setPerformanceFee(uint16)\":{\"notice\":\"Sets the performance fee to be charged on reported gains.\"},\"setPerformanceFeeRecipient(address)\":{\"notice\":\"Sets a new address to receive performance fees.\"},\"setProfitMaxUnlockTime(uint256)\":{\"notice\":\"Sets the time for profits to be unlocked over.\"},\"shutdownStrategy()\":{\"notice\":\"Used to shutdown the strategy preventing any further deposits.\"},\"symbol()\":{\"notice\":\"Returns the symbol of the strategies token.\"},\"tend()\":{\"notice\":\"For a 'keeper' to 'tend' the strategy if a custom tendTrigger() is implemented.\"},\"totalAssets()\":{\"notice\":\"Get the total amount of assets this strategy holds as of the last report. We manually track debt and idle to avoid any PPS manipulation from donations, touch values of debt etc.\"},\"totalDebt()\":{\"notice\":\"Get the current total debt for a strategy.\"},\"totalIdle()\":{\"notice\":\"Get the current total idle for a strategy.\"},\"totalSupply()\":{\"notice\":\"Get the current supply of the strategies shares. Locked shares issued to the strategy from profits are not counted towards the full supply until they are unlocked. As more shares slowly unlock the totalSupply will decrease causing the PPS of the strategy to increase.\"},\"transfer(address,uint256)\":{\"notice\":\"Transfer '_amount` of shares from `msg.sender` to `to`.\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"`amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance.\"},\"unlockedShares()\":{\"notice\":\"Get how many shares have been unlocked since last report.\"},\"withdraw(uint256,address,address)\":{\"notice\":\"Withdraws exactly `assets` from `owners` shares and sends the underlying tokens to `receiver`.\"},\"withdraw(uint256,address,address,uint256)\":{\"notice\":\"Withdraws `assets` from `owners` shares and sends the underlying tokens to `receiver`.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/test/mocks/MockTokenizedStrategy.sol\":\"MockTokenizedStrategy\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":10},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"contracts/Interfaces/IBaseStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.16;\\n\\ninterface IBaseStrategy {\\n    // solhint-disable ordering\\n\\n    function tokenizedStrategyAddress() external view returns (address);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            IMMUTABLE FUNCTIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function availableDepositLimit(\\n        address _owner\\n    ) external view returns (uint256);\\n\\n    function availableWithdrawLimit(\\n        address _owner\\n    ) external view returns (uint256);\\n\\n    function deployFunds(uint256 _assets) external;\\n\\n    function freeFunds(uint256 _amount) external;\\n\\n    function harvestAndReport() external returns (uint256);\\n\\n    function tendThis(uint256 _totalIdle) external;\\n\\n    function shutdownWithdraw(uint256 _amount) external;\\n\\n    function tendTrigger() external view returns (bool, bytes memory);\\n}\",\"keccak256\":\"0x4b347127b9b2d0a7ae180d0a344fdd53f624ed465be8c2daf3da4d3ea1c7f531\",\"license\":\"AGPL-3.0\"},\"contracts/Interfaces/IFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.16;\\n\\ninterface IFactory {\\n    function protocolFeeConfig() external view returns (uint16, address);\\n}\",\"keccak256\":\"0x40d6ccadd2d8acc52c61503f36d78c893d0841b427a390b52382b03368ddd9db\",\"license\":\"GPL-3.0\"},\"contracts/test/mocks/MockTokenizedStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.16;\\n\\nimport {TokenizedStrategy, ERC20} from \\\"./TokenizedStrategy.sol\\\";\\n\\ncontract MockTokenizedStrategy is TokenizedStrategy {\\n    // solhint-disable ordering\\n    // solhint-disable var-name-mixedcase\\n    // solhint-disable not-rely-on-time\\n    // solhint-disable custom-errors\\n    // solhint-disable comprehensive-interface\\n\\n    uint256 public minDebt;\\n    uint256 public maxDebt = type(uint256).max;\\n\\n    // Private variables and functions used in this mock.\\n    bytes32 public constant BASE_STRATEGY_STORAGE =\\n        bytes32(uint256(keccak256(\\\"yearn.base.strategy.storage\\\")) - 1);\\n\\n    function strategyStorage() internal pure returns (StrategyData storage S) {\\n        // Since STORAGE_SLOT is a constant, we have to put a variable\\n        // on the stack to access it from an inline assembly block.\\n        bytes32 slot = BASE_STRATEGY_STORAGE;\\n        assembly {\\n            S.slot := slot\\n        }\\n    }\\n\\n    constructor(\\n        address _asset,\\n        string memory _name,\\n        address _management,\\n        address _keeper,\\n        uint32 _profitMaxUnlockTime\\n    ) {\\n        // Cache storage pointer\\n        StrategyData storage S = strategyStorage();\\n\\n        // Set the strategy's underlying asset\\n        S.asset = ERC20(_asset);\\n        // Set the Strategy Tokens name.\\n        S.name = _name;\\n        // Set decimals based off the `asset`.\\n        S.decimals = ERC20(_asset).decimals();\\n\\n        // Set last report to this block.\\n        S.lastReport = uint128(block.timestamp);\\n\\n        // Set the default management address. Can't be 0.\\n        require(_management != address(0), \\\"ZERO ADDRESS\\\");\\n        S.management = _management;\\n        S.performanceFeeRecipient = _management;\\n        // Set the keeper address\\n        S.keeper = _keeper;\\n        S.profitMaxUnlockTime = _profitMaxUnlockTime;\\n    }\\n\\n    function setMinDebt(uint256 _minDebt) external {\\n        minDebt = _minDebt;\\n    }\\n\\n    function setMaxDebt(uint256 _maxDebt) external {\\n        maxDebt = _maxDebt;\\n    }\\n\\n    function availableDepositLimit(\\n        address\\n    ) public view virtual returns (uint256) {\\n        uint256 _totalAssets = strategyStorage().totalIdle;\\n        uint256 _maxDebt = maxDebt;\\n        return _maxDebt > _totalAssets ? _maxDebt - _totalAssets : 0;\\n    }\\n\\n    function availableWithdrawLimit(\\n        address /*_owner*/\\n    ) public view virtual returns (uint256) {\\n        return type(uint256).max;\\n    }\\n\\n    function deployFunds(uint256 _amount) external virtual {}\\n\\n    function freeFunds(uint256 _amount) external virtual {}\\n\\n    function harvestAndReport() external virtual returns (uint256) {\\n        return strategyStorage().asset.balanceOf(address(this));\\n    }\\n}\",\"keccak256\":\"0x133c429dd7ce79dde8b149375dcbc15e45365ab08f2ca446f69bf5483b421f19\",\"license\":\"GPL-3.0\"},\"contracts/test/mocks/TokenizedStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.16;\\n\\n/**$$$$$$$$$$$$$$$$$$$$$$$$$$$&Mr/|1+~>>iiiiiiiiiii>~+{|tuMW$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\\n$$$$$$$$$$$$$$$$$$$$$$$$$B#j]->iiiiiiiiiiiiiiiiiiiiiiiiiiii>-?f*B$$$$$$$$$$$$$$$$$$$$$$$$$\\n$$$$$$$$$$$$$$$$$$$$$@zj}~iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii~}fv@$$$$$$$$$$$$$$$$$$$$$\\n$$$$$$$$$$$$$$$$$$@z(+iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii+)zB$$$$$$$$$$$$$$$$$$\\n$$$$$$$$$$$$$$$$Mf~iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii~t#@$$$$$$$$$$$$$$$\\n$$$$$$$$$$$$$@u[iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii?n@$$$$$$$$$$$$$\\n$$$$$$$$$$$@z]iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii?u@$$$$$$$$$$$\\n$$$$$$$$$$v]iiiiiiiiiiiiiiii,.';iiiiiiiiiiiiiiiiiiiiiiiiii;'.\\\"iiiiiiiiiiiiiiii?u$$$$$$$$$$\\n$$$$$$$$%)>iiiiiiiiiiiiiii,.    ';iiiiiiiiiiiiiiiiiiiiii;'    .\\\"iiiiiiiiiiiiiiii1%$$$$$$$$\\n$$$$$$$c~iiiiiiiiiiiiiii,.        ';iiiiiiiiiiiiiiiiii;'        .\\\"iiiiiiiiiiiiiii~u$$$$$$$\\n$$$$$B/>iiiiiiiiiiiiii!'            `IiiiiiiiiiiiiiiI`            .Iiiiiiiiiiiiiii>|%$$$$$\\n$$$$@)iiiiiiiiiiiiiiiii;'             `Iiiiiiiiiiil`             ';iiiiiiiiiiiiiiiii}@$$$$\\n$$$B|iiiiiiiiiiiiiiiiiiii;'             `Iiiiiiil`             ';iiiiiiiiiiiiiiiiiiii1B$$$\\n$$@)iiiiiiiiiiiiiiiiiiiiiii:'             `;iiI`             ':iiiiiiiiiiiiiiiiiiiiiii{B$$\\n$$|iiiiiiiiiiiiiiiiiiiiiiiiii;'             ``             ':iiiiiiiiiiiiiiiiiiiiiiiiii1$$\\n$v>iiiiiiiiiiiiiiiiiiiiiiiiiiii:'                        ':iiiiiiiiiiiiiiiiiiiiiiiiiiii>x$\\n&?iiiiiiiiiiiiiiiiiiiiiiiiiiiiiii:'                    .,iiiiiiiiiiiiiiiiiiiiiiiiiiiiiii-W\\nziiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii:'                .,iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiv\\n-iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii:'            .,iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii-\\n<iiiiiiiiiiiiiiiiiiii!.':iiiiiiiiiiiiii,          \\\"iiiiiiiiiiiiii;'.Iiiiiiiiiiiiiiiiiiiii<\\niiiiiiiiiiiiiiiiiiiii'   ';iiiiiiiiiiiii          Iiiiiiiiiiiii;'   .iiiiiiiiiiiiiiiiiiiii\\niiiiiiiiiiiiiiiiiiii,      ';iiiiiiiiiii          IiiiiiiiiiiI`      `iiiiiiiiiiiiiiiiiiii\\niiiiiiiiiiiiiiiiiiii.        `Iiiiiiiiii          Iiiiiiiii!`         !iiiiiiiiiiiiiiiiiii\\niiiiiiiiiiiiiiiiiii;          :iiiiiiiii          Iiiiiiiii!          ,iiiiiiiiiiiiiiiiiii\\niiiiiiiiiiiiiiiiiii,          iiiiiiiiii          Iiiiiiiiii.         ^iiiiiiiiiiiiiiiiiii\\n<iiiiiiiiiiiiiiiiii,          iiiiiiiiii          Iiiiiiiiii'         ^iiiiiiiiiiiiiiiiii<\\n-iiiiiiiiiiiiiiiiii;          Iiiiiiiiii          Iiiiiiiiii.         \\\"iiiiiiiiiiiiiiiiii-\\nziiiiiiiiiiiiiiiiiii.         'iiiiiiiii''''''''''liiiiiiii^          liiiiiiiiiiiiiiiiiiv\\n&?iiiiiiiiiiiiiiiiii^          ^iiiiiiiiiiiiiiiiiiiiiiiiii,          `iiiiiiiiiiiiiiiiii_W\\n$u>iiiiiiiiiiiiiiiiii.          `!iiiiiiiiiiiiiiiiiiiiiii^          .liiiiiiiiiiiiiiiiiir$\\n$$(iiiiiiiiiiiiiiiiii;.          .\\\"iiiiiiiiiiiiiiiiiiii,.           :iiiiiiiiiiiiiiiiii}$$\\n$$@{iiiiiiiiiiiiiiiiii;.           .`:iiiiiiiiiiiiii;^.            :iiiiiiiiiiiiiiiiii}B$$\\n$$$B)iiiiiiiiiiiiiiiiii!'              '`\\\",::::,\\\"`'.             .Iiiiiiiiiiiiiiiiiii{%$$$\\n$$$$@1iiiiiiiiiiiiiiiiiii,.                                     ^iiiiiiiiiiiiiiiiiii[@$$$$\\n$$$$$B|>iiiiiiiiiiiiiiiiii!^.                                 `liiiiiiiiiiiiiiiiii>)%$$$$$\\n$$$$$$$c~iiiiiiiiiiiiiiiiiiii\\\"'                            .\\\"!iiiiiiiiiiiiiiiiiii~n$$$$$$$\\n$$$$$$$$B)iiiiiiiiiiiiiiiiiiiii!,`.                    .'\\\"liiiiiiiiiiiiiiiiiiiii1%$$$$$$$$\\n$$$$$$$$$@u]iiiiiiiiiiiiiiiiiiiiiiil,^`'..      ..''^,liiiiiiiiiiiiiiiiiiiiiii-x@$$$$$$$$$\\n$$$$$$$$$$$@v?iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii-x$$$$$$$$$$$$\\n$$$$$$$$$$$$$@n?iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii-rB$$$$$$$$$$$$$\\n$$$$$$$$$$$$$$$$/~iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii<\\\\*@$$$$$$$$$$$$$$$$\\n$$$$$$$$$$$$$$$$$$Bc1~iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii~{v%$$$$$$$$$$$$$$$$$$\\n$$$$$$$$$$$$$$$$$$$$$Bvf]<iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii<]tuB$$$$$$$$$$$$$$$$$$$$$\\n$$$$$$$$$$$$$$$$$$$$$$$$$%zt-+>iiiiiiiiiiiiiiiiiiiiiiiiiiiii+_tc%$$$$$$$$$$$$$$$$$$$$$$$$$\\n$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$W#u/|{+~>iiiiiiiiiiii><+{|/n#W$$$$$$$$$$$$$$$$$$$$$$$$$$$$*/\\n\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport {ERC20} from \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport {IFactory} from \\\"../../Interfaces/IFactory.sol\\\";\\nimport {IBaseStrategy} from \\\"../../Interfaces/IBaseStrategy.sol\\\";\\n\\n/**\\n * @title Yearn Tokenized Strategy\\n * @author yearn.finance\\n * @notice\\n *  This TokenizedStrategy can be used by anyone wishing to easily build\\n *  and deploy their own custom ERC4626 compliant single strategy Vault.\\n *\\n *  The TokenizedStrategy contract is meant to be used as a proxy style\\n *  implementation contract that will handle all logic, storage and\\n *  management for a custom strategy that inherits the `BaseStrategy`.\\n *  Any function calls to the strategy that are not defined within that\\n *  strategy will be forwarded through a delegateCall to this contract.\\n\\n *  A strategist only needs to override a few simple functions that are\\n *  focused entirely on the strategy specific needs to easily and cheaply\\n *  deploy their own permissionless 4626 compliant vault.\\n */\\ncontract TokenizedStrategy {\\n    // solhint-disable ordering\\n    // solhint-disable var-name-mixedcase\\n    // solhint-disable not-rely-on-time\\n    // solhint-disable custom-errors\\n    // solhint-disable comprehensive-interface\\n    // solhint-disable code-complexity\\n    // solhint-disable func-name-mixedcase\\n    // solhint-disable function-max-lines\\n\\n    using Math for uint256;\\n    using SafeERC20 for ERC20;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Emitted when the 'pendingManagement' address is updated to 'newPendingManagement'.\\n     */\\n    event UpdatePendingManagement(address indexed newPendingManagement);\\n\\n    /**\\n     * @notice Emitted when the 'management' address is updated to 'newManagement'.\\n     */\\n    event UpdateManagement(address indexed newManagement);\\n\\n    /**\\n     * @notice Emitted when the 'keeper' address is updated to 'newKeeper'.\\n     */\\n    event UpdateKeeper(address indexed newKeeper);\\n\\n    /**\\n     * @notice Emitted when the 'emergencyAdmin' address is updated to 'newEmergencyAdmin'.\\n     */\\n    event UpdateEmergencyAdmin(address indexed newEmergencyAdmin);\\n\\n    /**\\n     * @notice Emitted when the 'performanceFee' is updated to 'newPerformanceFee'.\\n     */\\n    event UpdatePerformanceFee(uint16 newPerformanceFee);\\n\\n    /**\\n     * @notice Emitted when the 'performanceFeeRecipient' address is\\n     * updated to 'newPerformanceFeeRecipient'.\\n     */\\n    event UpdatePerformanceFeeRecipient(\\n        address indexed newPerformanceFeeRecipient\\n    );\\n\\n    /**\\n     * @notice Emitted when the 'profitMaxUnlockTime' is updated to 'newProfitMaxUnlockTime'.\\n     */\\n    event UpdateProfitMaxUnlockTime(uint256 newProfitMaxUnlockTime);\\n\\n    /**\\n     * @notice Emitted when a strategy is shutdown.\\n     */\\n    event StrategyShutdown();\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n\\n    /**\\n     * @dev Emitted when the `caller` has exchanged `assets` for `shares`,\\n     * and transferred those `shares` to `owner`.\\n     */\\n    event Deposit(\\n        address indexed caller,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /**\\n     * @dev Emitted when the `caller` has exchanged `owner`s `shares` for `assets`,\\n     * and transferred those `assets` to `receiver`.\\n     */\\n    event Withdraw(\\n        address indexed caller,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /**\\n     * @dev Emitted when the strategy reports `profit` or `loss` and\\n     * `performanceFees` and `protocolFees` are paid out.\\n     */\\n    event Reported(\\n        uint256 profit,\\n        uint256 loss,\\n        uint256 protocolFees,\\n        uint256 performanceFees\\n    );\\n\\n    /**\\n     * @dev Emitted on the initialization of any new `strategy` that uses `asset`\\n     * with this specific `apiVersion`.\\n     */\\n    event NewTokenizedStrategy(\\n        address indexed strategy,\\n        address indexed asset,\\n        string apiVersion\\n    );\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        STORAGE STRUCT\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @dev The struct that will hold all the data for each strategy that\\n     * uses this implementation.\\n     *\\n     * This replaces all state variables for a traditional contract. This\\n     * full struct will be initialized on the creation of the strategy\\n     * and continually updated and read from for the life of the contract.\\n     *\\n     * We combine all the variables into one struct to limit the amount of\\n     * times the custom storage slots need to be loaded during complex functions.\\n     *\\n     * Loading the corresponding storage slot for the struct does not\\n     * load any of the contents of the struct into memory. So the size\\n     * has no effect on gas usage.\\n     */\\n    // prettier-ignore\\n    struct StrategyData {\\n        // The ERC20 compliant underlying asset that will be\\n        // used by the Strategy\\n        ERC20 asset;\\n\\n\\n        // These are the corresponding ERC20 variables needed for the\\n        // strategies token that is issued and burned on each deposit or withdraw.\\n        uint8 decimals; // The amount of decimals that `asset` and strategy use.\\n        string name; // The name of the token for the strategy.\\n        uint256 totalSupply; // The total amount of shares currently issued.\\n        uint256 INITIAL_CHAIN_ID; // The initial chain id when the strategy was created.\\n        bytes32 INITIAL_DOMAIN_SEPARATOR; // The domain separator used for permits on the initial chain.\\n        mapping(address => uint256) nonces; // Mapping of nonces used for permit functions.\\n        mapping(address => uint256) balances; // Mapping to track current balances for each account that holds shares.\\n        mapping(address => mapping(address => uint256)) allowances; // Mapping to track the allowances for the strategies shares.\\n\\n\\n        // Assets data to track totals the strategy holds.\\n        // We manually track idle instead of relying on asset.balanceOf(address(this))\\n        // to prevent PPS manipulation through airdrops.\\n        uint256 totalIdle; // The total amount of loose `asset` the strategy holds.\\n        uint256 totalDebt; // The total amount `asset` that is currently deployed by the strategy.\\n\\n\\n        // Variables for profit reporting and locking.\\n        // We use uint128 for time stamps which is 1,025 years in the future.\\n        uint256 profitUnlockingRate; // The rate at which locked profit is unlocking.\\n        uint128 fullProfitUnlockDate; // The timestamp at which all locked shares will unlock.\\n        uint128 lastReport; // The last time a {report} was called.\\n        uint32 profitMaxUnlockTime; // The amount of seconds that the reported profit unlocks over.\\n        uint16 performanceFee; // The percent in basis points of profit that is charged as a fee.\\n        address performanceFeeRecipient; // The address to pay the `performanceFee` to.\\n\\n\\n        // Access management variables.\\n        address management; // Main address that can set all configurable variables.\\n        address keeper; // Address given permission to call {report} and {tend}.\\n        address pendingManagement; // Address that is pending to take over `management`.\\n        address emergencyAdmin; // Address to act in emergencies as well as `management`.\\n        bool entered; // Bool to prevent reentrancy.\\n        bool shutdown; // Bool that can be used to stop deposits into the strategy.\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            MODIFIERS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @dev Require that the call is coming from the strategies management.\\n     */\\n    modifier onlyManagement() {\\n        isManagement(msg.sender);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Require that the call is coming from either the strategies\\n     * management or the keeper.\\n     */\\n    modifier onlyKeepers() {\\n        isKeeperOrManagement(msg.sender);\\n        _;\\n    }\\n\\n    modifier onlyEmergencyAuthorized() {\\n        isEmergencyAuthorized(msg.sender);\\n        _;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Placed over all state changing functions for increased safety.\\n     */\\n    modifier nonReentrant() {\\n        StrategyData storage S = _strategyStorage();\\n        // On the first call to nonReentrant, `entered` will be false\\n        require(!S.entered, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        S.entered = true;\\n\\n        _;\\n\\n        // Reset to false once call has finished\\n        S.entered = false;\\n    }\\n\\n    /**\\n     * @notice To check if a sender is the management for a specific strategy.\\n     * @dev Is left public so that it can be used by the Strategy.\\n     *\\n     * When the Strategy calls this the msg.sender would be the\\n     * address of the strategy so we need to specify the sender.\\n     *\\n     * Will return `true` if the check passed.\\n     *\\n     * @param _sender The original msg.sender.\\n     */\\n    function isManagement(address _sender) public view returns (bool) {\\n        require(_sender == _strategyStorage().management, \\\"!management\\\");\\n        return true;\\n    }\\n\\n    /**\\n     * @notice To check if a sender is the keeper or management\\n     * for a specific strategy.\\n     * @dev Is left public so that it can be used by the Strategy.\\n     *\\n     * When the Strategy calls this the msg.sender would be the\\n     * address of the strategy so we need to specify the sender.\\n     *\\n     * Will return `true` if the check passed.\\n     *\\n     * @param _sender The original msg.sender.\\n     */\\n    function isKeeperOrManagement(address _sender) public view returns (bool) {\\n        StrategyData storage S = _strategyStorage();\\n        require(_sender == S.keeper || _sender == S.management, \\\"!keeper\\\");\\n        return true;\\n    }\\n\\n    /**\\n     * @notice To check if a sender is the keeper or emergency admin\\n     * for a specific strategy.\\n     * @dev Is left public so that it can be used by the Strategy.\\n     *\\n     * When the Strategy calls this the msg.sender would be the\\n     * address of the strategy so we need to specify the sender.\\n     *\\n     * Will return `true` if the check passed.\\n     *\\n     * @param _sender The original msg.sender.\\n     */\\n    function isEmergencyAuthorized(address _sender) public view returns (bool) {\\n        StrategyData storage S = _strategyStorage();\\n        require(\\n            _sender == S.emergencyAdmin || _sender == S.management,\\n            \\\"!emergency authorized\\\"\\n        );\\n        return true;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTANTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    // API version this TokenizedStrategy implements.\\n    string private constant API_VERSION = \\\"3.0.1\\\";\\n\\n    // Used for fee calculations.\\n    uint256 private constant MAX_BPS = 10_000;\\n    // Used for profit unlocking rate calculations.\\n    uint256 private constant MAX_BPS_EXTENDED = 1_000_000_000_000;\\n\\n    // Minimum in Basis points the Performance fee can be set to.\\n    // Used to disincentive forking strategies just to lower fees.\\n    uint16 public constant MIN_FEE = 500; // 5%\\n    // Maximum in Basis Points the Performance Fee can be set to.\\n    uint16 public constant MAX_FEE = 5_000; // 50%\\n\\n    // Seconds per year for max profit unlocking time.\\n    uint256 private constant SECONDS_PER_YEAR = 31_556_952; // 365.2425 days\\n\\n    // Address of the previously deployed Vault factory that the\\n    // protocol fee config is retrieved from.\\n    // NOTE: This will be set to deployed factory. deterministic address for testing is used now\\n    address public constant FACTORY =\\n        0x5615dEB798BB3E4dFa0139dFa1b3D433Cc23b72f;\\n\\n    /**\\n     * @dev Custom storage slot that will be used to store the\\n     * `StrategyData` struct that holds each strategies\\n     * specific storage variables.\\n     *\\n     * Any storage updates done by the TokenizedStrategy actually update\\n     * the storage of the calling contract. This variable points\\n     * to the specific location that will be used to store the\\n     * struct that holds all that data.\\n     *\\n     * We use a custom string in order to get a random\\n     * storage slot that will allow for strategists to use any\\n     * amount of storage in their strategy without worrying\\n     * about collisions.\\n     */\\n    bytes32 private constant BASE_STRATEGY_STORAGE =\\n        bytes32(uint256(keccak256(\\\"yearn.base.strategy.storage\\\")) - 1);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                    STORAGE GETTER FUNCTION\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @dev will return the actual storage slot where the strategy\\n     * specific `StrategyData` struct is stored for both read\\n     * and write operations.\\n     *\\n     * This loads just the slot location, not the full struct\\n     * so it can be used in a gas efficient manner.\\n     */\\n    function _strategyStorage() private pure returns (StrategyData storage S) {\\n        // Since STORAGE_SLOT is a constant, we have to put a variable\\n        // on the stack to access it from an inline assembly block.\\n        bytes32 slot = BASE_STRATEGY_STORAGE;\\n        assembly {\\n            S.slot := slot\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                INITIALIZATION OF DEFAULT STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Used to initialize storage for a newly deployed strategy.\\n     * @dev This should be called atomically whenever a new strategy is\\n     * deployed and can only be called once for each strategy.\\n     *\\n     * This will set all the default storage that must be set for a\\n     * strategy to function. Any changes can be made post deployment\\n     * through external calls from `management`.\\n     *\\n     * The function will also emit an event that off chain indexers can\\n     * look for to track any new deployments using this TokenizedStrategy.\\n     *\\n     * This is called through a low level call in the BaseStrategy\\n     * so any reverts will return the \\\"init failed\\\" string.\\n     *\\n     * @param _asset Address of the underlying asset.\\n     * @param _name Name the strategy will use.\\n     * @param _management Address to set as the strategies `management`.\\n     * @param _performanceFeeRecipient Address to receive performance fees.\\n     * @param _keeper Address to set as strategies `keeper`.\\n     */\\n    function init(\\n        address _asset,\\n        string memory _name,\\n        address _management,\\n        address _performanceFeeRecipient,\\n        address _keeper\\n    ) external {\\n        // Cache storage pointer\\n        StrategyData storage S = _strategyStorage();\\n\\n        // Make sure we aren't initialized.\\n        require(address(S.asset) == address(0), \\\"initialized\\\");\\n\\n        // Set the strategy's underlying asset\\n        S.asset = ERC20(_asset);\\n        // Set the Strategy Tokens name.\\n        S.name = _name;\\n        // Set decimals based off the `asset`.\\n        S.decimals = ERC20(_asset).decimals();\\n        // Set initial chain id for permit replay protection\\n        S.INITIAL_CHAIN_ID = block.chainid;\\n        // Set the initial domain separator for permit functions\\n        S.INITIAL_DOMAIN_SEPARATOR = _computeDomainSeparator();\\n\\n        // Default to a 10 day profit unlock period\\n        S.profitMaxUnlockTime = 10 days;\\n        // Set address to receive performance fees.\\n        // Can't be address(0) or we will be burning fees.\\n        require(_performanceFeeRecipient != address(0), \\\"ZERO ADDRESS\\\");\\n        // Can't mint shares to its self because of profit locking.\\n        require(_performanceFeeRecipient != address(this), \\\"self\\\");\\n        S.performanceFeeRecipient = _performanceFeeRecipient;\\n        // Default to a 10% performance fee.\\n        S.performanceFee = 1_000;\\n        // Set last report to this block.\\n        S.lastReport = uint128(block.timestamp);\\n\\n        // Set the default management address. Can't be 0.\\n        require(_management != address(0), \\\"ZERO ADDRESS\\\");\\n        S.management = _management;\\n        // Set the keeper address\\n        S.keeper = _keeper;\\n\\n        // Emit event to signal a new strategy has been initialized.\\n        emit NewTokenizedStrategy(address(this), _asset, API_VERSION);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        ERC4626 FUNCTIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Mints `shares` of strategy shares to `receiver` by\\n     * depositing exactly `assets` of underlying tokens.\\n     * @param assets The amount of underlying to deposit in.\\n     * @param receiver The address to receive the `shares`.\\n     * @return shares The actual amount of shares issued.\\n     */\\n    function deposit(\\n        uint256 assets,\\n        address receiver\\n    ) external nonReentrant returns (uint256 shares) {\\n        // Checking max deposit will also check if shutdown.\\n        require(\\n            assets <= maxDeposit(receiver),\\n            \\\"ERC4626: deposit more than max\\\"\\n        );\\n        // Check for rounding error.\\n        require((shares = previewDeposit(assets)) != 0, \\\"ZERO_SHARES\\\");\\n\\n        _deposit(receiver, assets, shares);\\n    }\\n\\n    /**\\n     * @notice Mints exactly `shares` of strategy shares to\\n     * `receiver` by depositing `assets` of underlying tokens.\\n     * @param shares The amount of strategy shares mint.\\n     * @param receiver The address to receive the `shares`.\\n     * @return assets The actual amount of asset deposited.\\n     */\\n    function mint(\\n        uint256 shares,\\n        address receiver\\n    ) external nonReentrant returns (uint256 assets) {\\n        // Checking max mint will also check if shutdown.\\n        require(shares <= maxMint(receiver), \\\"ERC4626: mint more than max\\\");\\n        // Check for rounding error.\\n        require((assets = previewMint(shares)) != 0, \\\"ZERO_ASSETS\\\");\\n\\n        _deposit(receiver, assets, shares);\\n    }\\n\\n    /**\\n     * @notice Withdraws exactly `assets` from `owners` shares and sends\\n     * the underlying tokens to `receiver`.\\n     * @dev This will default to not allowing any loss to be taken.\\n     * @param assets The amount of underlying to withdraw.\\n     * @param receiver The address to receive `assets`.\\n     * @param owner The address whose shares are burnt.\\n     * @return shares The actual amount of shares burnt.\\n     */\\n    function withdraw(\\n        uint256 assets,\\n        address receiver,\\n        address owner\\n    ) external returns (uint256 shares) {\\n        return withdraw(assets, receiver, owner, 0);\\n    }\\n\\n    /**\\n     * @notice Withdraws `assets` from `owners` shares and sends\\n     * the underlying tokens to `receiver`.\\n     * @dev This includes an added parameter to allow for losses.\\n     * @param assets The amount of underlying to withdraw.\\n     * @param receiver The address to receive `assets`.\\n     * @param owner The address whose shares are burnt.\\n     * @param maxLoss The amount of acceptable loss in Basis points.\\n     * @return shares The actual amount of shares burnt.\\n     */\\n    function withdraw(\\n        uint256 assets,\\n        address receiver,\\n        address owner,\\n        uint256 maxLoss\\n    ) public nonReentrant returns (uint256 shares) {\\n        require(\\n            assets <= maxWithdraw(owner),\\n            \\\"ERC4626: withdraw more than max\\\"\\n        );\\n        // Check for rounding error or 0 value.\\n        require((shares = previewWithdraw(assets)) != 0, \\\"ZERO_SHARES\\\");\\n\\n        // Withdraw and track the actual amount withdrawn for loss check.\\n        _withdraw(receiver, owner, assets, shares, maxLoss);\\n    }\\n\\n    /**\\n     * @notice Redeems exactly `shares` from `owner` and\\n     * sends `assets` of underlying tokens to `receiver`.\\n     * @dev This will default to allowing any loss passed to be realized.\\n     * @param shares The amount of shares burnt.\\n     * @param receiver The address to receive `assets`.\\n     * @param owner The address whose shares are burnt.\\n     * @return assets The actual amount of underlying withdrawn.\\n     */\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    ) external returns (uint256) {\\n        // We default to not limiting a potential loss.\\n        return redeem(shares, receiver, owner, MAX_BPS);\\n    }\\n\\n    /**\\n     * @notice Redeems exactly `shares` from `owner` and\\n     * sends `assets` of underlying tokens to `receiver`.\\n     * @dev This includes an added parameter to allow for losses.\\n     * @param shares The amount of shares burnt.\\n     * @param receiver The address to receive `assets`.\\n     * @param owner The address whose shares are burnt.\\n     * @param maxLoss The amount of acceptable loss in Basis points.\\n     * @return . The actual amount of underlying withdrawn.\\n     */\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address owner,\\n        uint256 maxLoss\\n    ) public nonReentrant returns (uint256) {\\n        require(shares <= maxRedeem(owner), \\\"ERC4626: redeem more than max\\\");\\n        uint256 assets;\\n        // Check for rounding error or 0 value.\\n        require((assets = previewRedeem(shares)) != 0, \\\"ZERO_ASSETS\\\");\\n\\n        // We need to return the actual amount withdrawn in case of a loss.\\n        return _withdraw(receiver, owner, assets, shares, maxLoss);\\n    }\\n\\n    /**\\n     * @notice The amount of shares that the strategy would\\n     *  exchange for the amount of assets provided, in an\\n     * ideal scenario where all the conditions are met.\\n     *\\n     * @param assets The amount of underlying.\\n     * @return . Expected shares that `assets` represents.\\n     */\\n    function convertToShares(uint256 assets) public view returns (uint256) {\\n        // Saves an extra SLOAD if totalAssets() is non-zero.\\n        uint256 _totalAssets = totalAssets();\\n        uint256 _totalSupply = totalSupply();\\n\\n        // If assets are 0 but supply is not PPS = 0.\\n        if (_totalAssets == 0) return _totalSupply == 0 ? assets : 0;\\n\\n        return assets.mulDiv(_totalSupply, _totalAssets, Math.Rounding.Down);\\n    }\\n\\n    /**\\n     * @notice The amount of assets that the strategy would\\n     * exchange for the amount of shares provided, in an\\n     * ideal scenario where all the conditions are met.\\n     *\\n     * @param shares The amount of the strategies shares.\\n     * @return . Expected amount of `asset` the shares represents.\\n     */\\n    function convertToAssets(uint256 shares) public view returns (uint256) {\\n        // Saves an extra SLOAD if totalSupply() is non-zero.\\n        uint256 supply = totalSupply();\\n\\n        return\\n            supply == 0\\n                ? shares\\n                : shares.mulDiv(totalAssets(), supply, Math.Rounding.Down);\\n    }\\n\\n    /**\\n     * @notice Allows an on-chain or off-chain user to simulate\\n     * the effects of their deposit at the current block, given\\n     * current on-chain conditions.\\n     * @dev This will round down.\\n     *\\n     * @param assets The amount of `asset` to deposits.\\n     * @return . Expected shares that would be issued.\\n     */\\n    function previewDeposit(uint256 assets) public view returns (uint256) {\\n        return convertToShares(assets);\\n    }\\n\\n    /**\\n     * @notice Allows an on-chain or off-chain user to simulate\\n     * the effects of their mint at the current block, given\\n     * current on-chain conditions.\\n     * @dev This is used instead of convertToAssets so that it can\\n     * round up for safer mints.\\n     *\\n     * @param shares The amount of shares to mint.\\n     * @return . The needed amount of `asset` for the mint.\\n     */\\n    function previewMint(uint256 shares) public view returns (uint256) {\\n        // Saves an extra SLOAD if totalSupply() is non-zero.\\n        uint256 supply = totalSupply();\\n\\n        return\\n            supply == 0\\n                ? shares\\n                : shares.mulDiv(totalAssets(), supply, Math.Rounding.Up);\\n    }\\n\\n    /**\\n     * @notice Allows an on-chain or off-chain user to simulate\\n     * the effects of their withdrawal at the current block,\\n     * given current on-chain conditions.\\n     * @dev This is used instead of convertToShares so that it can\\n     * round up for safer withdraws.\\n     *\\n     * @param assets The amount of `asset` that would be withdrawn.\\n     * @return . The amount of shares that would be burnt.\\n     */\\n    function previewWithdraw(uint256 assets) public view returns (uint256) {\\n        // Saves an extra SLOAD if totalAssets() is non-zero.\\n        uint256 _totalAssets = totalAssets();\\n        uint256 _totalSupply = totalSupply();\\n\\n        // If assets are 0 but supply is not, then PPS = 0.\\n        if (_totalAssets == 0) return _totalSupply == 0 ? assets : 0;\\n\\n        return assets.mulDiv(_totalSupply, _totalAssets, Math.Rounding.Up);\\n    }\\n\\n    /**\\n     * @notice Allows an on-chain or off-chain user to simulate\\n     * the effects of their redemption at the current block,\\n     * given current on-chain conditions.\\n     * @dev This will round down.\\n     *\\n     * @param shares The amount of shares that would be redeemed.\\n     * @return . The amount of `asset` that would be returned.\\n     */\\n    function previewRedeem(uint256 shares) public view returns (uint256) {\\n        return convertToAssets(shares);\\n    }\\n\\n    /**\\n     * @notice Total number of underlying assets that can\\n     * be deposited by `_owner` into the strategy, where `owner`\\n     * corresponds to the receiver of a {deposit} call.\\n     *\\n     * @param owner The address depositing.\\n     * @return . The max that `owner` can deposit in `asset`.\\n     */\\n    function maxDeposit(address owner) public view returns (uint256) {\\n        if (_strategyStorage().shutdown) return 0;\\n\\n        return IBaseStrategy(address(this)).availableDepositLimit(owner);\\n    }\\n\\n    /**\\n     * @notice Total number of shares that can be minted by `owner`\\n     * into the strategy, where `_owner` corresponds to the receiver\\n     * of a {mint} call.\\n     *\\n     * @param owner The address minting.\\n     * @return _maxMint The max that `owner` can mint in shares.\\n     */\\n    function maxMint(address owner) public view returns (uint256 _maxMint) {\\n        if (_strategyStorage().shutdown) return 0;\\n\\n        _maxMint = IBaseStrategy(address(this)).availableDepositLimit(owner);\\n        if (_maxMint != type(uint256).max) {\\n            _maxMint = convertToShares(_maxMint);\\n        }\\n    }\\n\\n    /**\\n     * @notice Total number of underlying assets that can be\\n     * withdrawn from the strategy by `owner`, where `owner`\\n     * corresponds to the msg.sender of a {redeem} call.\\n     *\\n     * @param owner The owner of the shares.\\n     * @return _maxWithdraw Max amount of `asset` that can be withdrawn.\\n     */\\n    function maxWithdraw(\\n        address owner\\n    ) public view returns (uint256 _maxWithdraw) {\\n        _maxWithdraw = IBaseStrategy(address(this)).availableWithdrawLimit(\\n            owner\\n        );\\n        if (_maxWithdraw == type(uint256).max) {\\n            // Saves a min check if there is no withdrawal limit.\\n            _maxWithdraw = convertToAssets(balanceOf(owner));\\n        } else {\\n            _maxWithdraw = Math.min(\\n                convertToAssets(balanceOf(owner)),\\n                _maxWithdraw\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice Total number of strategy shares that can be\\n     * redeemed from the strategy by `owner`, where `owner`\\n     * corresponds to the msg.sender of a {redeem} call.\\n     *\\n     * @param owner The owner of the shares.\\n     * @return _maxRedeem Max amount of shares that can be redeemed.\\n     */\\n    function maxRedeem(address owner) public view returns (uint256 _maxRedeem) {\\n        _maxRedeem = IBaseStrategy(address(this)).availableWithdrawLimit(owner);\\n        // Conversion would overflow and saves a min check if there is no withdrawal limit.\\n        if (_maxRedeem == type(uint256).max) {\\n            _maxRedeem = balanceOf(owner);\\n        } else {\\n            _maxRedeem = Math.min(\\n                // Use preview withdraw to round up\\n                previewWithdraw(_maxRedeem),\\n                balanceOf(owner)\\n            );\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            ACCOUNTING LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Get the total amount of assets this strategy holds\\n     * as of the last report.\\n     *\\n     * We manually track debt and idle to avoid any PPS manipulation\\n     * from donations, touch values of debt etc.\\n     *\\n     * @return . Total assets the strategy holds.\\n     */\\n    function totalAssets() public view returns (uint256) {\\n        StrategyData storage S = _strategyStorage();\\n        unchecked {\\n            return S.totalIdle + S.totalDebt;\\n        }\\n    }\\n\\n    /**\\n     * @notice Get the current supply of the strategies shares.\\n     *\\n     * Locked shares issued to the strategy from profits are not\\n     * counted towards the full supply until they are unlocked.\\n     *\\n     * As more shares slowly unlock the totalSupply will decrease\\n     * causing the PPS of the strategy to increase.\\n     *\\n     * @return . Total amount of shares issued.\\n     */\\n    function totalSupply() public view returns (uint256) {\\n        return _strategyStorage().totalSupply - _unlockedShares();\\n    }\\n\\n    /**\\n     * @dev Function to be called during {deposit} and {mint}.\\n     *\\n     * This function handles all logic including transfers,\\n     * minting and accounting.\\n     *\\n     * We do all external calls before updating any internal\\n     * values to prevent view reentrancy issues from the token\\n     * transfers or the _deployFunds() calls.\\n     */\\n    function _deposit(\\n        address receiver,\\n        uint256 assets,\\n        uint256 shares\\n    ) private {\\n        require(receiver != address(this), \\\"ERC4626: mint to self\\\");\\n\\n        // Cache storage variables used more than once.\\n        StrategyData storage S = _strategyStorage();\\n        ERC20 _asset = S.asset;\\n\\n        // Need to transfer before minting or ERC777s could reenter.\\n        _asset.safeTransferFrom(msg.sender, address(this), assets);\\n\\n        // We will deposit up to current idle plus the new amount added\\n        uint256 toDeploy = S.totalIdle + assets;\\n\\n        // Cache for post {deployFunds} checks.\\n        uint256 beforeBalance = _asset.balanceOf(address(this));\\n\\n        // Deploy up to all loose funds.\\n        IBaseStrategy(address(this)).deployFunds(toDeploy);\\n\\n        // Always get the actual amount deployed. We double check the\\n        // diff against toDeploy for complete accuracy.\\n        uint256 deployed = Math.min(\\n            beforeBalance - _asset.balanceOf(address(this)),\\n            toDeploy\\n        );\\n\\n        // Adjust total Assets.\\n        S.totalDebt += deployed;\\n        unchecked {\\n            // Cant't underflow due to previous min check.\\n            S.totalIdle = toDeploy - deployed;\\n        }\\n\\n        // mint shares\\n        _mint(receiver, shares);\\n\\n        emit Deposit(msg.sender, receiver, assets, shares);\\n    }\\n\\n    /**\\n     * @dev To be called during {redeem} and {withdraw}.\\n     *\\n     * This will handle all logic, transfers and accounting\\n     * in order to service the withdraw request.\\n     *\\n     * If we are not able to withdraw the full amount needed, it will\\n     * be counted as a loss and passed on to the user.\\n     */\\n    function _withdraw(\\n        address receiver,\\n        address owner,\\n        uint256 assets,\\n        uint256 shares,\\n        uint256 maxLoss\\n    ) private returns (uint256) {\\n        require(receiver != address(0), \\\"ZERO ADDRESS\\\");\\n        require(maxLoss <= MAX_BPS, \\\"exceeds MAX_BPS\\\");\\n\\n        // Spend allowance if applicable.\\n        if (msg.sender != owner) {\\n            _spendAllowance(owner, msg.sender, shares);\\n        }\\n\\n        StrategyData storage S = _strategyStorage();\\n        // Expected behavior is to need to free funds so we cache `_asset`.\\n        ERC20 _asset = S.asset;\\n\\n        uint256 idle = S.totalIdle;\\n\\n        // Check if we need to withdraw funds.\\n        if (idle < assets) {\\n            // Cache before balance for diff checks.\\n            uint256 before = _asset.balanceOf(address(this));\\n\\n            // Tell Strategy to free what we need.\\n            unchecked {\\n                IBaseStrategy(address(this)).freeFunds(assets - idle);\\n            }\\n\\n            // Return the actual amount withdrawn. Adjust for potential over withdraws.\\n            uint256 withdrawn = Math.min(\\n                _asset.balanceOf(address(this)) - before,\\n                S.totalDebt\\n            );\\n\\n            unchecked {\\n                idle += withdrawn;\\n            }\\n\\n            uint256 loss;\\n            // If we didn't get enough out then we have a loss.\\n            if (idle < assets) {\\n                unchecked {\\n                    loss = assets - idle;\\n                }\\n                // If a non-default max loss parameter was set.\\n                if (maxLoss < MAX_BPS) {\\n                    // Make sure we are within the acceptable range.\\n                    require(\\n                        loss <= (assets * maxLoss) / MAX_BPS,\\n                        \\\"too much loss\\\"\\n                    );\\n                }\\n                // Lower the amount to be withdrawn.\\n                assets = idle;\\n            }\\n\\n            // Update debt storage.\\n            S.totalDebt -= (withdrawn + loss);\\n        }\\n\\n        // Update idle based on how much we took.\\n        S.totalIdle = idle - assets;\\n\\n        _burn(owner, shares);\\n\\n        _asset.safeTransfer(receiver, assets);\\n\\n        emit Withdraw(msg.sender, receiver, owner, assets, shares);\\n\\n        // Return the actual amount of assets withdrawn.\\n        return assets;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        PROFIT LOCKING\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Function for keepers to call to harvest and record all\\n     * profits accrued.\\n     *\\n     * @dev This should be called through protected relays if swaps\\n     * are likely occur.\\n     *\\n     * This will account for any gains/losses since the last report\\n     * and charge fees accordingly.\\n     *\\n     * Any profit over the fees charged will be immediately locked\\n     * so there is no change in PricePerShare. Then slowly unlocked\\n     * over the `maxProfitUnlockTime` each second based on the\\n     * calculated `profitUnlockingRate`.\\n     *\\n     * In case of a loss it will first attempt to offset the loss\\n     * with any remaining locked shares from the last report in\\n     * order to reduce any negative impact to PPS.\\n     *\\n     * Will then recalculate the new time to unlock profits over and the\\n     * rate based on a weighted average of any remaining time from the\\n     * last report and the new amount of shares to be locked.\\n     *\\n     * @return profit The notional amount of gain if any since the last\\n     * report in terms of `asset`.\\n     * @return loss The notional amount of loss if any since the last\\n     * report in terms of `asset`.\\n     */\\n    function report()\\n        external\\n        nonReentrant\\n        onlyKeepers\\n        returns (uint256 profit, uint256 loss)\\n    {\\n        // Cache storage pointer since its used repeatedly.\\n        StrategyData storage S = _strategyStorage();\\n\\n        uint256 oldTotalAssets;\\n        unchecked {\\n            // Manually calculate totalAssets to save a SLOAD.\\n            oldTotalAssets = S.totalIdle + S.totalDebt;\\n        }\\n\\n        // Tell the strategy to report the real total assets it has.\\n        // It should do all reward selling and redepositing now and\\n        // account for deployed and loose `asset` so we can accurately\\n        // account for all funds including those potentially airdropped\\n        // by a trade factory. It is safe here to use asset.balanceOf()\\n        // instead of totalIdle because any profits are immediately locked.\\n        uint256 newTotalAssets = IBaseStrategy(address(this))\\n            .harvestAndReport();\\n\\n        // Burn unlocked shares.\\n        _burnUnlockedShares();\\n\\n        // Initialize variables needed throughout.\\n        uint256 totalFees;\\n        uint256 protocolFees;\\n        uint256 sharesToLock;\\n        uint256 _profitMaxUnlockTime = S.profitMaxUnlockTime;\\n        // Calculate profit/loss.\\n        if (newTotalAssets > oldTotalAssets) {\\n            // We have a profit.\\n            unchecked {\\n                profit = newTotalAssets - oldTotalAssets;\\n                // Asses performance fees.\\n                totalFees = (profit * S.performanceFee) / MAX_BPS;\\n            }\\n\\n            address protocolFeesRecipient;\\n            uint256 performanceFeeShares;\\n            uint256 protocolFeeShares;\\n            // If performance fees are 0 so will protocol fees.\\n            if (totalFees != 0) {\\n                // Get the config from the factory.\\n                uint16 protocolFeeBps;\\n                (protocolFeeBps, protocolFeesRecipient) = IFactory(FACTORY)\\n                    .protocolFeeConfig();\\n\\n                // Check if there is a protocol fee to charge.\\n                if (protocolFeeBps != 0) {\\n                    // Calculate protocol fees based on the performance Fees.\\n                    protocolFees = (totalFees * protocolFeeBps) / MAX_BPS;\\n                }\\n\\n                // We need to get the shares to issue for the fees at\\n                // current PPS before any minting or burning.\\n                unchecked {\\n                    performanceFeeShares = convertToShares(\\n                        totalFees - protocolFees\\n                    );\\n                }\\n                if (protocolFees != 0) {\\n                    protocolFeeShares = convertToShares(protocolFees);\\n                }\\n            }\\n\\n            // we have a net profit. Check if we are locking profit.\\n            if (_profitMaxUnlockTime != 0) {\\n                // lock (profit - fees)\\n                unchecked {\\n                    sharesToLock = convertToShares(profit - totalFees);\\n                }\\n                // Mint the shares to lock the strategy.\\n                _mint(address(this), sharesToLock);\\n            }\\n\\n            // Mint fees shares to recipients.\\n            if (performanceFeeShares != 0) {\\n                _mint(S.performanceFeeRecipient, performanceFeeShares);\\n            }\\n\\n            if (protocolFeeShares != 0) {\\n                _mint(protocolFeesRecipient, protocolFeeShares);\\n            }\\n        } else {\\n            // We have a loss.\\n            unchecked {\\n                loss = oldTotalAssets - newTotalAssets;\\n            }\\n\\n            // Check in case else was due to being equal.\\n            if (loss != 0) {\\n                // We will try and burn shares from any pending profit still unlocking\\n                // to offset the loss to prevent any PPS decline post report.\\n                uint256 sharesToBurn = Math.min(\\n                    S.balances[address(this)],\\n                    convertToShares(loss)\\n                );\\n\\n                // Check if there is anything to burn.\\n                if (sharesToBurn != 0) {\\n                    _burn(address(this), sharesToBurn);\\n                }\\n            }\\n        }\\n\\n        // Update unlocking rate and time to fully unlocked.\\n        uint256 totalLockedShares = S.balances[address(this)];\\n        if (totalLockedShares != 0) {\\n            uint256 previouslyLockedTime;\\n            uint128 _fullProfitUnlockDate = S.fullProfitUnlockDate;\\n            // Check if we need to account for shares still unlocking.\\n            if (_fullProfitUnlockDate > block.timestamp) {\\n                unchecked {\\n                    // There will only be previously locked shares if time remains.\\n                    // We calculate this here since it should be rare.\\n                    previouslyLockedTime =\\n                        (_fullProfitUnlockDate - block.timestamp) *\\n                        (totalLockedShares - sharesToLock);\\n                }\\n            }\\n\\n            // newProfitLockingPeriod is a weighted average between the remaining\\n            // time of the previously locked shares and the profitMaxUnlockTime.\\n            uint256 newProfitLockingPeriod = (previouslyLockedTime +\\n                sharesToLock *\\n                _profitMaxUnlockTime) / totalLockedShares;\\n\\n            // Calculate how many shares unlock per second.\\n            S.profitUnlockingRate =\\n                (totalLockedShares * MAX_BPS_EXTENDED) /\\n                newProfitLockingPeriod;\\n\\n            // Calculate how long until the full amount of shares is unlocked.\\n            S.fullProfitUnlockDate = uint128(\\n                block.timestamp + newProfitLockingPeriod\\n            );\\n        } else {\\n            // Only setting this to 0 will turn in the desired effect,\\n            // no need to update fullProfitUnlockDate.\\n            S.profitUnlockingRate = 0;\\n        }\\n\\n        // Update storage we use the actual loose here since it should have\\n        // been accounted for in `harvestAndReport` and any airdropped amounts\\n        // would have been locked to prevent PPS manipulation.\\n        uint256 newIdle = S.asset.balanceOf(address(this));\\n        S.totalIdle = newIdle;\\n        S.totalDebt = newTotalAssets - newIdle;\\n\\n        S.lastReport = uint128(block.timestamp);\\n\\n        // Emit event with info\\n        emit Reported(\\n            profit,\\n            loss,\\n            protocolFees, // Protocol fees\\n            totalFees - protocolFees // Performance Fees\\n        );\\n    }\\n\\n    /**\\n     * @dev Called during reports to burn shares that have been unlocked\\n     * since the last report.\\n     *\\n     * Will reset the `lastReport` if haven't unlocked the full amount yet\\n     * so future calculations remain correct.\\n     */\\n    function _burnUnlockedShares() private {\\n        uint256 unlocked = _unlockedShares();\\n        if (unlocked == 0) {\\n            return;\\n        }\\n\\n        // update variables (done here to keep _unlockedShares() as a view function)\\n        if (_strategyStorage().fullProfitUnlockDate > block.timestamp) {\\n            _strategyStorage().lastReport = uint128(block.timestamp);\\n        }\\n\\n        _burn(address(this), unlocked);\\n    }\\n\\n    /**\\n     * @notice Get how many shares have been unlocked since last report.\\n     * @return . The amount of shares that have unlocked.\\n     */\\n    function unlockedShares() external view returns (uint256) {\\n        return _unlockedShares();\\n    }\\n\\n    /**\\n     * @dev To determine how many of the shares that were locked during the last\\n     * report have since unlocked.\\n     *\\n     * If the `fullProfitUnlockDate` has passed the full strategy's balance will\\n     * count as unlocked.\\n     *\\n     * @return unlocked The amount of shares that have unlocked.\\n     */\\n    function _unlockedShares() private view returns (uint256 unlocked) {\\n        // should save 2 extra calls for most scenarios.\\n        StrategyData storage S = _strategyStorage();\\n        uint128 _fullProfitUnlockDate = S.fullProfitUnlockDate;\\n        if (_fullProfitUnlockDate > block.timestamp) {\\n            unchecked {\\n                unlocked =\\n                    (S.profitUnlockingRate * (block.timestamp - S.lastReport)) /\\n                    MAX_BPS_EXTENDED;\\n            }\\n        } else if (_fullProfitUnlockDate != 0) {\\n            // All shares have been unlocked.\\n            unlocked = S.balances[address(this)];\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        TENDING LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice For a 'keeper' to 'tend' the strategy if a custom\\n     * tendTrigger() is implemented.\\n     *\\n     * @dev Both 'tendTrigger' and '_tend' will need to be overridden\\n     * for this to be used.\\n     *\\n     * This will callback the internal '_tend' call in the BaseStrategy\\n     * with the total current amount available to the strategy to deploy.\\n     *\\n     * Keepers are expected to use protected relays in tend calls so this\\n     * can be used for illiquid or manipulatable strategies to compound\\n     * rewards, perform maintenance or deposit/withdraw funds.\\n     *\\n     * All accounting for totalDebt and totalIdle updates will be done\\n     * here post '_tend'.\\n     *\\n     * This should never cause an increase in PPS. Total assets should\\n     * be the same before and after\\n     *\\n     * A report() call will be needed to record the profit.\\n     */\\n    function tend() external nonReentrant onlyKeepers {\\n        // Tend the strategy with the current totalIdle.\\n        IBaseStrategy(address(this)).tendThis(_strategyStorage().totalIdle);\\n\\n        // Update balances based on ending state.\\n        _updateBalances();\\n    }\\n\\n    /**\\n     * @notice Update the internal balances that make up `totalAssets`.\\n     * @dev This will update the ratio of debt and idle that make up\\n     * totalAssets based on the actual current loose amount of `asset`\\n     * in a safe way. But will keep `totalAssets` the same, thus having\\n     * no effect on Price Per Share.\\n     */\\n    function _updateBalances() internal {\\n        StrategyData storage S = _strategyStorage();\\n\\n        // Get the current loose balance.\\n        uint256 assetBalance = S.asset.balanceOf(address(this));\\n\\n        // If its already accurate do nothing.\\n        if (S.totalIdle == assetBalance) return;\\n\\n        // Get the total assets the strategy should have.\\n        uint256 _totalAssets = totalAssets();\\n\\n        // If we have enough loose to cover all assets.\\n        if (assetBalance >= _totalAssets) {\\n            // Set idle to totalAssets.\\n            S.totalIdle = _totalAssets;\\n            // Set debt to 0.\\n            S.totalDebt = 0;\\n        } else {\\n            // Otherwise idle is the actual loose balance.\\n            S.totalIdle = assetBalance;\\n            unchecked {\\n                // And debt is the difference.\\n                S.totalDebt = _totalAssets - assetBalance;\\n            }\\n        }\\n\\n        // Enforce the invariant.\\n        require(_totalAssets == totalAssets(), \\\"!totalAssets\\\");\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        STRATEGY SHUTDOWN\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Used to shutdown the strategy preventing any further deposits.\\n     * @dev Can only be called by the current `management` or `emergencyAdmin`.\\n     *\\n     * This will stop any new {deposit} or {mint} calls but will\\n     * not prevent {withdraw} or {redeem}. It will also still allow for\\n     * {tend} and {report} so that management can report any last losses\\n     * in an emergency as well as provide any maintenance to allow for full\\n     * withdraw.\\n     *\\n     * This is a one way switch and can never be set back once shutdown.\\n     */\\n    function shutdownStrategy() external onlyEmergencyAuthorized {\\n        _strategyStorage().shutdown = true;\\n\\n        emit StrategyShutdown();\\n    }\\n\\n    /**\\n     * @notice To manually withdraw funds from the yield source after a\\n     * strategy has been shutdown.\\n     * @dev This can only be called post {shutdownStrategy}.\\n     *\\n     * This will update totalDebt and totalIdle based on the amount of\\n     * loose `asset` after the withdraw leaving `totalAssets` unchanged.\\n     *\\n     * A strategist will need to override the {_emergencyWithdraw} function\\n     * in their strategy for this to work.\\n     *\\n     * @param amount The amount of asset to attempt to free.\\n     */\\n    function emergencyWithdraw(\\n        uint256 amount\\n    ) external nonReentrant onlyEmergencyAuthorized {\\n        // Make sure the strategy has been shutdown.\\n        require(_strategyStorage().shutdown, \\\"not shutdown\\\");\\n\\n        // Withdraw from the yield source.\\n        IBaseStrategy(address(this)).shutdownWithdraw(amount);\\n\\n        // Record the updated balances based on the new amounts.\\n        _updateBalances();\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        GETTER FUNCTIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Get the underlying asset for the strategy.\\n     * @return . The underlying asset.\\n     */\\n    function asset() external view returns (address) {\\n        return address(_strategyStorage().asset);\\n    }\\n\\n    /**\\n     * @notice Get the API version for this TokenizedStrategy.\\n     * @return . The API version for this TokenizedStrategy\\n     */\\n    function apiVersion() external pure returns (string memory) {\\n        return API_VERSION;\\n    }\\n\\n    /**\\n     * @notice Get the current total idle for a strategy.\\n     * @return . The current amount of idle funds.\\n     */\\n    function totalIdle() external view returns (uint256) {\\n        return _strategyStorage().totalIdle;\\n    }\\n\\n    /**\\n     * @notice Get the current total debt for a strategy.\\n     * @return . The current amount of debt.\\n     */\\n    function totalDebt() external view returns (uint256) {\\n        return _strategyStorage().totalDebt;\\n    }\\n\\n    /**\\n     * @notice Get the current address that controls the strategy.\\n     * @return . Address of management\\n     */\\n    function management() external view returns (address) {\\n        return _strategyStorage().management;\\n    }\\n\\n    /**\\n     * @notice Get the current pending management address if any.\\n     * @return . Address of pendingManagement\\n     */\\n    function pendingManagement() external view returns (address) {\\n        return _strategyStorage().pendingManagement;\\n    }\\n\\n    /**\\n     * @notice Get the current address that can call tend and report.\\n     * @return . Address of the keeper\\n     */\\n    function keeper() external view returns (address) {\\n        return _strategyStorage().keeper;\\n    }\\n\\n    /**\\n     * @notice Get the current address that can shutdown and emergency withdraw.\\n     * @return . Address of the emergencyAdmin\\n     */\\n    function emergencyAdmin() external view returns (address) {\\n        return _strategyStorage().emergencyAdmin;\\n    }\\n\\n    /**\\n     * @notice Get the current performance fee charged on profits.\\n     * denominated in Basis Points where 10_000 == 100%\\n     * @return . Current performance fee.\\n     */\\n    function performanceFee() external view returns (uint16) {\\n        return _strategyStorage().performanceFee;\\n    }\\n\\n    /**\\n     * @notice Get the current address that receives the performance fees.\\n     * @return . Address of performanceFeeRecipient\\n     */\\n    function performanceFeeRecipient() external view returns (address) {\\n        return _strategyStorage().performanceFeeRecipient;\\n    }\\n\\n    /**\\n     * @notice Gets the timestamp at which all profits will be unlocked.\\n     * @return . The full profit unlocking timestamp\\n     */\\n    function fullProfitUnlockDate() external view returns (uint256) {\\n        return uint256(_strategyStorage().fullProfitUnlockDate);\\n    }\\n\\n    /**\\n     * @notice The per second rate at which profits are unlocking.\\n     * @dev This is denominated in EXTENDED_BPS decimals.\\n     * @return . The current profit unlocking rate.\\n     */\\n    function profitUnlockingRate() external view returns (uint256) {\\n        return _strategyStorage().profitUnlockingRate;\\n    }\\n\\n    /**\\n     * @notice Gets the current time profits are set to unlock over.\\n     * @return . The current profit max unlock time.\\n     */\\n    function profitMaxUnlockTime() external view returns (uint256) {\\n        return _strategyStorage().profitMaxUnlockTime;\\n    }\\n\\n    /**\\n     * @notice The timestamp of the last time protocol fees were charged.\\n     * @return . The last report.\\n     */\\n    function lastReport() external view returns (uint256) {\\n        return uint256(_strategyStorage().lastReport);\\n    }\\n\\n    /**\\n     * @notice Get the price per share.\\n     * @dev This value offers limited precision. Integrations that require\\n     * exact precision should use convertToAssets or convertToShares instead.\\n     *\\n     * @return . The price per share.\\n     */\\n    function pricePerShare() external view returns (uint256) {\\n        return convertToAssets(10 ** _strategyStorage().decimals);\\n    }\\n\\n    /**\\n     * @notice To check if the strategy has been shutdown.\\n     * @return . Whether or not the strategy is shutdown.\\n     */\\n    function isShutdown() public view returns (bool) {\\n        return _strategyStorage().shutdown;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        SETTER FUNCTIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Step one of two to set a new address to be in charge of the strategy.\\n     * @dev Can only be called by the current `management`. The address is\\n     * set to pending management and will then have to call {acceptManagement}\\n     * in order for the 'management' to officially change.\\n     *\\n     * Cannot set `management` to address(0).\\n     *\\n     * @param _management New address to set `pendingManagement` to.\\n     */\\n    function setPendingManagement(address _management) external onlyManagement {\\n        require(_management != address(0), \\\"ZERO ADDRESS\\\");\\n        _strategyStorage().pendingManagement = _management;\\n\\n        emit UpdatePendingManagement(_management);\\n    }\\n\\n    /**\\n     * @notice Step two of two to set a new 'management' of the strategy.\\n     * @dev Can only be called by the current `pendingManagement`.\\n     */\\n    function acceptManagement() external {\\n        require(msg.sender == _strategyStorage().pendingManagement, \\\"!pending\\\");\\n        _strategyStorage().management = msg.sender;\\n        _strategyStorage().pendingManagement = address(0);\\n\\n        emit UpdateManagement(msg.sender);\\n    }\\n\\n    /**\\n     * @notice Sets a new address to be in charge of tend and reports.\\n     * @dev Can only be called by the current `management`.\\n     *\\n     * @param _keeper New address to set `keeper` to.\\n     */\\n    function setKeeper(address _keeper) external onlyManagement {\\n        _strategyStorage().keeper = _keeper;\\n\\n        emit UpdateKeeper(_keeper);\\n    }\\n\\n    /**\\n     * @notice Sets a new address to be able to shutdown the strategy.\\n     * @dev Can only be called by the current `management`.\\n     *\\n     * @param _emergencyAdmin New address to set `emergencyAdmin` to.\\n     */\\n    function setEmergencyAdmin(\\n        address _emergencyAdmin\\n    ) external onlyManagement {\\n        _strategyStorage().emergencyAdmin = _emergencyAdmin;\\n\\n        emit UpdateEmergencyAdmin(_emergencyAdmin);\\n    }\\n\\n    /**\\n     * @notice Sets the performance fee to be charged on reported gains.\\n     * @dev Can only be called by the current `management`.\\n     *\\n     * Denominated in Basis Points. So 100% == 10_000.\\n     * Cannot be set less than the MIN_FEE.\\n     * Cannot set greater than to MAX_FEE.\\n     *\\n     * @param _performanceFee New performance fee.\\n     */\\n    function setPerformanceFee(uint16 _performanceFee) external onlyManagement {\\n        require(_performanceFee >= MIN_FEE, \\\"MIN FEE\\\");\\n        require(_performanceFee <= MAX_FEE, \\\"MAX FEE\\\");\\n        _strategyStorage().performanceFee = _performanceFee;\\n\\n        emit UpdatePerformanceFee(_performanceFee);\\n    }\\n\\n    /**\\n     * @notice Sets a new address to receive performance fees.\\n     * @dev Can only be called by the current `management`.\\n     *\\n     * Cannot set to address(0).\\n     *\\n     * @param _performanceFeeRecipient New address to set `management` to.\\n     */\\n    function setPerformanceFeeRecipient(\\n        address _performanceFeeRecipient\\n    ) external onlyManagement {\\n        require(_performanceFeeRecipient != address(0), \\\"ZERO ADDRESS\\\");\\n        require(_performanceFeeRecipient != address(this), \\\"Cannot be self\\\");\\n        _strategyStorage().performanceFeeRecipient = _performanceFeeRecipient;\\n\\n        emit UpdatePerformanceFeeRecipient(_performanceFeeRecipient);\\n    }\\n\\n    /**\\n     * @notice Sets the time for profits to be unlocked over.\\n     * @dev Can only be called by the current `management`.\\n     *\\n     * Denominated in seconds and cannot be greater than 1 year.\\n     *\\n     * NOTE: Setting to 0 will cause all currently locked profit\\n     * to be unlocked instantly and should be done with care.\\n     *\\n     * `profitMaxUnlockTime` is stored as a uint32 for packing but can\\n     * be passed in as uint256 for simplicity.\\n     *\\n     * @param _profitMaxUnlockTime New `profitMaxUnlockTime`.\\n     */\\n    function setProfitMaxUnlockTime(\\n        uint256 _profitMaxUnlockTime\\n    ) external onlyManagement {\\n        // Must be less than a year.\\n        require(_profitMaxUnlockTime <= SECONDS_PER_YEAR, \\\"too long\\\");\\n        StrategyData storage S = _strategyStorage();\\n\\n        // If we are setting to 0 we need to adjust amounts.\\n        if (_profitMaxUnlockTime == 0) {\\n            // Burn all shares if applicable.\\n            _burn(address(this), S.balances[address(this)]);\\n            // Reset unlocking variables\\n            S.profitUnlockingRate = 0;\\n            S.fullProfitUnlockDate = 0;\\n        }\\n\\n        S.profitMaxUnlockTime = uint32(_profitMaxUnlockTime);\\n\\n        emit UpdateProfitMaxUnlockTime(_profitMaxUnlockTime);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        ERC20 FUNCTIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Returns the name of the token.\\n     * @return . The name the strategy is using for its token.\\n     */\\n    function name() external view returns (string memory) {\\n        return _strategyStorage().name;\\n    }\\n\\n    /**\\n     * @notice Returns the symbol of the strategies token.\\n     * @dev Will be 'ys + asset symbol'.\\n     * @return . The symbol the strategy is using for its tokens.\\n     */\\n    function symbol() public view returns (string memory) {\\n        return\\n            string(abi.encodePacked(\\\"ys\\\", _strategyStorage().asset.symbol()));\\n    }\\n\\n    /**\\n     * @notice Returns the number of decimals used to get its user representation.\\n     * @return . The decimals used for the strategy and `asset`.\\n     */\\n    function decimals() public view returns (uint8) {\\n        return _strategyStorage().decimals;\\n    }\\n\\n    /**\\n     * @notice Returns the current balance for a given '_account'.\\n     * @dev If the '_account` is the strategy then this will subtract\\n     * the amount of shares that have been unlocked since the last profit first.\\n     * @param account the address to return the balance for.\\n     * @return . The current balance in y shares of the '_account'.\\n     */\\n    function balanceOf(address account) public view returns (uint256) {\\n        if (account == address(this)) {\\n            return _strategyStorage().balances[account] - _unlockedShares();\\n        }\\n        return _strategyStorage().balances[account];\\n    }\\n\\n    /**\\n     * @notice Transfer '_amount` of shares from `msg.sender` to `to`.\\n     * @dev\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `to` cannot be the address of the strategy.\\n     * - the caller must have a balance of at least `_amount`.\\n     *\\n     * @param to The address shares will be transferred to.\\n     * @param amount The amount of shares to be transferred from sender.\\n     * @return . a boolean value indicating whether the operation succeeded.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool) {\\n        _transfer(msg.sender, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     * @param owner The address who owns the shares.\\n     * @param spender The address who would be moving the owners shares.\\n     * @return . The remaining amount of shares of `owner` that could be moved by `spender`.\\n     */\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) public view returns (uint256) {\\n        return _strategyStorage().allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @notice Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     * @dev\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * @param spender the address to allow the shares to be moved by.\\n     * @param amount the amount of shares to allow `spender` to move.\\n     * @return . a boolean value indicating whether the operation succeeded.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool) {\\n        _approve(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * @dev\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `to` cannot be the address of the strategy.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * @param from the address to be moving shares from.\\n     * @param to the address to be moving shares to.\\n     * @param amount the quantity of shares to move.\\n     * @return . a boolean value indicating whether the operation succeeded.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public returns (bool) {\\n        _spendAllowance(from, msg.sender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * @dev This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - cannot give spender over uint256.max allowance\\n     *\\n     * @param spender the account that will be able to move the senders shares.\\n     * @param addedValue the extra amount to add to the current allowance.\\n     * @return . a boolean value indicating whether the operation succeeded.\\n     */\\n    function increaseAllowance(\\n        address spender,\\n        uint256 addedValue\\n    ) external returns (bool) {\\n        address owner = msg.sender;\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * @dev This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     *\\n     * @param spender the account that will be able to move less of the senders shares.\\n     * @param subtractedValue the amount to decrease the current allowance by.\\n     * @return . a boolean value indicating whether the operation succeeded.\\n     */\\n    function decreaseAllowance(\\n        address spender,\\n        uint256 subtractedValue\\n    ) external returns (bool) {\\n        address owner = msg.sender;\\n        _approve(owner, spender, allowance(owner, spender) - subtractedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `to` cannot be the strategies address\\n     * - `from` must have a balance of at least `amount`.\\n     *\\n     */\\n    function _transfer(address from, address to, uint256 amount) private {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n        require(to != address(this), \\\"ERC20 transfer to strategy\\\");\\n        StrategyData storage S = _strategyStorage();\\n\\n        S.balances[from] -= amount;\\n        unchecked {\\n            S.balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     *\\n     */\\n    function _mint(address account, uint256 amount) private {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n        StrategyData storage S = _strategyStorage();\\n\\n        S.totalSupply += amount;\\n        unchecked {\\n            S.balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) private {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n        StrategyData storage S = _strategyStorage();\\n\\n        S.balances[account] -= amount;\\n        unchecked {\\n            S.totalSupply -= amount;\\n        }\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) private {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _strategyStorage().allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) private {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(\\n                currentAllowance >= amount,\\n                \\\"ERC20: insufficient allowance\\\"\\n            );\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * @dev Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     *\\n     * @param _owner the address of the account to return the nonce for.\\n     * @return . the current nonce for the account.\\n     */\\n    function nonces(address _owner) external view returns (uint256) {\\n        return _strategyStorage().nonces[_owner];\\n    }\\n\\n    /**\\n     * @notice Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * @dev IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        require(deadline >= block.timestamp, \\\"ERC20: PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            address recoveredAddress = ecrecover(\\n                keccak256(\\n                    abi.encodePacked(\\n                        \\\"\\\\x19\\\\x01\\\",\\n                        DOMAIN_SEPARATOR(),\\n                        keccak256(\\n                            abi.encode(\\n                                keccak256(\\n                                    \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n                                ),\\n                                owner,\\n                                spender,\\n                                value,\\n                                _strategyStorage().nonces[owner]++,\\n                                deadline\\n                            )\\n                        )\\n                    )\\n                ),\\n                v,\\n                r,\\n                s\\n            );\\n\\n            require(\\n                recoveredAddress != address(0) && recoveredAddress == owner,\\n                \\\"ERC20: INVALID_SIGNER\\\"\\n            );\\n\\n            _approve(recoveredAddress, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns the domain separator used in the encoding of the signature\\n     * for {permit}, as defined by {EIP712}.\\n     *\\n     * @dev This checks that the current chain id is the same as when the contract\\n     * was deployed to prevent replay attacks. If false it will calculate a new\\n     * domain separator based on the new chain id.\\n     *\\n     * @return . The domain separator that will be used for any {permit} calls.\\n     */\\n    function DOMAIN_SEPARATOR() public view returns (bytes32) {\\n        StrategyData storage S = _strategyStorage();\\n        return\\n            block.chainid == S.INITIAL_CHAIN_ID\\n                ? S.INITIAL_DOMAIN_SEPARATOR\\n                : _computeDomainSeparator();\\n    }\\n\\n    /**\\n     * @dev Calculates and returns the domain separator to be used in any\\n     * permit functions for the strategies {permit} calls.\\n     *\\n     * This will be used at the initialization of each new strategies storage.\\n     * It would then be used in the future in the case of any forks in which\\n     * the current chain id is not the same as the original.\\n     *\\n     */\\n    function _computeDomainSeparator() private view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\n                        \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n                    ),\\n                    keccak256(bytes(_strategyStorage().name)),\\n                    keccak256(bytes(API_VERSION)),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            DEPLOYMENT\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @dev On contract creation we set `asset` for this contract to address(1).\\n     * This prevents it from ever being initialized in the future.\\n     */\\n    constructor() {\\n        _strategyStorage().asset = ERC20(address(1));\\n    }\\n}\",\"keccak256\":\"0x187e945de0ae35a2a035cbe0d84b04c259b9f50c6e176075315fd9ba7f0d9bf1\",\"license\":\"AGPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60806040526000196001553480156200001757600080fd5b5060405162004dfb38038062004dfb8339810160408190526200003a916200039a565b600162000046620001e1565b80546001600160a01b0319166001600160a01b0392909216919091179055600062000070620001e1565b80546001600160a01b0319166001600160a01b0388161781559050600181016200009b868262000537565b50856001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015620000db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200010191906200061e565b815460ff91909116600160a01b0260ff60a01b19909116178155600b810180546001600160801b03428116600160801b0291161790556001600160a01b038416620001695760405162461bcd60e51b8152600401620001609062000643565b60405180910390fd5b600d810180546001600160a01b03199081166001600160a01b03968716908117909255600c83018054600e9094018054909216959096169490941790935565ffff00000001600160d01b031916660100000000000090920263ffffffff19169190911763ffffffff91909116179055506200069a9050565b6000806200021160017fd2841a5d2692465040bd5e06a6f3b37483952c866e0f304dc0e03f76a1f8a0b162000684565b92915050565b60006001600160a01b03821662000211565b620002348162000217565b81146200024057600080fd5b50565b8051620002118162000229565b634e487b7160e01b600052604160045260246000fd5b601f19601f83011681018181106001600160401b03821117156200028e576200028e62000250565b6040525050565b6000620002a160405190565b9050620002af828262000266565b919050565b60006001600160401b03821115620002d057620002d062000250565b601f19601f83011660200192915050565b60005b83811015620002fe578181015183820152602001620002e4565b50506000910152565b60006200031e6200031884620002b4565b62000295565b9050828152602081018484840111156200033b576200033b600080fd5b62000348848285620002e1565b509392505050565b600082601f830112620003665762000366600080fd5b81516200037884826020860162000307565b949350505050565b63ffffffff811662000234565b8051620002118162000380565b600080600080600060a08688031215620003b757620003b7600080fd5b6000620003c5888862000243565b95505060208601516001600160401b03811115620003e657620003e6600080fd5b620003f48882890162000350565b9450506040620004078882890162000243565b93505060606200041a8882890162000243565b92505060806200042d888289016200038d565b9150509295509295909350565b634e487b7160e01b600052602260045260246000fd5b6002810460018216806200046557607f821691505b6020821081036200047a576200047a6200043a565b50919050565b6000620002116200048e8381565b90565b6200049c8362000480565b81546008840282811b60001990911b908116901990911617825550505050565b6000620004cb81848462000491565b505050565b81811015620004ef57620004e6600082620004bc565b600101620004d0565b5050565b601f821115620004cb576000818152602090206020601f850104810160208510156200051c5750805b620005306020601f860104830182620004d0565b5050505050565b81516001600160401b0381111562000553576200055362000250565b6200055f825462000450565b6200056c828285620004f3565b6020601f831160018114620005a357600084156200058a5750858201515b600019600886021c1981166002860217865550620005ff565b600085815260208120601f198616915b82811015620005d55788850151825560209485019460019092019101620005b3565b86831015620005f25784890151600019601f89166008021c191682555b6001600288020188555050505b505050505050565b60ff811662000234565b8051620002118162000607565b600060208284031215620006355762000635600080fd5b600062000378848462000611565b602080825281016200021181600c81526b5a45524f204144445245535360a01b602082015260400190565b634e487b7160e01b600052601160045260246000fd5b818103818111156200021157620002116200066e565b61475180620006aa6000396000f3fe608060405234801561001057600080fd5b50600436106103745760003560e01c80637ecebe00116101d15780637ecebe0014610611578063877887821461062457806388a8d6021461062c57806394bf804d1461063457806395d89b411461064757806399530b061461064f5780639aa7df94146106575780639d6fdde71461065f5780639f40a7b314610672578063a318c1a414610685578063a457c2d714610698578063a9059cbb146106ab578063aa290e6d146106be578063aced1661146106d1578063b3d7f6b9146106d9578063b460af94146106ec578063ba087652146106ff578063bc063e1a14610712578063be8f16681461071b578063bf86d69014610723578063c3535b521461072b578063c63d75b614610733578063c6e6f59214610746578063c8c2fe6c14610759578063ce96cb7714610761578063d0064c0014610774578063d505accf1461077d578063d905777e14610790578063d9a0e97a146107a3578063dd62ed3e146107ab578063df69b22a146107be578063e11a6cb3146107d1578063ec0c7e28146107d9578063ed27f7c9146107ec578063ef8b30f7146107f4578063f17336d714610807578063f629b79014610810578063fc7b9c181461082357600080fd5b806301e1d1141461037957806304bd46291461039757806306fdde03146103ac57806307a2d13a146103c15780630952864e146103d4578063095ea7b3146103dc5780630a28a477146103fc5780630b68f46f1461040f57806318160ddd146104245780631d3b72271461042c57806323b872dd1461043f57806325829410146104525780632606a10b146104735780632d632692146104895780632dd31000146104915780632ecfe315146104ac578063313ce567146104c157806335da3394146104d65780633644e515146104e957806338d52e0f146104f157806339509351146104f95780633d6cb5751461050c578063402d267d1461051d578063440368a31461053057806346aa2f121461053857806349317f1d1461054b5780634cdad50614610553578063503160d91461050c5780635141eebb146105665780635312ea8e1461056e5780636234dc21146105815780636526941b146105945780636a5f1aa2146105a75780636e553f65146105ba57806370905dce146105cd57806370a08231146105d5578063748747e6146105e857806376c7a3c7146105fb575b600080fd5b61038161082b565b60405161038e91906131a8565b60405180910390f35b6103816103a53660046131e6565b5060001990565b6103b4610848565b60405161038e9190613269565b6103816103cf36600461328b565b6108e3565b610381610919565b6103ef6103ea3660046132ac565b610932565b60405161038e91906132f1565b61038161040a36600461328b565b610949565b61041761098e565b60405161038e9190613308565b6103816109aa565b6103ef61043a3660046131e6565b6109cf565b6103ef61044d366004613316565b610a2f565b604080518082019091526005815264332e302e3160d81b60208201526103b4565b61047b610a51565b60405161038e929190613366565b610381610ea9565b610417735615deb798bb3e4dfa0139dfa1b3d433cc23b72f81565b6104bf6104ba366004613477565b610ec5565b005b6104c961111c565b60405161038e9190613512565b6104bf6104e43660046131e6565b611136565b610381611196565b6104176111c7565b6103ef6105073660046132ac565b6111e0565b6104bf61051a36600461328b565b50565b61038161052b3660046131e6565b611202565b6104bf61128b565b6103816105463660046131e6565b61135b565b610381611388565b61038161056136600461328b565b611401565b61038161140c565b6104bf61057c36600461328b565b61141f565b6104bf61058f36600461328b565b600055565b6104bf6105a236600461328b565b600155565b6104bf6105b53660046131e6565b611517565b6103816105c8366004613520565b6115ce565b61041761168f565b6103816105e33660046131e6565b6116ab565b6104bf6105f63660046131e6565b61171e565b6106046101f481565b60405161038e919061355d565b61038161061f3660046131e6565b61177e565b6106046117aa565b6104176117c8565b610381610642366004613520565b6117e4565b6103b4611891565b61038161192f565b610381611952565b6103ef61066d3660046131e6565b611965565b61038161068036600461356b565b6119bc565b61038161069336600461356b565b611a86565b6103ef6106a63660046132ac565b611b4c565b6103ef6106b93660046132ac565b611b69565b6104bf6106cc3660046135e4565b611b76565b610417611c2c565b6103816106e736600461328b565b611c48565b6103816106fa366004613605565b611c70565b61038161070d366004613605565b611c7f565b61060461138881565b6104bf611c8f565b6103ef611ceb565b610381611d08565b6103816107413660046131e6565b611d2b565b61038161075436600461328b565b611dcd565b6104bf611e08565b61038161076f3660046131e6565b611ebd565b61038160015481565b6104bf61078b36600461365f565b611f50565b61038161079e3660046131e6565b6120ca565b61038161215a565b6103816107b93660046136fe565b612164565b6104bf6107cc36600461328b565b61219e565b610381612269565b6103ef6107e73660046131e6565b612285565b6104176122c5565b61038161080236600461328b565b6122e8565b61038160005481565b6104bf61081e3660046131e6565b6122f3565b610381612379565b60008061083661238c565b60098101546008909101540192915050565b606061085261238c565b600101805461086090613736565b80601f016020809104026020016040519081016040528092919081815260200182805461088c90613736565b80156108d95780601f106108ae576101008083540402835291602001916108d9565b820191906000526020600020905b8154815290600101906020018083116108bc57829003601f168201915b5050505050905090565b6000806108ee6109aa565b905080156109105761090b61090161082b565b84908360006123a8565b610912565b825b9392505050565b600061092361238c565b600c015463ffffffff16919050565b600061093f338484612405565b5060015b92915050565b60008061095461082b565b905060006109606109aa565b905081600003610981578015610977576000610979565b835b949350505050565b61097984828460016123a8565b600061099861238c565b600f01546001600160a01b0316919050565b60006109b46124cb565b6109bc61238c565b600201546109ca9190613778565b905090565b6000806109da61238c565b600e8101549091506001600160a01b0384811691161480610a0a5750600d8101546001600160a01b038481169116145b61093f5760405162461bcd60e51b8152600401610a26906137ac565b60405180910390fd5b6000610a3c843384612544565b610a4784848461258e565b5060019392505050565b6000806000610a5e61238c565b6010810154909150600160a01b900460ff1615610a8d5760405162461bcd60e51b8152600401610a26906137f0565b60108101805460ff60a01b1916600160a01b179055610aab336109cf565b506000610ab661238c565b90506000816009015482600801540190506000306001600160a01b03166349317f1d6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610b09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2d919061380b565b9050610b37612692565b600c8301546000908190819063ffffffff1685851115610c9757600c8701548686039a5061271090600160201b900461ffff168b02049350600080808615610c3d576000735615deb798bb3e4dfa0139dfa1b3d433cc23b72f6001600160a01b03166307d3277f6040518163ffffffff1660e01b81526004016040805180830381865afa158015610bcc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf09190613858565b9450905061ffff811615610c1c57612710610c0f61ffff83168a61388b565b610c1991906138aa565b96505b610c27878903611dcd565b92508615610c3b57610c3887611dcd565b91505b505b8315610c5a57610c4e878e03611dcd565b9450610c5a30866126f7565b8115610c7f57600c8a0154610c7f90600160301b90046001600160a01b0316836126f7565b8015610c8f57610c8f83826126f7565b505050610cdc565b848603985088600014610cdc57306000908152600688016020526040812054610cc890610cc38c611dcd565b61277f565b90508015610cda57610cda308261278e565b505b3060009081526006880160205260409020548015610d9757600b8801546000906001600160801b031642811115610d205784830342826001600160801b0316030291505b600083610d2d868861388b565b610d3790856138be565b610d4191906138aa565b905080610d5364e8d4a510008661388b565b610d5d91906138aa565b600a8c0155610d6c81426138be565b600b8c0180546001600160801b0319166001600160801b039290921691909117905550610d9f915050565b6000600a8901555b87546040516370a0823160e01b81526000916001600160a01b0316906370a0823190610dcf903090600401613308565b602060405180830381865afa158015610dec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e10919061380b565b60088a018190559050610e238188613778565b60098a0155600b890180546001600160801b03428116600160801b0291161790557fecdd072e4d5bd913a75a37f02daedcea7e2dc0281f9942c0063cfd1cfe5c4c4f8c8c87610e72818b613778565b604051610e8294939291906138d1565b60405180910390a15050506010909601805460ff60a01b1916905550959694955050505050565b6000610eb361238c565b600b01546001600160801b0316919050565b6000610ecf61238c565b80549091506001600160a01b031615610efa5760405162461bcd60e51b8152600401610a2690613928565b80546001600160a01b0319166001600160a01b03871617815560018101610f218682613a04565b50856001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f849190613acd565b815460ff91909116600160a01b0260ff60a01b19909116178155466003820155610fac612829565b6004820155600c8101805463ffffffff1916620d2f001790556001600160a01b038316610feb5760405162461bcd60e51b8152600401610a2690613b11565b306001600160a01b038416036110135760405162461bcd60e51b8152600401610a2690613b3c565b600c81018054607d60231b61ffff60201b196001600160a01b03808816600160301b0291909116600160201b600160d01b03199093169290921717909155600b820180546001600160801b03428116600160801b029116179055841661108b5760405162461bcd60e51b8152600401610a2690613b11565b600d810180546001600160a01b038087166001600160a01b031992831617909255600e8301805485841692169190911790556040805180820182526005815264332e302e3160d81b602082015290519188169130917ffb1616746b8474b6b7c67f2fe5ada156ed24774d0efe8bfe529cf537ba1733309161110c9190613269565b60405180910390a3505050505050565b600061112661238c565b54600160a01b900460ff16919050565b61113f33612285565b508061114961238c565b60100180546001600160a01b0319166001600160a01b03928316179055604051908216907f2bf242d027263e45fab022c28b4144255c97b30b8e54c30f1f5757906d487f0990600090a250565b6000806111a161238c565b9050806003015446146111bb576111b6612829565b6111c1565b80600401545b91505090565b60006111d161238c565b546001600160a01b0316919050565b600033610a478185856111f38383612164565b6111fd91906138be565b612405565b600061120c61238c565b60100154600160a81b900460ff161561122757506000919050565b604051632355178960e11b815230906346aa2f129061124a908590600401613308565b602060405180830381865afa158015611267573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610943919061380b565b600061129561238c565b6010810154909150600160a01b900460ff16156112c45760405162461bcd60e51b8152600401610a26906137f0565b60108101805460ff60a01b1916600160a01b1790556112e2336109cf565b5030639d7fb70c6112f161238c565b600801546040518263ffffffff1660e01b815260040161131191906131a8565b600060405180830381600087803b15801561132b57600080fd5b505af115801561133f573d6000803e3d6000fd5b5050505061134b6128d4565b601001805460ff60a01b19169055565b60008061136661238c565b6008015460015490915081811161137e576000610979565b6109798282613778565b600061139261238c565b546040516370a0823160e01b81526001600160a01b03909116906370a08231906113c0903090600401613308565b602060405180830381865afa1580156113dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109ca919061380b565b6000610943826108e3565b600061141661238c565b600a0154905090565b600061142961238c565b6010810154909150600160a01b900460ff16156114585760405162461bcd60e51b8152600401610a26906137f0565b60108101805460ff60a01b1916600160a01b17905561147633611965565b5061147f61238c565b60100154600160a81b900460ff166114a95760405162461bcd60e51b8152600401610a2690613b6f565b604051631fbd027560e31b8152309063fde813a8906114cc9085906004016131a8565b600060405180830381600087803b1580156114e657600080fd5b505af11580156114fa573d6000803e3d6000fd5b505050506115066128d4565b601001805460ff60a01b1916905550565b61152033612285565b506001600160a01b0381166115475760405162461bcd60e51b8152600401610a2690613b11565b306001600160a01b0382160361156f5760405162461bcd60e51b8152600401610a2690613ba4565b8061157861238c565b600c018054600160301b600160d01b031916600160301b6001600160a01b0393841602179055604051908216907f9ebbf695dd251e855d9d15a146a72f5f654dc6f8630fbc11212f27e0c88ba11a90600090a250565b6000806115d961238c565b6010810154909150600160a01b900460ff16156116085760405162461bcd60e51b8152600401610a26906137f0565b60108101805460ff60a01b1916600160a01b17905561162683611202565b8411156116455760405162461bcd60e51b8152600401610a2690613be8565b61164e846122e8565b9150816000036116705760405162461bcd60e51b8152600401610a2690613c1a565b61167b8385846129c6565b601001805460ff60a01b1916905592915050565b600061169961238c565b601001546001600160a01b0316919050565b6000306001600160a01b038316036116f4576116c56124cb565b6116cd61238c565b6001600160a01b038416600090815260069190910160205260409020546109439190613778565b6116fc61238c565b6001600160a01b03909216600090815260069290920160205250604090205490565b61172733612285565b508061173161238c565b600e0180546001600160a01b0319166001600160a01b03928316179055604051908216907fd7f49e282c36d417b290d4181a56943f6d670aaa2987c0d40e60d39919c6888290600090a250565b600061178861238c565b6001600160a01b03909216600090815260059290920160205250604090205490565b60006117b461238c565b600c0154600160201b900461ffff16919050565b60006117d261238c565b600d01546001600160a01b0316919050565b6000806117ef61238c565b6010810154909150600160a01b900460ff161561181e5760405162461bcd60e51b8152600401610a26906137f0565b60108101805460ff60a01b1916600160a01b17905561183c83611d2b565b84111561185b5760405162461bcd60e51b8152600401610a2690613c5c565b61186484611c48565b9150816000036118865760405162461bcd60e51b8152600401610a2690613c8e565b61167b8383866129c6565b606061189b61238c565b54604080516395d89b4160e01b815290516001600160a01b03909216916395d89b41916004808201926000929091908290030181865afa1580156118e3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261190b9190810190613cf6565b60405160200161191b9190613d64565b604051602081830303815290604052905090565b60006109ca61193c61238c565b546103cf90600160a01b900460ff16600a613e84565b600061195c61238c565b60080154905090565b60008061197061238c565b60108101549091506001600160a01b03848116911614806119a05750600d8101546001600160a01b038481169116145b61093f5760405162461bcd60e51b8152600401610a2690613ec5565b6000806119c761238c565b6010810154909150600160a01b900460ff16156119f65760405162461bcd60e51b8152600401610a26906137f0565b60108101805460ff60a01b1916600160a01b179055611a14846120ca565b861115611a335760405162461bcd60e51b8152600401610a2690613f09565b6000611a3e87611401565b905080600003611a605760405162461bcd60e51b8152600401610a2690613c8e565b611a6d8686838a88612bf3565b925050601001805460ff60a01b19169055949350505050565b600080611a9161238c565b6010810154909150600160a01b900460ff1615611ac05760405162461bcd60e51b8152600401610a26906137f0565b60108101805460ff60a01b1916600160a01b179055611ade84611ebd565b861115611afd5760405162461bcd60e51b8152600401610a2690613f4d565b611b0686610949565b915081600003611b285760405162461bcd60e51b8152600401610a2690613c1a565b611b358585888587612bf3565b50601001805460ff60a01b19169055949350505050565b600033610a47818585611b5f8383612164565b6111fd9190613778565b600061093f33848461258e565b611b7f33612285565b506101f461ffff82161015611ba65760405162461bcd60e51b8152600401610a2690613f7b565b61138861ffff82161115611bcc5760405162461bcd60e51b8152600401610a2690613fa9565b80611bd561238c565b600c0160046101000a81548161ffff021916908361ffff1602179055507fdc843735e683348ec21c302ffff45462399c5c46f75f67b0a1a5395c5359975381604051611c21919061355d565b60405180910390a150565b6000611c3661238c565b600e01546001600160a01b0316919050565b600080611c536109aa565b905080156109105761090b611c6661082b565b84908360016123a8565b60006109798484846000611a86565b60006109798484846127106119bc565b611c9833611965565b506001611ca361238c565b6010018054911515600160a81b0260ff60a81b199092169190911790556040517ffc1249757a7f27c510c8173c55d03ba442e0d33d9223e06ceb416feac8c7693f90600090a1565b6000611cf561238c565b60100154600160a81b900460ff16919050565b6000611d1261238c565b600b0154600160801b90046001600160801b0316919050565b6000611d3561238c565b60100154600160a81b900460ff1615611d5057506000919050565b604051632355178960e11b815230906346aa2f1290611d73908590600401613308565b602060405180830381865afa158015611d90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611db4919061380b565b90506000198114611dc85761094381611dcd565b919050565b600080611dd861082b565b90506000611de46109aa565b905081600003611dfb578015610977576000610979565b61097984828460006123a8565b611e1061238c565b600f01546001600160a01b03163314611e3b5760405162461bcd60e51b8152600401610a2690613fd8565b33611e4461238c565b600d0180546001600160a01b0319166001600160a01b03929092169190911790556000611e6f61238c565b600f0180546001600160a01b0319166001600160a01b039290921691909117905560405133907fff54978127edd34aec0f9061fb3b155fbe0ededdfa881ee3e0d541d3a1eef43890600090a2565b6040516304bd462960e01b815260009030906304bd462990611ee3908590600401613308565b602060405180830381865afa158015611f00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f24919061380b565b90506000198103611f3b576109436103cf836116ab565b610943611f4a6103cf846116ab565b8261277f565b42841015611f705760405162461bcd60e51b8152600401610a269061401c565b60006001611f7c611196565b7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98a8a8a611fa861238c565b6001600160a01b038f16600090815260059190910160209081526040918290208054600181019091559151611fe49695949392918e910161402c565b6040516020818303038152906040528051906020012060405160200161200b929190614090565b604051602081830303815290604052805190602001208585856040516000815260200160405260405161204194939291906140c1565b6020604051602081039080840390855afa158015612063573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116158015906120995750876001600160a01b0316816001600160a01b0316145b6120b55760405162461bcd60e51b8152600401610a2690614108565b6120c0818888612405565b5050505050505050565b6040516304bd462960e01b815260009030906304bd4629906120f0908590600401613308565b602060405180830381865afa15801561210d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612131919061380b565b9050600019810361214557610943826116ab565b61094361215182610949565b610cc3846116ab565b60006109ca6124cb565b600061216e61238c565b6001600160a01b039384166000908152600791909101602090815260408083209490951682529290925250205490565b6121a733612285565b506301e185588111156121cc5760405162461bcd60e51b8152600401610a2690614137565b60006121d661238c565b905081600003612216573060008181526006830160205260409020546121fc919061278e565b6000600a820155600b810180546001600160801b03191690555b600c8101805463ffffffff191663ffffffff84161790556040517ff361aed463da6fa20358e45c6209f1d3e16d4eca706e6eab0b0aeb338729c77a9061225d9084906131a8565b60405180910390a15050565b61228260016000805160206146dc833981519152613778565b81565b600061228f61238c565b600d01546001600160a01b038381169116146122bd5760405162461bcd60e51b8152600401610a2690614169565b506001919050565b60006122cf61238c565b600c0154600160301b90046001600160a01b0316919050565b600061094382611dcd565b6122fc33612285565b506001600160a01b0381166123235760405162461bcd60e51b8152600401610a2690613b11565b8061232c61238c565b600f0180546001600160a01b0319166001600160a01b03928316179055604051908216907fd74668a8c80a07cc56d7c3318a06439eaa815e740d97dcd83487e1fc75076b8b90600090a250565b600061238361238c565b60090154905090565b60008061094360016000805160206146dc833981519152613778565b6000806123b6868686612ede565b905060018360028111156123cc576123cc614179565b1480156123e95750600084806123e4576123e461382c565b868809115b156123fc576123f96001826138be565b90505b95945050505050565b6001600160a01b03831661242b5760405162461bcd60e51b8152600401610a26906141d3565b6001600160a01b0382166124515760405162461bcd60e51b8152600401610a2690614222565b8061245a61238c565b6001600160a01b0380861660008181526007939093016020908152604080852093881680865293909152928390209390935590519091907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906124be9085906131a8565b60405180910390a3505050565b6000806124d661238c565b600b8101549091506001600160801b03164281111561251b57600b820154600a83015464e8d4a5100091600160801b90046001600160801b0316420302049250505090565b6001600160801b0381161561253f5730600090815260068301602052604090205492505b505090565b60006125508484612164565b90506000198114612588578181101561257b5760405162461bcd60e51b8152600401610a2690614266565b6125888484848403612405565b50505050565b6001600160a01b0383166125b45760405162461bcd60e51b8152600401610a26906142b8565b6001600160a01b0382166125da5760405162461bcd60e51b8152600401610a2690614308565b306001600160a01b038316036126025760405162461bcd60e51b8152600401610a2690614349565b600061260c61238c565b6001600160a01b038516600090815260068201602052604081208054929350849290919061263b908490613778565b90915550506001600160a01b038084166000818152600684016020526040908190208054860190555190918616906000805160206146fc833981519152906126849086906131a8565b60405180910390a350505050565b600061269c6124cb565b9050806000036126a95750565b426126b261238c565b600b01546001600160801b031611156126ed57426126ce61238c565b600b0180546001600160801b03928316600160801b0292169190911790555b61051a308261278e565b6001600160a01b03821661271d5760405162461bcd60e51b8152600401610a269061438d565b600061272761238c565b90508181600201600082825461273d91906138be565b90915550506001600160a01b0383166000818152600683016020526040808220805486019055516000805160206146fc833981519152906124be9086906131a8565b60008183106109105781610912565b6001600160a01b0382166127b45760405162461bcd60e51b8152600401610a26906143db565b60006127be61238c565b6001600160a01b03841660009081526006820160205260408120805492935084929091906127ed908490613778565b909155505060028101805483900390556040516000906001600160a01b038516906000805160206146fc833981519152906124be9086906131a8565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f61285461238c565b600101604051612864919061445d565b6040805191829003822082820182526005835264332e302e3160d81b60209384015290516128b993927fc63fef2293a1f92e82ea14ecff0fffda4a757b8c20dd61198c8b9ebef0985ef4914691309101614469565b60405160208183030381529060405280519060200120905090565b60006128de61238c565b80546040516370a0823160e01b81529192506000916001600160a01b03909116906370a0823190612913903090600401613308565b602060405180830381865afa158015612930573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612954919061380b565b905080826008015403612965575050565b600061296f61082b565b905080821061298b57600883018190556000600984015561299b565b6008830182905581810360098401555b6129a361082b565b81146129c15760405162461bcd60e51b8152600401610a26906144d8565b505050565b306001600160a01b038416036129ee5760405162461bcd60e51b8152600401610a2690614514565b60006129f861238c565b80549091506001600160a01b0316612a1281333087612fa0565b6000848360080154612a2491906138be565b90506000826001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401612a549190613308565b602060405180830381865afa158015612a71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a95919061380b565b60405163503160d960e01b8152909150309063503160d990612abb9085906004016131a8565b600060405180830381600087803b158015612ad557600080fd5b505af1158015612ae9573d6000803e3d6000fd5b505050506000612b6f846001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401612b1e9190613308565b602060405180830381865afa158015612b3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b5f919061380b565b612b699084613778565b8461277f565b905080856009016000828254612b8591906138be565b90915550508083036008860155612b9c88876126f7565b876001600160a01b0316336001600160a01b03167fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d78989604051612be1929190613366565b60405180910390a35050505050505050565b60006001600160a01b038616612c1b5760405162461bcd60e51b8152600401610a2690613b11565b612710821115612c3d5760405162461bcd60e51b8152600401610a269061454a565b336001600160a01b03861614612c5857612c58853385612544565b6000612c6261238c565b805460088201549192506001600160a01b03169086811015612e4d576040516370a0823160e01b81526000906001600160a01b038416906370a0823190612cad903090600401613308565b602060405180830381865afa158015612cca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cee919061380b565b604051633d6cb57560e01b81529091503090633d6cb57590612d1690858c03906004016131a8565b600060405180830381600087803b158015612d3057600080fd5b505af1158015612d44573d6000803e3d6000fd5b505050506000612dcf82856001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401612d7a9190613308565b602060405180830381865afa158015612d97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dbb919061380b565b612dc59190613778565b866009015461277f565b928301929050600089841015612e275750828903612710881015612e2357612710612dfa898c61388b565b612e0491906138aa565b811115612e235760405162461bcd60e51b8152600401610a269061457e565b8399505b612e3181836138be565b866009016000828254612e449190613778565b90915550505050505b612e578782613778565b6008840155612e66888761278e565b612e7a6001600160a01b0383168a89612ff8565b876001600160a01b0316896001600160a01b0316336001600160a01b03167ffbde797d201c681b91056529119e0b02407c7bb96a4a2c75c01fc9667232c8db8a8a604051612ec9929190613366565b60405180910390a45094979650505050505050565b6000808060001985870985870292508281108382030391505080600003612f1857838281612f0e57612f0e61382c565b0492505050610912565b808411612f375760405162461bcd60e51b8152600401610a26906145ba565b60008486880960026001871981018816978890046003810283188082028403028082028403028082028403028082028403028082028403029081029092039091026000889003889004909101858311909403939093029303949094049190911702949350505050565b612588846323b872dd60e01b858585604051602401612fc1939291906145ca565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152613017565b6129c18363a9059cbb60e01b8484604051602401612fc19291906145f2565b600061306c826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166130a99092919063ffffffff16565b905080516000148061308d57508080602001905181019061308d9190614613565b6129c15760405162461bcd60e51b8152600401610a269061467b565b6060610979848460008585600080866001600160a01b031685876040516130d0919061468b565b60006040518083038185875af1925050503d806000811461310d576040519150601f19603f3d011682016040523d82523d6000602084013e613112565b606091505b50915091506131238783838761312e565b979650505050505050565b6060831561316d578251600003613166576001600160a01b0385163b6131665760405162461bcd60e51b8152600401610a26906146cb565b5081610979565b61097983838151156131825781518083602001fd5b8060405162461bcd60e51b8152600401610a269190613269565b5050565b805b82525050565b6020810161094382846131a0565b60006001600160a01b038216610943565b6131d0816131b6565b811461051a57600080fd5b8035610943816131c7565b6000602082840312156131fb576131fb600080fd5b600061097984846131db565b60005b8381101561322257818101518382015260200161320a565b50506000910152565b601f01601f191690565b600061323f825190565b808452602084019350613256818560208601613207565b61325f8161322b565b9093019392505050565b602080825281016109128184613235565b806131d0565b80356109438161327a565b6000602082840312156132a0576132a0600080fd5b60006109798484613280565b600080604083850312156132c2576132c2600080fd5b60006132ce85856131db565b92505060206132df85828601613280565b9150509250929050565b8015156131a2565b6020810161094382846132e9565b6131a2816131b6565b6020810161094382846132ff565b60008060006060848603121561332e5761332e600080fd5b600061333a86866131db565b935050602061334b868287016131db565b925050604061335c86828701613280565b9150509250925092565b6040810161337482856131a0565b61091260208301846131a0565b634e487b7160e01b600052604160045260246000fd5b6133a08261322b565b81018181106001600160401b03821117156133bd576133bd613381565b6040525050565b60006133cf60405190565b9050611dc88282613397565b60006001600160401b038211156133f4576133f4613381565b6133fd8261322b565b60200192915050565b82818337506000910152565b6000613425613420846133db565b6133c4565b90508281526020810184848401111561344057613440600080fd5b61344b848285613406565b509392505050565b600082601f83011261346757613467600080fd5b8135610979848260208601613412565b600080600080600060a0868803121561349257613492600080fd5b600061349e88886131db565b95505060208601356001600160401b038111156134bd576134bd600080fd5b6134c988828901613453565b94505060406134da888289016131db565b93505060606134eb888289016131db565b92505060806134fc888289016131db565b9150509295509295909350565b60ff81166131a2565b602081016109438284613509565b6000806040838503121561353657613536600080fd5b60006135428585613280565b92505060206132df858286016131db565b61ffff81166131a2565b602081016109438284613553565b6000806000806080858703121561358457613584600080fd5b60006135908787613280565b94505060206135a1878288016131db565b93505060406135b2878288016131db565b92505060606135c387828801613280565b91505092959194509250565b61ffff81166131d0565b8035610943816135cf565b6000602082840312156135f9576135f9600080fd5b600061097984846135d9565b60008060006060848603121561361d5761361d600080fd5b60006136298686613280565b935050602061363a868287016131db565b925050604061335c868287016131db565b60ff81166131d0565b80356109438161364b565b600080600080600080600060e0888a03121561367d5761367d600080fd5b60006136898a8a6131db565b975050602061369a8a828b016131db565b96505060406136ab8a828b01613280565b95505060606136bc8a828b01613280565b94505060806136cd8a828b01613654565b93505060a06136de8a828b01613280565b92505060c06136ef8a828b01613280565b91505092959891949750929550565b6000806040838503121561371457613714600080fd5b600061354285856131db565b634e487b7160e01b600052602260045260246000fd5b60028104600182168061374a57607f821691505b60208210810361375c5761375c613720565b50919050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561094357610943613762565b600781526000602082016610b5b2b2b832b960c91b815291505b5060200190565b602080825281016109438161378b565b601f81526000602082017f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00815291506137a5565b60208082528101610943816137bc565b80516109438161327a565b60006020828403121561382057613820600080fd5b60006109798484613800565b634e487b7160e01b600052601260045260246000fd5b8051610943816135cf565b8051610943816131c7565b6000806040838503121561386e5761386e600080fd5b600061387a8585613842565b92505060206132df8582860161384d565b60008160001904831182151516156138a5576138a5613762565b500290565b6000826138b9576138b961382c565b500490565b8082018082111561094357610943613762565b608081016138df82876131a0565b6138ec60208301866131a0565b6138f960408301856131a0565b6123fc60608301846131a0565b600b81526000602082016a1a5b9a5d1a585b1a5e995960aa1b815291506137a5565b6020808252810161094381613906565b60006109436139448381565b90565b61395083613938565b81546008840282811b60001990911b908116901990911617825550505050565b60006129c1818484613947565b8181101561319c57613990600082613970565b60010161397d565b601f8211156129c1576000818152602090206020601f850104810160208510156139bf5750805b6139d16020601f86010483018261397d565b5050505050565b6000196008929092029190911c191690565b60006139f683836139d8565b600290930290921792915050565b81516001600160401b03811115613a1d57613a1d613381565b613a278254613736565b613a32828285613998565b6020601f831160018114613a605760008415613a4e5750858201515b613a5885826139ea565b865550613aba565b600085815260208120601f198616915b82811015613a905788850151825560209485019460019092019101613a70565b86831015613aad5784890151613aa9601f8916826139d8565b8355505b6001600288020188555050505b505050505050565b80516109438161364b565b600060208284031215613ae257613ae2600080fd5b60006109798484613ac2565b600c81526000602082016b5a45524f204144445245535360a01b815291506137a5565b6020808252810161094381613aee565b600481526000602082016339b2b63360e11b815291506137a5565b6020808252810161094381613b21565b600c81526000602082016b3737ba1039b43aba3237bbb760a11b815291506137a5565b6020808252810161094381613b4c565b600e81526000602082016d21b0b73737ba1031329039b2b63360911b815291506137a5565b6020808252810161094381613b7f565b601e81526000602082017f455243343632363a206465706f736974206d6f7265207468616e206d61780000815291506137a5565b6020808252810161094381613bb4565b600b81526000602082016a5a45524f5f53484152455360a81b815291506137a5565b6020808252810161094381613bf8565b601b81526000602082017a08aa486686c646c7440dad2dce840dadee4ca40e8d0c2dc40dac2f602b1b815291506137a5565b6020808252810161094381613c2a565b600b81526000602082016a5a45524f5f41535345545360a81b815291506137a5565b6020808252810161094381613c6c565b6000613cac613420846133db565b905082815260208101848484011115613cc757613cc7600080fd5b61344b848285613207565b600082601f830112613ce657613ce6600080fd5b8151610979848260208601613c9e565b600060208284031215613d0b57613d0b600080fd5b81516001600160401b03811115613d2457613d24600080fd5b61097984828501613cd2565b61797360f01b815260005b5060020190565b6000613d4c825190565b613d5a818560208601613207565b9290920192915050565b6000613d6f82613d30565b91506109128284613d42565b80825b6001851115613dba57808604811115613d9957613d99613762565b6001851615613da757908102905b8002613db38560011c90565b9450613d7e565b94509492505050565b600082613dd257506001610912565b81613ddf57506000610912565b8160018114613df55760028114613dff57613e2c565b6001915050610912565b60ff841115613e1057613e10613762565b8360020a915084821115613e2657613e26613762565b50610912565b5060208310610133831016604e8410600b8410161715613e5a575081810a8381111561090b5761090b613762565b613e678484846001613d7b565b92509050818404811115613e7d57613e7d613762565b0292915050565b600060ff831692506109126000198484613dc3565b601581526000602082017408595b595c99d95b98de48185d5d1a1bdc9a5e9959605a1b815291506137a5565b6020808252810161094381613e99565b601d81526000602082017f455243343632363a2072656465656d206d6f7265207468616e206d6178000000815291506137a5565b6020808252810161094381613ed5565b601f81526000602082017f455243343632363a207769746864726177206d6f7265207468616e206d617800815291506137a5565b6020808252810161094381613f19565b60078152600060208201664d494e2046454560c81b815291506137a5565b6020808252810161094381613f5d565b60078152600060208201664d41582046454560c81b815291506137a5565b6020808252810161094381613f8b565b60088152600060208201672170656e64696e6760c01b815291506137a5565b6020808252810161094381613fb9565b601e81526000602082017f45524332303a205045524d49545f444541444c494e455f455850495245440000815291506137a5565b6020808252810161094381613fe8565b60c0810161403a82896131a0565b61404760208301886132ff565b61405460408301876132ff565b61406160608301866131a0565b61406e60808301856131a0565b61312360a08301846131a0565b61190160f01b81526000613d3b565b806131a2565b600061409b8261407b565b91506140a7828561408a565b6020820191506140b7828461408a565b5060200192915050565b608081016140cf82876131a0565b6138ec6020830186613509565b601581526000602082017422a92199181d1024a72b20a624a22fa9a4a3a722a960591b815291506137a5565b60208082528101610943816140dc565b6008815260006020820167746f6f206c6f6e6760c01b815291506137a5565b6020808252810161094381614118565b600b81526000602082016a085b585b9859d95b595b9d60aa1b815291506137a5565b6020808252810161094381614147565b634e487b7160e01b600052602160045260246000fd5b602481526000602082017f45524332303a20617070726f76652066726f6d20746865207a65726f206164648152637265737360e01b602082015291505b5060400190565b602080825281016109438161418f565b602281526000602082017f45524332303a20617070726f766520746f20746865207a65726f206164647265815261737360f01b602082015291506141cc565b60208082528101610943816141e3565b601d81526000602082017f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000815291506137a5565b6020808252810161094381614232565b602581526000602082017f45524332303a207472616e736665722066726f6d20746865207a65726f206164815264647265737360d81b602082015291506141cc565b6020808252810161094381614276565b602381526000602082017f45524332303a207472616e7366657220746f20746865207a65726f206164647281526265737360e81b602082015291506141cc565b60208082528101610943816142c8565b601a8152600060208201794552433230207472616e7366657220746f20737472617465677960301b815291506137a5565b6020808252810161094381614318565b601f81526000602082017f45524332303a206d696e7420746f20746865207a65726f206164647265737300815291506137a5565b6020808252810161094381614359565b602181526000602082017f45524332303a206275726e2066726f6d20746865207a65726f206164647265738152607360f81b602082015291506141cc565b602080825281016109438161439d565b600081546143f881613736565b60018216801561440f576001811461442457614454565b60ff1983168652811515820286019350614454565b60008581526020902060005b8381101561444c57815488820152600190910190602001614430565b838801955050505b50505092915050565b600061091282846143eb565b60a0810161447782886131a0565b61448460208301876131a0565b61449160408301866131a0565b61449e60608301856131a0565b6144ab60808301846132ff565b9695505050505050565b600c81526000602082016b21746f74616c41737365747360a01b815291506137a5565b60208082528101610943816144b5565b601581526000602082017422a9219a1b191b1d1036b4b73a103a379039b2b63360591b815291506137a5565b60208082528101610943816144e8565b600f81526000602082016e65786365656473204d41585f42505360881b815291506137a5565b6020808252810161094381614524565b600d81526000602082016c746f6f206d756368206c6f737360981b815291506137a5565b602080825281016109438161455a565b60158152600060208201744d6174683a206d756c446976206f766572666c6f7760581b815291506137a5565b602080825281016109438161458e565b606081016145d882866132ff565b6145e560208301856132ff565b61097960408301846131a0565b6040810161337482856132ff565b8015156131d0565b805161094381614600565b60006020828403121561462857614628600080fd5b60006109798484614608565b602a81526000602082017f5361666545524332303a204552433230206f7065726174696f6e20646964206e8152691bdd081cdd58d8d9595960b21b602082015291506141cc565b6020808252810161094381614634565b60006109128284613d42565b601d81526000602082017f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000815291506137a5565b602080825281016109438161469756fed2841a5d2692465040bd5e06a6f3b37483952c866e0f304dc0e03f76a1f8a0b1ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220294ee1eef95939da9984c90a184f1488398d0956b42d4a338d8adb02d8f1863164736f6c63430008100033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "DOMAIN_SEPARATOR()": {
        "details": "This checks that the current chain id is the same as when the contract was deployed to prevent replay attacks. If false it will calculate a new domain separator based on the new chain id.",
        "returns": {
          "_0": ". The domain separator that will be used for any {permit} calls."
        }
      },
      "acceptManagement()": {
        "details": "Can only be called by the current `pendingManagement`."
      },
      "allowance(address,address)": {
        "params": {
          "owner": "The address who owns the shares.",
          "spender": "The address who would be moving the owners shares."
        },
        "returns": {
          "_0": ". The remaining amount of shares of `owner` that could be moved by `spender`."
        }
      },
      "apiVersion()": {
        "returns": {
          "_0": ". The API version for this TokenizedStrategy"
        }
      },
      "approve(address,uint256)": {
        "details": "NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.",
        "params": {
          "amount": "the amount of shares to allow `spender` to move.",
          "spender": "the address to allow the shares to be moved by."
        },
        "returns": {
          "_0": ". a boolean value indicating whether the operation succeeded."
        }
      },
      "asset()": {
        "returns": {
          "_0": ". The underlying asset."
        }
      },
      "balanceOf(address)": {
        "details": "If the '_account` is the strategy then this will subtract the amount of shares that have been unlocked since the last profit first.",
        "params": {
          "account": "the address to return the balance for."
        },
        "returns": {
          "_0": ". The current balance in y shares of the '_account'."
        }
      },
      "convertToAssets(uint256)": {
        "params": {
          "shares": "The amount of the strategies shares."
        },
        "returns": {
          "_0": ". Expected amount of `asset` the shares represents."
        }
      },
      "convertToShares(uint256)": {
        "params": {
          "assets": "The amount of underlying."
        },
        "returns": {
          "_0": ". Expected shares that `assets` represents."
        }
      },
      "decimals()": {
        "returns": {
          "_0": ". The decimals used for the strategy and `asset`."
        }
      },
      "decreaseAllowance(address,uint256)": {
        "details": "This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.",
        "params": {
          "spender": "the account that will be able to move less of the senders shares.",
          "subtractedValue": "the amount to decrease the current allowance by."
        },
        "returns": {
          "_0": ". a boolean value indicating whether the operation succeeded."
        }
      },
      "deposit(uint256,address)": {
        "params": {
          "assets": "The amount of underlying to deposit in.",
          "receiver": "The address to receive the `shares`."
        },
        "returns": {
          "shares": "The actual amount of shares issued."
        }
      },
      "emergencyAdmin()": {
        "returns": {
          "_0": ". Address of the emergencyAdmin"
        }
      },
      "emergencyWithdraw(uint256)": {
        "details": "This can only be called post {shutdownStrategy}. This will update totalDebt and totalIdle based on the amount of loose `asset` after the withdraw leaving `totalAssets` unchanged. A strategist will need to override the {_emergencyWithdraw} function in their strategy for this to work.",
        "params": {
          "amount": "The amount of asset to attempt to free."
        }
      },
      "fullProfitUnlockDate()": {
        "returns": {
          "_0": ". The full profit unlocking timestamp"
        }
      },
      "increaseAllowance(address,uint256)": {
        "details": "This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - cannot give spender over uint256.max allowance",
        "params": {
          "addedValue": "the extra amount to add to the current allowance.",
          "spender": "the account that will be able to move the senders shares."
        },
        "returns": {
          "_0": ". a boolean value indicating whether the operation succeeded."
        }
      },
      "init(address,string,address,address,address)": {
        "details": "This should be called atomically whenever a new strategy is deployed and can only be called once for each strategy. This will set all the default storage that must be set for a strategy to function. Any changes can be made post deployment through external calls from `management`. The function will also emit an event that off chain indexers can look for to track any new deployments using this TokenizedStrategy. This is called through a low level call in the BaseStrategy so any reverts will return the \"init failed\" string.",
        "params": {
          "_asset": "Address of the underlying asset.",
          "_keeper": "Address to set as strategies `keeper`.",
          "_management": "Address to set as the strategies `management`.",
          "_name": "Name the strategy will use.",
          "_performanceFeeRecipient": "Address to receive performance fees."
        }
      },
      "isEmergencyAuthorized(address)": {
        "details": "Is left public so that it can be used by the Strategy. When the Strategy calls this the msg.sender would be the address of the strategy so we need to specify the sender. Will return `true` if the check passed.",
        "params": {
          "_sender": "The original msg.sender."
        }
      },
      "isKeeperOrManagement(address)": {
        "details": "Is left public so that it can be used by the Strategy. When the Strategy calls this the msg.sender would be the address of the strategy so we need to specify the sender. Will return `true` if the check passed.",
        "params": {
          "_sender": "The original msg.sender."
        }
      },
      "isManagement(address)": {
        "details": "Is left public so that it can be used by the Strategy. When the Strategy calls this the msg.sender would be the address of the strategy so we need to specify the sender. Will return `true` if the check passed.",
        "params": {
          "_sender": "The original msg.sender."
        }
      },
      "isShutdown()": {
        "returns": {
          "_0": ". Whether or not the strategy is shutdown."
        }
      },
      "keeper()": {
        "returns": {
          "_0": ". Address of the keeper"
        }
      },
      "lastReport()": {
        "returns": {
          "_0": ". The last report."
        }
      },
      "management()": {
        "returns": {
          "_0": ". Address of management"
        }
      },
      "maxDeposit(address)": {
        "params": {
          "owner": "The address depositing."
        },
        "returns": {
          "_0": ". The max that `owner` can deposit in `asset`."
        }
      },
      "maxMint(address)": {
        "params": {
          "owner": "The address minting."
        },
        "returns": {
          "_maxMint": "The max that `owner` can mint in shares."
        }
      },
      "maxRedeem(address)": {
        "params": {
          "owner": "The owner of the shares."
        },
        "returns": {
          "_maxRedeem": "Max amount of shares that can be redeemed."
        }
      },
      "maxWithdraw(address)": {
        "params": {
          "owner": "The owner of the shares."
        },
        "returns": {
          "_maxWithdraw": "Max amount of `asset` that can be withdrawn."
        }
      },
      "mint(uint256,address)": {
        "params": {
          "receiver": "The address to receive the `shares`.",
          "shares": "The amount of strategy shares mint."
        },
        "returns": {
          "assets": "The actual amount of asset deposited."
        }
      },
      "name()": {
        "returns": {
          "_0": ". The name the strategy is using for its token."
        }
      },
      "nonces(address)": {
        "details": "Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.",
        "params": {
          "_owner": "the address of the account to return the nonce for."
        },
        "returns": {
          "_0": ". the current nonce for the account."
        }
      },
      "pendingManagement()": {
        "returns": {
          "_0": ". Address of pendingManagement"
        }
      },
      "performanceFee()": {
        "returns": {
          "_0": ". Current performance fee."
        }
      },
      "performanceFeeRecipient()": {
        "returns": {
          "_0": ". Address of performanceFeeRecipient"
        }
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "details": "IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]."
      },
      "previewDeposit(uint256)": {
        "details": "This will round down.",
        "params": {
          "assets": "The amount of `asset` to deposits."
        },
        "returns": {
          "_0": ". Expected shares that would be issued."
        }
      },
      "previewMint(uint256)": {
        "details": "This is used instead of convertToAssets so that it can round up for safer mints.",
        "params": {
          "shares": "The amount of shares to mint."
        },
        "returns": {
          "_0": ". The needed amount of `asset` for the mint."
        }
      },
      "previewRedeem(uint256)": {
        "details": "This will round down.",
        "params": {
          "shares": "The amount of shares that would be redeemed."
        },
        "returns": {
          "_0": ". The amount of `asset` that would be returned."
        }
      },
      "previewWithdraw(uint256)": {
        "details": "This is used instead of convertToShares so that it can round up for safer withdraws.",
        "params": {
          "assets": "The amount of `asset` that would be withdrawn."
        },
        "returns": {
          "_0": ". The amount of shares that would be burnt."
        }
      },
      "pricePerShare()": {
        "details": "This value offers limited precision. Integrations that require exact precision should use convertToAssets or convertToShares instead.",
        "returns": {
          "_0": ". The price per share."
        }
      },
      "profitMaxUnlockTime()": {
        "returns": {
          "_0": ". The current profit max unlock time."
        }
      },
      "profitUnlockingRate()": {
        "details": "This is denominated in EXTENDED_BPS decimals.",
        "returns": {
          "_0": ". The current profit unlocking rate."
        }
      },
      "redeem(uint256,address,address)": {
        "details": "This will default to allowing any loss passed to be realized.",
        "params": {
          "owner": "The address whose shares are burnt.",
          "receiver": "The address to receive `assets`.",
          "shares": "The amount of shares burnt."
        },
        "returns": {
          "_0": "assets The actual amount of underlying withdrawn."
        }
      },
      "redeem(uint256,address,address,uint256)": {
        "details": "This includes an added parameter to allow for losses.",
        "params": {
          "maxLoss": "The amount of acceptable loss in Basis points.",
          "owner": "The address whose shares are burnt.",
          "receiver": "The address to receive `assets`.",
          "shares": "The amount of shares burnt."
        },
        "returns": {
          "_0": ". The actual amount of underlying withdrawn."
        }
      },
      "report()": {
        "details": "This should be called through protected relays if swaps are likely occur. This will account for any gains/losses since the last report and charge fees accordingly. Any profit over the fees charged will be immediately locked so there is no change in PricePerShare. Then slowly unlocked over the `maxProfitUnlockTime` each second based on the calculated `profitUnlockingRate`. In case of a loss it will first attempt to offset the loss with any remaining locked shares from the last report in order to reduce any negative impact to PPS. Will then recalculate the new time to unlock profits over and the rate based on a weighted average of any remaining time from the last report and the new amount of shares to be locked.",
        "returns": {
          "loss": "The notional amount of loss if any since the last report in terms of `asset`.",
          "profit": "The notional amount of gain if any since the last report in terms of `asset`."
        }
      },
      "setEmergencyAdmin(address)": {
        "details": "Can only be called by the current `management`.",
        "params": {
          "_emergencyAdmin": "New address to set `emergencyAdmin` to."
        }
      },
      "setKeeper(address)": {
        "details": "Can only be called by the current `management`.",
        "params": {
          "_keeper": "New address to set `keeper` to."
        }
      },
      "setPendingManagement(address)": {
        "details": "Can only be called by the current `management`. The address is set to pending management and will then have to call {acceptManagement} in order for the 'management' to officially change. Cannot set `management` to address(0).",
        "params": {
          "_management": "New address to set `pendingManagement` to."
        }
      },
      "setPerformanceFee(uint16)": {
        "details": "Can only be called by the current `management`. Denominated in Basis Points. So 100% == 10_000. Cannot be set less than the MIN_FEE. Cannot set greater than to MAX_FEE.",
        "params": {
          "_performanceFee": "New performance fee."
        }
      },
      "setPerformanceFeeRecipient(address)": {
        "details": "Can only be called by the current `management`. Cannot set to address(0).",
        "params": {
          "_performanceFeeRecipient": "New address to set `management` to."
        }
      },
      "setProfitMaxUnlockTime(uint256)": {
        "details": "Can only be called by the current `management`. Denominated in seconds and cannot be greater than 1 year. NOTE: Setting to 0 will cause all currently locked profit to be unlocked instantly and should be done with care. `profitMaxUnlockTime` is stored as a uint32 for packing but can be passed in as uint256 for simplicity.",
        "params": {
          "_profitMaxUnlockTime": "New `profitMaxUnlockTime`."
        }
      },
      "shutdownStrategy()": {
        "details": "Can only be called by the current `management` or `emergencyAdmin`. This will stop any new {deposit} or {mint} calls but will not prevent {withdraw} or {redeem}. It will also still allow for {tend} and {report} so that management can report any last losses in an emergency as well as provide any maintenance to allow for full withdraw. This is a one way switch and can never be set back once shutdown."
      },
      "symbol()": {
        "details": "Will be 'ys + asset symbol'.",
        "returns": {
          "_0": ". The symbol the strategy is using for its tokens."
        }
      },
      "tend()": {
        "details": "Both 'tendTrigger' and '_tend' will need to be overridden for this to be used. This will callback the internal '_tend' call in the BaseStrategy with the total current amount available to the strategy to deploy. Keepers are expected to use protected relays in tend calls so this can be used for illiquid or manipulatable strategies to compound rewards, perform maintenance or deposit/withdraw funds. All accounting for totalDebt and totalIdle updates will be done here post '_tend'. This should never cause an increase in PPS. Total assets should be the same before and after A report() call will be needed to record the profit."
      },
      "totalAssets()": {
        "returns": {
          "_0": ". Total assets the strategy holds."
        }
      },
      "totalDebt()": {
        "returns": {
          "_0": ". The current amount of debt."
        }
      },
      "totalIdle()": {
        "returns": {
          "_0": ". The current amount of idle funds."
        }
      },
      "totalSupply()": {
        "returns": {
          "_0": ". Total amount of shares issued."
        }
      },
      "transfer(address,uint256)": {
        "details": "Requirements: - `to` cannot be the zero address. - `to` cannot be the address of the strategy. - the caller must have a balance of at least `_amount`.",
        "params": {
          "amount": "The amount of shares to be transferred from sender.",
          "to": "The address shares will be transferred to."
        },
        "returns": {
          "_0": ". a boolean value indicating whether the operation succeeded."
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `to` cannot be the address of the strategy. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`. Emits a {Transfer} event.",
        "params": {
          "amount": "the quantity of shares to move.",
          "from": "the address to be moving shares from.",
          "to": "the address to be moving shares to."
        },
        "returns": {
          "_0": ". a boolean value indicating whether the operation succeeded."
        }
      },
      "unlockedShares()": {
        "returns": {
          "_0": ". The amount of shares that have unlocked."
        }
      },
      "withdraw(uint256,address,address)": {
        "details": "This will default to not allowing any loss to be taken.",
        "params": {
          "assets": "The amount of underlying to withdraw.",
          "owner": "The address whose shares are burnt.",
          "receiver": "The address to receive `assets`."
        },
        "returns": {
          "shares": "The actual amount of shares burnt."
        }
      },
      "withdraw(uint256,address,address,uint256)": {
        "details": "This includes an added parameter to allow for losses.",
        "params": {
          "assets": "The amount of underlying to withdraw.",
          "maxLoss": "The amount of acceptable loss in Basis points.",
          "owner": "The address whose shares are burnt.",
          "receiver": "The address to receive `assets`."
        },
        "returns": {
          "shares": "The actual amount of shares burnt."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "StrategyShutdown()": {
        "notice": "Emitted when a strategy is shutdown."
      },
      "UpdateEmergencyAdmin(address)": {
        "notice": "Emitted when the 'emergencyAdmin' address is updated to 'newEmergencyAdmin'."
      },
      "UpdateKeeper(address)": {
        "notice": "Emitted when the 'keeper' address is updated to 'newKeeper'."
      },
      "UpdateManagement(address)": {
        "notice": "Emitted when the 'management' address is updated to 'newManagement'."
      },
      "UpdatePendingManagement(address)": {
        "notice": "Emitted when the 'pendingManagement' address is updated to 'newPendingManagement'."
      },
      "UpdatePerformanceFee(uint16)": {
        "notice": "Emitted when the 'performanceFee' is updated to 'newPerformanceFee'."
      },
      "UpdatePerformanceFeeRecipient(address)": {
        "notice": "Emitted when the 'performanceFeeRecipient' address is updated to 'newPerformanceFeeRecipient'."
      },
      "UpdateProfitMaxUnlockTime(uint256)": {
        "notice": "Emitted when the 'profitMaxUnlockTime' is updated to 'newProfitMaxUnlockTime'."
      }
    },
    "kind": "user",
    "methods": {
      "DOMAIN_SEPARATOR()": {
        "notice": "Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
      },
      "acceptManagement()": {
        "notice": "Step two of two to set a new 'management' of the strategy."
      },
      "allowance(address,address)": {
        "notice": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
      },
      "apiVersion()": {
        "notice": "Get the API version for this TokenizedStrategy."
      },
      "approve(address,uint256)": {
        "notice": "Sets `amount` as the allowance of `spender` over the caller's tokens."
      },
      "asset()": {
        "notice": "Get the underlying asset for the strategy."
      },
      "balanceOf(address)": {
        "notice": "Returns the current balance for a given '_account'."
      },
      "convertToAssets(uint256)": {
        "notice": "The amount of assets that the strategy would exchange for the amount of shares provided, in an ideal scenario where all the conditions are met."
      },
      "convertToShares(uint256)": {
        "notice": "The amount of shares that the strategy would  exchange for the amount of assets provided, in an ideal scenario where all the conditions are met."
      },
      "decimals()": {
        "notice": "Returns the number of decimals used to get its user representation."
      },
      "decreaseAllowance(address,uint256)": {
        "notice": "Atomically decreases the allowance granted to `spender` by the caller."
      },
      "deposit(uint256,address)": {
        "notice": "Mints `shares` of strategy shares to `receiver` by depositing exactly `assets` of underlying tokens."
      },
      "emergencyAdmin()": {
        "notice": "Get the current address that can shutdown and emergency withdraw."
      },
      "emergencyWithdraw(uint256)": {
        "notice": "To manually withdraw funds from the yield source after a strategy has been shutdown."
      },
      "fullProfitUnlockDate()": {
        "notice": "Gets the timestamp at which all profits will be unlocked."
      },
      "increaseAllowance(address,uint256)": {
        "notice": "Atomically increases the allowance granted to `spender` by the caller."
      },
      "init(address,string,address,address,address)": {
        "notice": "Used to initialize storage for a newly deployed strategy."
      },
      "isEmergencyAuthorized(address)": {
        "notice": "To check if a sender is the keeper or emergency admin for a specific strategy."
      },
      "isKeeperOrManagement(address)": {
        "notice": "To check if a sender is the keeper or management for a specific strategy."
      },
      "isManagement(address)": {
        "notice": "To check if a sender is the management for a specific strategy."
      },
      "isShutdown()": {
        "notice": "To check if the strategy has been shutdown."
      },
      "keeper()": {
        "notice": "Get the current address that can call tend and report."
      },
      "lastReport()": {
        "notice": "The timestamp of the last time protocol fees were charged."
      },
      "management()": {
        "notice": "Get the current address that controls the strategy."
      },
      "maxDeposit(address)": {
        "notice": "Total number of underlying assets that can be deposited by `_owner` into the strategy, where `owner` corresponds to the receiver of a {deposit} call."
      },
      "maxMint(address)": {
        "notice": "Total number of shares that can be minted by `owner` into the strategy, where `_owner` corresponds to the receiver of a {mint} call."
      },
      "maxRedeem(address)": {
        "notice": "Total number of strategy shares that can be redeemed from the strategy by `owner`, where `owner` corresponds to the msg.sender of a {redeem} call."
      },
      "maxWithdraw(address)": {
        "notice": "Total number of underlying assets that can be withdrawn from the strategy by `owner`, where `owner` corresponds to the msg.sender of a {redeem} call."
      },
      "mint(uint256,address)": {
        "notice": "Mints exactly `shares` of strategy shares to `receiver` by depositing `assets` of underlying tokens."
      },
      "name()": {
        "notice": "Returns the name of the token."
      },
      "nonces(address)": {
        "notice": "Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}."
      },
      "pendingManagement()": {
        "notice": "Get the current pending management address if any."
      },
      "performanceFee()": {
        "notice": "Get the current performance fee charged on profits. denominated in Basis Points where 10_000 == 100%"
      },
      "performanceFeeRecipient()": {
        "notice": "Get the current address that receives the performance fees."
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval."
      },
      "previewDeposit(uint256)": {
        "notice": "Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given current on-chain conditions."
      },
      "previewMint(uint256)": {
        "notice": "Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given current on-chain conditions."
      },
      "previewRedeem(uint256)": {
        "notice": "Allows an on-chain or off-chain user to simulate the effects of their redemption at the current block, given current on-chain conditions."
      },
      "previewWithdraw(uint256)": {
        "notice": "Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block, given current on-chain conditions."
      },
      "pricePerShare()": {
        "notice": "Get the price per share."
      },
      "profitMaxUnlockTime()": {
        "notice": "Gets the current time profits are set to unlock over."
      },
      "profitUnlockingRate()": {
        "notice": "The per second rate at which profits are unlocking."
      },
      "redeem(uint256,address,address)": {
        "notice": "Redeems exactly `shares` from `owner` and sends `assets` of underlying tokens to `receiver`."
      },
      "redeem(uint256,address,address,uint256)": {
        "notice": "Redeems exactly `shares` from `owner` and sends `assets` of underlying tokens to `receiver`."
      },
      "report()": {
        "notice": "Function for keepers to call to harvest and record all profits accrued."
      },
      "setEmergencyAdmin(address)": {
        "notice": "Sets a new address to be able to shutdown the strategy."
      },
      "setKeeper(address)": {
        "notice": "Sets a new address to be in charge of tend and reports."
      },
      "setPendingManagement(address)": {
        "notice": "Step one of two to set a new address to be in charge of the strategy."
      },
      "setPerformanceFee(uint16)": {
        "notice": "Sets the performance fee to be charged on reported gains."
      },
      "setPerformanceFeeRecipient(address)": {
        "notice": "Sets a new address to receive performance fees."
      },
      "setProfitMaxUnlockTime(uint256)": {
        "notice": "Sets the time for profits to be unlocked over."
      },
      "shutdownStrategy()": {
        "notice": "Used to shutdown the strategy preventing any further deposits."
      },
      "symbol()": {
        "notice": "Returns the symbol of the strategies token."
      },
      "tend()": {
        "notice": "For a 'keeper' to 'tend' the strategy if a custom tendTrigger() is implemented."
      },
      "totalAssets()": {
        "notice": "Get the total amount of assets this strategy holds as of the last report. We manually track debt and idle to avoid any PPS manipulation from donations, touch values of debt etc."
      },
      "totalDebt()": {
        "notice": "Get the current total debt for a strategy."
      },
      "totalIdle()": {
        "notice": "Get the current total idle for a strategy."
      },
      "totalSupply()": {
        "notice": "Get the current supply of the strategies shares. Locked shares issued to the strategy from profits are not counted towards the full supply until they are unlocked. As more shares slowly unlock the totalSupply will decrease causing the PPS of the strategy to increase."
      },
      "transfer(address,uint256)": {
        "notice": "Transfer '_amount` of shares from `msg.sender` to `to`."
      },
      "transferFrom(address,address,uint256)": {
        "notice": "`amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance."
      },
      "unlockedShares()": {
        "notice": "Get how many shares have been unlocked since last report."
      },
      "withdraw(uint256,address,address)": {
        "notice": "Withdraws exactly `assets` from `owners` shares and sends the underlying tokens to `receiver`."
      },
      "withdraw(uint256,address,address,uint256)": {
        "notice": "Withdraws `assets` from `owners` shares and sends the underlying tokens to `receiver`."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2392,
        "contract": "contracts/test/mocks/MockTokenizedStrategy.sol:MockTokenizedStrategy",
        "label": "minDebt",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 2399,
        "contract": "contracts/test/mocks/MockTokenizedStrategy.sol:MockTokenizedStrategy",
        "label": "maxDebt",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}