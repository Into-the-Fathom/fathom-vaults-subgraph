{
    "address": "0xE291820E9Af7c48F40DEf6525926e3a30ecFFAE8",
    "abi": [
      {
        "inputs": [],
        "name": "AlreadyInitialized",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "AmountTooHigh",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "DebtDidntChange",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "newDebt",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "maxDebt",
            "type": "uint256"
          }
        ],
        "name": "DebtHigherThanMaxDebt",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "ERC20ApprovalFailed",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "currentAllowance",
            "type": "uint256"
          }
        ],
        "name": "ERC20InsufficientAllowance",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "ERC20PermitExpired",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "recoveredAddress",
            "type": "address"
          }
        ],
        "name": "ERC20PermitInvalidSignature",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "ERC20TransferFailed",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "recipientMaxDeposit",
            "type": "uint256"
          }
        ],
        "name": "ExceedDepositLimit",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "FeeExceedsMax",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "strategy",
            "type": "address"
          }
        ],
        "name": "InactiveStrategy",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "InactiveVault",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "currTotalIdle",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "requestedAssets",
            "type": "uint256"
          }
        ],
        "name": "InsufficientAssets",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "InsufficientFunds",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "balanceOfOwner",
            "type": "uint256"
          }
        ],
        "name": "InsufficientShares",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "asset",
            "type": "address"
          }
        ],
        "name": "InvalidAsset",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "InvalidAssetDecimals",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "MaxLoss",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "ProfitUnlockTimeTooLong",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "StrategyAlreadyActive",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "strageyCurrentDebt",
            "type": "uint256"
          }
        ],
        "name": "StrategyDebtIsLessThanAssetsNeeded",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "debt",
            "type": "uint256"
          }
        ],
        "name": "StrategyHasDebt",
        "type": "error"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "unrealisedLosses",
            "type": "uint256"
          }
        ],
        "name": "StrategyHasUnrealisedLosses",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "TooMuchLoss",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "UsingDepositLimit",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "UsingModule",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "ZeroAddress",
        "type": "error"
      },
      {
        "inputs": [],
        "name": "ZeroValue",
        "type": "error"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "owner",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "spender",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "value",
            "type": "uint256"
          }
        ],
        "name": "Approval",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "strategy",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "amount",
            "type": "uint256"
          }
        ],
        "name": "DebtPurchased",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "strategy",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "currentDebt",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "newDebt",
            "type": "uint256"
          }
        ],
        "name": "DebtUpdated",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "sender",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "owner",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "assets",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "shares",
            "type": "uint256"
          }
        ],
        "name": "Deposit",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "bytes32",
            "name": "role",
            "type": "bytes32"
          },
          {
            "indexed": true,
            "internalType": "bytes32",
            "name": "previousAdminRole",
            "type": "bytes32"
          },
          {
            "indexed": true,
            "internalType": "bytes32",
            "name": "newAdminRole",
            "type": "bytes32"
          }
        ],
        "name": "RoleAdminChanged",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "bytes32",
            "name": "role",
            "type": "bytes32"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "account",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "sender",
            "type": "address"
          }
        ],
        "name": "RoleGranted",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "bytes32",
            "name": "role",
            "type": "bytes32"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "account",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "sender",
            "type": "address"
          }
        ],
        "name": "RoleRevoked",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "account",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "bytes32",
            "name": "role",
            "type": "bytes32"
          }
        ],
        "name": "RoleSet",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "bytes32",
            "name": "role",
            "type": "bytes32"
          },
          {
            "indexed": false,
            "internalType": "enum RoleStatusChange",
            "name": "status",
            "type": "uint8"
          }
        ],
        "name": "RoleStatusChanged",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [],
        "name": "Shutdown",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "strategy",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "enum StrategyChangeType",
            "name": "changeType",
            "type": "uint8"
          }
        ],
        "name": "StrategyChanged",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "strategy",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "gain",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "loss",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "currentDebt",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "protocolFees",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "totalFees",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "totalRefunds",
            "type": "uint256"
          }
        ],
        "name": "StrategyReported",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "from",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "to",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "value",
            "type": "uint256"
          }
        ],
        "name": "Transfer",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "address",
            "name": "accountant",
            "type": "address"
          }
        ],
        "name": "UpdatedAccountant",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "address[]",
            "name": "newDefaultQueue",
            "type": "address[]"
          }
        ],
        "name": "UpdatedDefaultQueue",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "depositLimit",
            "type": "uint256"
          }
        ],
        "name": "UpdatedDepositLimit",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "address",
            "name": "depositLimitModule",
            "type": "address"
          }
        ],
        "name": "UpdatedDepositLimitModule",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "totalFees",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "totalRefunds",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "protocolFees",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "address",
            "name": "protocolFeeRecipient",
            "type": "address"
          }
        ],
        "name": "UpdatedFees",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "sender",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "strategy",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "newDebt",
            "type": "uint256"
          }
        ],
        "name": "UpdatedMaxDebtForStrategy",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "minimumTotalIdle",
            "type": "uint256"
          }
        ],
        "name": "UpdatedMinimumTotalIdle",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "profitMaxUnlockTime",
            "type": "uint256"
          }
        ],
        "name": "UpdatedProfitMaxUnlockTime",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "address",
            "name": "roleManager",
            "type": "address"
          }
        ],
        "name": "UpdatedRoleManager",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "bool",
            "name": "useDefaultQueue",
            "type": "bool"
          }
        ],
        "name": "UpdatedUseDefaultQueue",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": false,
            "internalType": "address",
            "name": "withdrawLimitModule",
            "type": "address"
          }
        ],
        "name": "UpdatedWithdrawLimitModule",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "internalType": "address",
            "name": "sender",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "receiver",
            "type": "address"
          },
          {
            "indexed": true,
            "internalType": "address",
            "name": "owner",
            "type": "address"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "assets",
            "type": "uint256"
          },
          {
            "indexed": false,
            "internalType": "uint256",
            "name": "shares",
            "type": "uint256"
          }
        ],
        "name": "Withdraw",
        "type": "event"
      },
      {
        "inputs": [],
        "name": "API_VERSION",
        "outputs": [
          {
            "internalType": "string",
            "name": "",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "DEBT_PURCHASER",
        "outputs": [
          {
            "internalType": "bytes32",
            "name": "",
            "type": "bytes32"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "DEFAULT_ADMIN_ROLE",
        "outputs": [
          {
            "internalType": "bytes32",
            "name": "",
            "type": "bytes32"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "DOMAIN_SEPARATOR",
        "outputs": [
          {
            "internalType": "bytes32",
            "name": "",
            "type": "bytes32"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "DOMAIN_TYPE_HASH",
        "outputs": [
          {
            "internalType": "bytes32",
            "name": "",
            "type": "bytes32"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "MAX_BPS",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "MAX_BPS_EXTENDED",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "MAX_FEE_BPS",
        "outputs": [
          {
            "internalType": "uint16",
            "name": "",
            "type": "uint16"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "MAX_QUEUE",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "ONE_YEAR",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "PERMIT_TYPE_HASH",
        "outputs": [
          {
            "internalType": "bytes32",
            "name": "",
            "type": "bytes32"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "REPORTING_MANAGER",
        "outputs": [
          {
            "internalType": "bytes32",
            "name": "",
            "type": "bytes32"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "STRATEGY_MANAGER",
        "outputs": [
          {
            "internalType": "bytes32",
            "name": "",
            "type": "bytes32"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "accountant",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "newStrategy",
            "type": "address"
          }
        ],
        "name": "addStrategy",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "owner",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "spender",
            "type": "address"
          }
        ],
        "name": "allowance",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "spender",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "amount",
            "type": "uint256"
          }
        ],
        "name": "approve",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "strategy",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "assetsNeeded",
            "type": "uint256"
          }
        ],
        "name": "assessShareOfUnrealisedLosses",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "asset",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "assetContract",
        "outputs": [
          {
            "internalType": "contract IERC20",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "addr",
            "type": "address"
          }
        ],
        "name": "balanceOf",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "strategy",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "amount",
            "type": "uint256"
          }
        ],
        "name": "buyDebt",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "shares",
            "type": "uint256"
          }
        ],
        "name": "convertToAssets",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "assets",
            "type": "uint256"
          }
        ],
        "name": "convertToShares",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "customFeeBPS",
        "outputs": [
          {
            "internalType": "uint16",
            "name": "",
            "type": "uint16"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "customFeeRecipient",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "customFees",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "totalFees",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "totalRefunds",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "protocolFees",
            "type": "uint256"
          },
          {
            "internalType": "address",
            "name": "protocolFeeRecipient",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "decimals",
        "outputs": [
          {
            "internalType": "uint8",
            "name": "",
            "type": "uint8"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "decimalsValue",
        "outputs": [
          {
            "internalType": "uint8",
            "name": "",
            "type": "uint8"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "name": "defaultQueue",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "assets",
            "type": "uint256"
          },
          {
            "internalType": "address",
            "name": "receiver",
            "type": "address"
          }
        ],
        "name": "deposit",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "depositLimit",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "depositLimitModule",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "factoryAddress",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "fees",
        "outputs": [
          {
            "components": [
              {
                "internalType": "uint256",
                "name": "totalFees",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "totalRefunds",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "protocolFees",
                "type": "uint256"
              },
              {
                "internalType": "address",
                "name": "protocolFeeRecipient",
                "type": "address"
              }
            ],
            "internalType": "struct FeeAssessment",
            "name": "",
            "type": "tuple"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "strategy",
            "type": "address"
          }
        ],
        "name": "forceRevokeStrategy",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "fullProfitUnlockDate",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "futureRoleManager",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "strategy",
            "type": "address"
          }
        ],
        "name": "getDebt",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "getDefaultQueueLength",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "length",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "role",
            "type": "bytes32"
          }
        ],
        "name": "getRoleAdmin",
        "outputs": [
          {
            "internalType": "bytes32",
            "name": "",
            "type": "bytes32"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "role",
            "type": "bytes32"
          },
          {
            "internalType": "address",
            "name": "account",
            "type": "address"
          }
        ],
        "name": "grantRole",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "role",
            "type": "bytes32"
          },
          {
            "internalType": "address",
            "name": "account",
            "type": "address"
          }
        ],
        "name": "hasRole",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_profitMaxUnlockTime",
            "type": "uint256"
          },
          {
            "internalType": "address",
            "name": "_asset",
            "type": "address"
          },
          {
            "internalType": "uint8",
            "name": "_decimals",
            "type": "uint8"
          },
          {
            "internalType": "string",
            "name": "_name",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "_symbol",
            "type": "string"
          },
          {
            "internalType": "address",
            "name": "_accountant",
            "type": "address"
          }
        ],
        "name": "initialize",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "lastProfitUpdate",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "receiver",
            "type": "address"
          }
        ],
        "name": "maxDeposit",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "receiver",
            "type": "address"
          }
        ],
        "name": "maxMint",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "owner",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "maxLoss",
            "type": "uint256"
          },
          {
            "internalType": "address[]",
            "name": "_strategies",
            "type": "address[]"
          }
        ],
        "name": "maxRedeem",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "owner",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "maxLoss",
            "type": "uint256"
          },
          {
            "internalType": "address[]",
            "name": "_strategies",
            "type": "address[]"
          }
        ],
        "name": "maxWithdraw",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "minimumTotalIdle",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "shares",
            "type": "uint256"
          },
          {
            "internalType": "address",
            "name": "receiver",
            "type": "address"
          }
        ],
        "name": "mint",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "name",
        "outputs": [
          {
            "internalType": "string",
            "name": "",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "name": "nonces",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "",
            "type": "bytes32"
          }
        ],
        "name": "openRoles",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "owner",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "spender",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "amount",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "deadline",
            "type": "uint256"
          },
          {
            "internalType": "uint8",
            "name": "v",
            "type": "uint8"
          },
          {
            "internalType": "bytes32",
            "name": "r",
            "type": "bytes32"
          },
          {
            "internalType": "bytes32",
            "name": "s",
            "type": "bytes32"
          }
        ],
        "name": "permit",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "assets",
            "type": "uint256"
          }
        ],
        "name": "previewDeposit",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "shares",
            "type": "uint256"
          }
        ],
        "name": "previewMint",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "shares",
            "type": "uint256"
          }
        ],
        "name": "previewRedeem",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "assets",
            "type": "uint256"
          }
        ],
        "name": "previewWithdraw",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "pricePerShare",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "strategy",
            "type": "address"
          }
        ],
        "name": "processReport",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "profitMaxUnlockTime",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "profitUnlockingRate",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "shares",
            "type": "uint256"
          },
          {
            "internalType": "address",
            "name": "receiver",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "owner",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "maxLoss",
            "type": "uint256"
          },
          {
            "internalType": "address[]",
            "name": "_strategies",
            "type": "address[]"
          }
        ],
        "name": "redeem",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "role",
            "type": "bytes32"
          },
          {
            "internalType": "address",
            "name": "account",
            "type": "address"
          }
        ],
        "name": "renounceRole",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes32",
            "name": "role",
            "type": "bytes32"
          },
          {
            "internalType": "address",
            "name": "account",
            "type": "address"
          }
        ],
        "name": "revokeRole",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "strategy",
            "type": "address"
          }
        ],
        "name": "revokeStrategy",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "roleManager",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "name": "roles",
        "outputs": [
          {
            "internalType": "bytes32",
            "name": "",
            "type": "bytes32"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "newAccountant",
            "type": "address"
          }
        ],
        "name": "setAccountant",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address[]",
            "name": "newDefaultQueue",
            "type": "address[]"
          }
        ],
        "name": "setDefaultQueue",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_depositLimit",
            "type": "uint256"
          }
        ],
        "name": "setDepositLimit",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_depositLimitModule",
            "type": "address"
          }
        ],
        "name": "setDepositLimitModule",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "totalFees",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "totalRefunds",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "protocolFees",
            "type": "uint256"
          },
          {
            "internalType": "address",
            "name": "protocolFeeRecipient",
            "type": "address"
          }
        ],
        "name": "setFees",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_minimumTotalIdle",
            "type": "uint256"
          }
        ],
        "name": "setMinimumTotalIdle",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "_newProfitMaxUnlockTime",
            "type": "uint256"
          }
        ],
        "name": "setProfitMaxUnlockTime",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bool",
            "name": "_useDefaultQueue",
            "type": "bool"
          }
        ],
        "name": "setUseDefaultQueue",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_withdrawLimitModule",
            "type": "address"
          }
        ],
        "name": "setWithdrawLimitModule",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "sharesName",
        "outputs": [
          {
            "internalType": "string",
            "name": "",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "sharesSymbol",
        "outputs": [
          {
            "internalType": "string",
            "name": "",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "shutdown",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "shutdownVault",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "name": "strategies",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "activation",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "lastReport",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "currentDebt",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "maxDebt",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "bytes4",
            "name": "interfaceId",
            "type": "bytes4"
          }
        ],
        "name": "supportsInterface",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "symbol",
        "outputs": [
          {
            "internalType": "string",
            "name": "",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "totalAssets",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "totalDebtAmount",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "totalIdleAmount",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "totalSupply",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "totalSupplyAmount",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "receiver",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "amount",
            "type": "uint256"
          }
        ],
        "name": "transfer",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "sender",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "receiver",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "amount",
            "type": "uint256"
          }
        ],
        "name": "transferFrom",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "unlockedShares",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "sender",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "strategy",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "targetDebt",
            "type": "uint256"
          }
        ],
        "name": "updateDebt",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "strategy",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "newMaxDebt",
            "type": "uint256"
          }
        ],
        "name": "updateMaxDebtForStrategy",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "useDefaultQueue",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "assets",
            "type": "uint256"
          },
          {
            "internalType": "address",
            "name": "receiver",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "owner",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "maxLoss",
            "type": "uint256"
          },
          {
            "internalType": "address[]",
            "name": "_strategies",
            "type": "address[]"
          }
        ],
        "name": "withdraw",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "inputs": [],
        "name": "withdrawLimitModule",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      }
    ],
    "transactionHash": "0x30a6b4faa08ff193d2664b3802a185200793b48262953a12b0822acf9a10b196",
    "receipt": {
      "to": null,
      "from": "0x0Eb7DEE6e18Cce8fE839E986502d95d47dC0ADa3",
      "contractAddress": "0xE291820E9Af7c48F40DEf6525926e3a30ecFFAE8",
      "transactionIndex": 2,
      "gasUsed": "6616668",
      "logsBloom": "0x
      "blockHash": "0x8c1e0b0bfa3f3419a5aef6c9fc0e3249a03589682ac9a97fea768f17e5714943",
      "transactionHash": "0x30a6b4faa08ff193d2664b3802a185200793b48262953a12b0822acf9a10b196",
      "logs": [],
      "blockNumber": 58251666,
      "cumulativeGasUsed": "7311764",
      "status": 1,
      "byzantium": true
    },
    "args": [],
    "numDeployments": 1,
    "solcInputHash": "f0e86c7bd2bf3d6c80a8ae40242bdbd0",
    "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AmountTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DebtDidntChange\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxDebt\",\"type\":\"uint256\"}],\"name\":\"DebtHigherThanMaxDebt\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC20ApprovalFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentAllowance\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC20PermitExpired\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recoveredAddress\",\"type\":\"address\"}],\"name\":\"ERC20PermitInvalidSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC20TransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"recipientMaxDeposit\",\"type\":\"uint256\"}],\"name\":\"ExceedDepositLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeeExceedsMax\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"InactiveStrategy\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InactiveVault\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currTotalIdle\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestedAssets\",\"type\":\"uint256\"}],\"name\":\"InsufficientAssets\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientFunds\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balanceOfOwner\",\"type\":\"uint256\"}],\"name\":\"InsufficientShares\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"InvalidAsset\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAssetDecimals\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxLoss\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProfitUnlockTimeTooLong\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StrategyAlreadyActive\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"strageyCurrentDebt\",\"type\":\"uint256\"}],\"name\":\"StrategyDebtIsLessThanAssetsNeeded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"}],\"name\":\"StrategyHasDebt\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"unrealisedLosses\",\"type\":\"uint256\"}],\"name\":\"StrategyHasUnrealisedLosses\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooMuchLoss\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UsingDepositLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UsingModule\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroValue\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DebtPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentDebt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDebt\",\"type\":\"uint256\"}],\"name\":\"DebtUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"RoleSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"enum RoleStatusChange\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"RoleStatusChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Shutdown\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum StrategyChangeType\",\"name\":\"changeType\",\"type\":\"uint8\"}],\"name\":\"StrategyChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gain\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loss\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentDebt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protocolFees\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalFees\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalRefunds\",\"type\":\"uint256\"}],\"name\":\"StrategyReported\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"accountant\",\"type\":\"address\"}],\"name\":\"UpdatedAccountant\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"newDefaultQueue\",\"type\":\"address[]\"}],\"name\":\"UpdatedDefaultQueue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositLimit\",\"type\":\"uint256\"}],\"name\":\"UpdatedDepositLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"depositLimitModule\",\"type\":\"address\"}],\"name\":\"UpdatedDepositLimitModule\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalFees\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalRefunds\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protocolFees\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"protocolFeeRecipient\",\"type\":\"address\"}],\"name\":\"UpdatedFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDebt\",\"type\":\"uint256\"}],\"name\":\"UpdatedMaxDebtForStrategy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minimumTotalIdle\",\"type\":\"uint256\"}],\"name\":\"UpdatedMinimumTotalIdle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"profitMaxUnlockTime\",\"type\":\"uint256\"}],\"name\":\"UpdatedProfitMaxUnlockTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"roleManager\",\"type\":\"address\"}],\"name\":\"UpdatedRoleManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"useDefaultQueue\",\"type\":\"bool\"}],\"name\":\"UpdatedUseDefaultQueue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"withdrawLimitModule\",\"type\":\"address\"}],\"name\":\"UpdatedWithdrawLimitModule\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"API_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEBT_PURCHASER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPE_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_BPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_BPS_EXTENDED\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_FEE_BPS\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_QUEUE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ONE_YEAR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPE_HASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REPORTING_MANAGER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STRATEGY_MANAGER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accountant\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newStrategy\",\"type\":\"address\"}],\"name\":\"addStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assetsNeeded\",\"type\":\"uint256\"}],\"name\":\"assessShareOfUnrealisedLosses\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetContract\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"convertToAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"convertToShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"customFeeBPS\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"customFeeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"customFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalFees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRefunds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolFees\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"protocolFeeRecipient\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimalsValue\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"defaultQueue\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositLimitModule\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factoryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fees\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"totalFees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRefunds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolFees\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"protocolFeeRecipient\",\"type\":\"address\"}],\"internalType\":\"struct FeeAssessment\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"forceRevokeStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fullProfitUnlockDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"futureRoleManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"getDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDefaultQueueLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_profitMaxUnlockTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_accountant\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastProfitUpdate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"maxDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"maxMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxLoss\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_strategies\",\"type\":\"address[]\"}],\"name\":\"maxRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxLoss\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_strategies\",\"type\":\"address[]\"}],\"name\":\"maxWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumTotalIdle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"openRoles\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pricePerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"processReport\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"profitMaxUnlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"profitUnlockingRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxLoss\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_strategies\",\"type\":\"address[]\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"revokeStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roleManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"roles\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAccountant\",\"type\":\"address\"}],\"name\":\"setAccountant\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"newDefaultQueue\",\"type\":\"address[]\"}],\"name\":\"setDefaultQueue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositLimit\",\"type\":\"uint256\"}],\"name\":\"setDepositLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositLimitModule\",\"type\":\"address\"}],\"name\":\"setDepositLimitModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalFees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRefunds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolFees\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"protocolFeeRecipient\",\"type\":\"address\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimumTotalIdle\",\"type\":\"uint256\"}],\"name\":\"setMinimumTotalIdle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newProfitMaxUnlockTime\",\"type\":\"uint256\"}],\"name\":\"setProfitMaxUnlockTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_useDefaultQueue\",\"type\":\"bool\"}],\"name\":\"setUseDefaultQueue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_withdrawLimitModule\",\"type\":\"address\"}],\"name\":\"setWithdrawLimitModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sharesName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sharesSymbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shutdown\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shutdownVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"strategies\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"activation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastReport\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDebtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalIdleAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupplyAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockedShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"targetDebt\",\"type\":\"uint256\"}],\"name\":\"updateDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newMaxDebt\",\"type\":\"uint256\"}],\"name\":\"updateMaxDebtForStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"useDefaultQueue\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxLoss\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_strategies\",\"type\":\"address[]\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawLimitModule\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"addStrategy(address)\":{\"params\":{\"newStrategy\":\"The new strategy to add.\"}},\"allowance(address,address)\":{\"params\":{\"owner\":\"The address that owns the shares.\",\"spender\":\"The address that is allowed to spend the shares.\"}},\"approve(address,uint256)\":{\"params\":{\"amount\":\"The amount of shares to approve.\",\"spender\":\"The address to approve.\"},\"returns\":{\"_0\":\"True if the approval was successful.\"}},\"assessShareOfUnrealisedLosses(address,uint256)\":{\"params\":{\"assetsNeeded\":\"The amount of assets needed by the strategy.\",\"strategy\":\"The strategy to assess the share of unrealised losses for.\"}},\"asset()\":{\"returns\":{\"_0\":\"The address of the asset.\"}},\"balanceOf(address)\":{\"params\":{\"addr\":\"The address to get the balance of.\"},\"returns\":{\"_0\":\"The balance of the user.\"}},\"buyDebt(address,uint256)\":{\"details\":\"This should only ever be used in an emergency in place of force revoking a strategy in order to not report a loss. It allows the DEBT_PURCHASER role to buy the strategies debt for an equal amount of `asset`.\",\"params\":{\"amount\":\"The amount of debt to buy from the vault.\",\"strategy\":\"The strategy to buy the debt for\"}},\"convertToAssets(uint256)\":{\"params\":{\"shares\":\"The amount of shares to convert.\"},\"returns\":{\"_0\":\"The amount of assets.\"}},\"convertToShares(uint256)\":{\"params\":{\"assets\":\"The amount of assets to convert.\"},\"returns\":{\"_0\":\"The amount of shares.\"}},\"decimals()\":{\"returns\":{\"_0\":\"The number of decimals of the asset/share.\"}},\"deposit(uint256,address)\":{\"params\":{\"assets\":\"The amount of assets to deposit.\",\"receiver\":\"The address to receive the shares.\"},\"returns\":{\"_0\":\"The amount of shares minted.\"}},\"fees()\":{\"returns\":{\"_0\":\"The vault's fees.\"}},\"forceRevokeStrategy(address)\":{\"details\":\"The vault will remove the strategy and write off any debt left in it as a loss. This function is a dangerous function as it can force a strategy to take a loss. All possible assets should be removed from the strategy first via update_debt. If a strategy is removed erroneously it can be re-added and the loss will be credited as profit. Fees will apply.\",\"params\":{\"strategy\":\"The strategy to force revoke.\"}},\"getDebt(address)\":{\"params\":{\"strategy\":\"The strategy to withdraw from.\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"maxDeposit(address)\":{\"params\":{\"receiver\":\"The address that will receive the shares.\"},\"returns\":{\"_0\":\"The maximum amount of assets that can be deposited.\"}},\"maxMint(address)\":{\"params\":{\"receiver\":\"The address that will receive the shares.\"},\"returns\":{\"_0\":\"The maximum amount of shares that can be minted.\"}},\"maxRedeem(address,uint256,address[])\":{\"details\":\"Complies to normal 4626 interface and takes custom params.\",\"params\":{\"_strategies\":\"Custom strategies queue if any.\",\"maxLoss\":\"Custom maxLoss if any.\",\"owner\":\"The address that owns the shares.\"},\"returns\":{\"_0\":\"The maximum amount of shares that can be redeemed.\"}},\"maxWithdraw(address,uint256,address[])\":{\"details\":\"Complies to normal 4626 interface and takes custom params.\",\"params\":{\"_strategies\":\"Custom strategies queue if any.\",\"maxLoss\":\"Custom maxLoss if any.\",\"owner\":\"The address that owns the shares.\"},\"returns\":{\"_0\":\"The maximum amount of assets that can be withdrawn.\"}},\"mint(uint256,address)\":{\"params\":{\"receiver\":\"The address to receive the shares.\",\"shares\":\"The amount of shares to mint.\"},\"returns\":{\"_0\":\"The amount of assets deposited.\"}},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"amount\":\"The amount of shares to approve.\",\"deadline\":\"The deadline for the permit.\",\"owner\":\"The address to approve.\",\"r\":\"The r component of the signature.\",\"s\":\"The s component of the signature.\",\"spender\":\"The address to approve.\",\"v\":\"The v component of the signature.\"},\"returns\":{\"_0\":\"True if the approval was successful.\"}},\"previewDeposit(uint256)\":{\"params\":{\"assets\":\"The amount of assets to deposit.\"},\"returns\":{\"_0\":\"The amount of shares that would be minted.\"}},\"previewMint(uint256)\":{\"params\":{\"shares\":\"The amount of shares to mint.\"},\"returns\":{\"_0\":\"The amount of assets that would be deposited.\"}},\"previewRedeem(uint256)\":{\"params\":{\"shares\":\"The amount of shares to redeem.\"},\"returns\":{\"_0\":\"The amount of assets that would be withdrawn.\"}},\"previewWithdraw(uint256)\":{\"params\":{\"assets\":\"The amount of assets to withdraw.\"},\"returns\":{\"_0\":\"The amount of shares that would be redeemed.\"}},\"pricePerShare()\":{\"details\":\"This value offers limited precision. Integrations that require exact precision should use convertToAssets or convertToShares instead.\",\"returns\":{\"_0\":\"The price per share.\"}},\"processReport(address)\":{\"details\":\"Processing a report means comparing the debt that the strategy has taken with the current amount of funds it is reporting. If the strategy owes less than it currently has, it means it has had a profit, else (assets < debt) it has had a loss. Different strategies might choose different reporting strategies: pessimistic, only realised P&L, ... The best way to report depends on the strategy. The profit will be distributed following a smooth curve over the vaults profitMaxUnlockTime seconds. Losses will be taken immediately, first from the profit buffer (avoiding an impact in pps), then will reduce pps. Any applicable fees are charged and distributed during the report as well to the specified recipients.\",\"params\":{\"strategy\":\"The strategy to process the report for.\"},\"returns\":{\"_0\":\"The gain and loss of the strategy.\"}},\"redeem(uint256,address,address,uint256,address[])\":{\"details\":\"The default behavior is to allow losses to be realized.\",\"params\":{\"_strategies\":\"Optional array of strategies to withdraw from.\",\"maxLoss\":\"Optional amount of acceptable loss in Basis Points.\",\"owner\":\"The address who's shares are being burnt.\",\"receiver\":\"The address to receive the assets.\",\"shares\":\"The amount of shares to burn.\"},\"returns\":{\"_0\":\"The amount of assets actually withdrawn.\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"revokeStrategy(address)\":{\"params\":{\"strategy\":\"The strategy to revoke.\"}},\"setAccountant(address)\":{\"params\":{\"newAccountant\":\"The new accountant address.\"}},\"setDefaultQueue(address[])\":{\"details\":\"Will check each strategy to make sure it is active.\",\"params\":{\"newDefaultQueue\":\"The new default queue array.\"}},\"setDepositLimit(uint256)\":{\"details\":\"Can not be changed if a depositLimitModule is set or if shutdown.\",\"params\":{\"_depositLimit\":\"The new deposit limit.\"}},\"setDepositLimitModule(address)\":{\"details\":\"The default `depositLimit` will need to be set to max uint256 since the module will override it.\",\"params\":{\"_depositLimitModule\":\"Address of the module.\"}},\"setMinimumTotalIdle(uint256)\":{\"params\":{\"_minimumTotalIdle\":\"The new minimum total idle.\"}},\"setProfitMaxUnlockTime(uint256)\":{\"details\":\"The time is denominated in seconds and must be less than 1 year.  We only need to update locking period if setting to 0,  since the current period will use the old rate and on the next  report it will be reset with the new unlocking time.  Setting to 0 will cause any currently locked profit to instantly unlock and an immediate increase in the vaults Price Per Share.\",\"params\":{\"_newProfitMaxUnlockTime\":\"The new profit max unlock time.\"}},\"setUseDefaultQueue(bool)\":{\"details\":\"If set `True` the default queue will always be used no matter whats passed in.\",\"params\":{\"_useDefaultQueue\":\"new value.\"}},\"setWithdrawLimitModule(address)\":{\"details\":\"This will override the default `maxWithdraw`.\",\"params\":{\"_withdrawLimitModule\":\"Address of the module.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"totalAssets()\":{\"returns\":{\"_0\":\"The total assets held by the vault.\"}},\"totalSupply()\":{\"returns\":{\"_0\":\"The total supply of shares.\"}},\"transfer(address,uint256)\":{\"params\":{\"amount\":\"The amount of shares to transfer.\",\"receiver\":\"The address to transfer shares to.\"},\"returns\":{\"_0\":\"True if the transfer was successful.\"}},\"transferFrom(address,address,uint256)\":{\"params\":{\"amount\":\"The amount of shares to transfer.\",\"receiver\":\"The address to transfer shares to.\",\"sender\":\"The address to transfer shares from.\"},\"returns\":{\"_0\":\"True if the transfer was successful.\"}},\"unlockedShares()\":{\"returns\":{\"_0\":\"The amount of shares that are have been unlocked.\"}},\"updateDebt(address,address,uint256)\":{\"params\":{\"strategy\":\"The strategy to update the debt for.\",\"targetDebt\":\"The target debt for the strategy.\"},\"returns\":{\"_0\":\"The amount of debt added or removed.\"}},\"updateMaxDebtForStrategy(address,uint256)\":{\"params\":{\"newMaxDebt\":\"The new max debt for the strategy.\",\"strategy\":\"The strategy to update the max debt for.\"}},\"withdraw(uint256,address,address,uint256,address[])\":{\"details\":\"The default behavior is to not allow any loss.\",\"params\":{\"_strategies\":\"Optional array of strategies to withdraw from.\",\"assets\":\"The amount of asset to withdraw.\",\"maxLoss\":\"Optional amount of acceptable loss in Basis Points.\",\"owner\":\"The address who's shares are being burnt.\",\"receiver\":\"The address to receive the assets.\"},\"returns\":{\"_0\":\"The amount of shares actually burnt.\"}}},\"title\":\"Fathom Vault\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"API_VERSION()\":{\"notice\":\"The version of this vault.\"},\"DOMAIN_SEPARATOR()\":{\"notice\":\"EIP-2612 permit() domain separator.\"},\"DOMAIN_TYPE_HASH()\":{\"notice\":\"EIP-2612 permit() typehashes\"},\"MAX_BPS()\":{\"notice\":\"100% in Basis Points.\"},\"MAX_BPS_EXTENDED()\":{\"notice\":\"Extended for profit locking calculations.\"},\"MAX_FEE_BPS()\":{\"notice\":\"50% in BPS for fees.\"},\"MAX_QUEUE()\":{\"notice\":\"The max length the withdrawal queue can be.\"},\"ONE_YEAR()\":{\"notice\":\"One year constant for calculating the profit unlocking rate.\"},\"STRATEGY_MANAGER()\":{\"notice\":\"Roles\"},\"accountant()\":{\"notice\":\"Contract that charges fees and can give refunds.\"},\"addStrategy(address)\":{\"notice\":\"Add a new strategy.\"},\"allowance(address,address)\":{\"notice\":\"Get the allowance for a spender.\"},\"approve(address,uint256)\":{\"notice\":\"Approve an address to spend the vault's shares.\"},\"assessShareOfUnrealisedLosses(address,uint256)\":{\"notice\":\"Assess the share of unrealised losses for a strategy.\"},\"asset()\":{\"notice\":\"Get the address of the asset.\"},\"assetContract()\":{\"notice\":\"Address of the underlying token used by the vault\"},\"balanceOf(address)\":{\"notice\":\"Get the balance of a user.\"},\"buyDebt(address,uint256)\":{\"notice\":\"Used for governance to buy bad debt from the vault.\"},\"convertToAssets(uint256)\":{\"notice\":\"Convert an amount of shares to assets.\"},\"convertToShares(uint256)\":{\"notice\":\"Convert an amount of assets to shares.\"},\"customFeeBPS()\":{\"notice\":\"The custom fee BPS charged for withdrawals.\"},\"customFeeRecipient()\":{\"notice\":\"Address of the custom fee recipient.\"},\"decimals()\":{\"notice\":\"Get the number of decimals of the asset/share.\"},\"decimalsValue()\":{\"notice\":\"The current decimals value of the vault.\"},\"defaultQueue(uint256)\":{\"notice\":\"The current default withdrawal queue.\"},\"deposit(uint256,address)\":{\"notice\":\"Deposit assets into the vault.\"},\"depositLimit()\":{\"notice\":\"Maximum amount of tokens that the vault can accept. If totalAssets > deposit_limit, deposits will revert.\"},\"depositLimitModule()\":{\"notice\":\"Contract to control the deposit limit.\"},\"factoryAddress()\":{\"notice\":\"Factory address\"},\"fees()\":{\"notice\":\"Get the vault's fees.\"},\"forceRevokeStrategy(address)\":{\"notice\":\"Force revoke a strategy.\"},\"fullProfitUnlockDate()\":{\"notice\":\"The timestamp of when the current unlocking period ends.\"},\"futureRoleManager()\":{\"notice\":\"Temporary variable to store the address of the next role_manager until the role is accepted.\"},\"getDebt(address)\":{\"notice\":\"Get debt for a strategy.\"},\"getDefaultQueueLength()\":{\"notice\":\"Get default strategy queue length.\"},\"lastProfitUpdate()\":{\"notice\":\"Last timestamp of the most recent profitable report.\"},\"maxDeposit(address)\":{\"notice\":\"Get the maximum amount of assets that can be deposited.\"},\"maxMint(address)\":{\"notice\":\"Get the maximum amount of shares that can be minted.\"},\"maxRedeem(address,uint256,address[])\":{\"notice\":\"Get the maximum amount of shares that can be redeemed.\"},\"maxWithdraw(address,uint256,address[])\":{\"notice\":\"Get the maximum amount of assets that can be withdrawn.\"},\"minimumTotalIdle()\":{\"notice\":\"Minimum amount of assets that should be kept in the vault contract to allow for fast, cheap redeems.\"},\"mint(uint256,address)\":{\"notice\":\"Mint shares for the receiver.\"},\"name()\":{\"notice\":\"ERC20 - name of the vault's token\"},\"nonces(address)\":{\"notice\":\"EIP-2612 permit() nonces\"},\"openRoles(bytes32)\":{\"notice\":\"HashMap mapping roles to their permissioned state. If false, the role is not open to the public.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Approve an address to spend the vault's shares.\"},\"previewDeposit(uint256)\":{\"notice\":\"Preview the amount of shares that would be minted for a deposit.\"},\"previewMint(uint256)\":{\"notice\":\"Preview the amount of assets that would be deposited for a mint.\"},\"previewRedeem(uint256)\":{\"notice\":\"Preview the amount of assets that would be withdrawn for a redeem.\"},\"previewWithdraw(uint256)\":{\"notice\":\"Preview the amount of shares that would be redeemed for a withdraw.\"},\"pricePerShare()\":{\"notice\":\"Get the price per share (pps) of the vault.\"},\"processReport(address)\":{\"notice\":\"Process the report of a strategy.\"},\"profitMaxUnlockTime()\":{\"notice\":\"The amount of time profits will unlock over.\"},\"profitUnlockingRate()\":{\"notice\":\"The per second rate at which profit will unlock.\"},\"redeem(uint256,address,address,uint256,address[])\":{\"notice\":\"Redeems an amount of shares of `owners` shares sending funds to `receiver`.\"},\"revokeStrategy(address)\":{\"notice\":\"Revoke a strategy.\"},\"roleManager()\":{\"notice\":\"Address that can add and remove roles to addresses.\"},\"roles(address)\":{\"notice\":\"HashMap mapping addresses to their roles\"},\"setAccountant(address)\":{\"notice\":\"Set the new accountant address.\"},\"setDefaultQueue(address[])\":{\"notice\":\"Set the new default queue array.\"},\"setDepositLimit(uint256)\":{\"notice\":\"Set the new deposit limit.\"},\"setDepositLimitModule(address)\":{\"notice\":\"Set a contract to handle the deposit limit.\"},\"setFees(uint256,uint256,uint256,address)\":{\"notice\":\"Set fees and refunds.\"},\"setMinimumTotalIdle(uint256)\":{\"notice\":\"Set the new minimum total idle.\"},\"setProfitMaxUnlockTime(uint256)\":{\"notice\":\"Set the new profit max unlock time.\"},\"setUseDefaultQueue(bool)\":{\"notice\":\"Set a new value for `use_default_queue`.\"},\"setWithdrawLimitModule(address)\":{\"notice\":\"Set a contract to handle the withdraw limit.\"},\"sharesName()\":{\"notice\":\"ERC20 - name of the vault's token\"},\"sharesSymbol()\":{\"notice\":\"ERC20 - symbol of the vault's token\"},\"shutdown()\":{\"notice\":\"State of the vault - if set to true, only withdrawals will be available. It can't be reverted.\"},\"shutdownVault()\":{\"notice\":\"Shutdown the vault.\"},\"strategies(address)\":{\"notice\":\"HashMap that records all the strategies that are allowed to receive assets from the vault.\"},\"symbol()\":{\"notice\":\"ERC20 - symbol of the vault's token\"},\"totalAssets()\":{\"notice\":\"Get the total assets held by the vault.\"},\"totalDebtAmount()\":{\"notice\":\"Total amount of assets that has been deposited in strategies.\"},\"totalIdleAmount()\":{\"notice\":\"Current assets held in the vault contract. Replacing balanceOf(this) to avoid pricePerShare manipulation.\"},\"totalSupply()\":{\"notice\":\"Get the total supply of shares.\"},\"totalSupplyAmount()\":{\"notice\":\"Total amount of shares that are currently minted including those locked. NOTE: To get the ERC20 compliant version use totalSupply().\"},\"transfer(address,uint256)\":{\"notice\":\"Transfer shares to a receiver.\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfer shares from a sender to a receiver.\"},\"unlockedShares()\":{\"notice\":\"Get the amount of shares that have been unlocked.\"},\"updateDebt(address,address,uint256)\":{\"notice\":\"Update the debt for a strategy.\"},\"updateMaxDebtForStrategy(address,uint256)\":{\"notice\":\"Update the max debt for a strategy.\"},\"useDefaultQueue()\":{\"notice\":\"Should the vault use the default_queue regardless whats passed in.\"},\"withdraw(uint256,address,address,uint256,address[])\":{\"notice\":\"Withdraw an amount of asset to `receiver` burning `owner`s shares.\"},\"withdrawLimitModule()\":{\"notice\":\"Contract to control the withdraw limit.\"}},\"notice\":\"The Fathom Vault is designed as a non-opinionated system to distribute funds of depositors for a specific `asset` into different opportunities (aka Strategies) and manage accounting in a robust way.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/packages/VaultPackage.sol\":\"VaultPackage\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd6e52cb394d7f5abe5dca2d4908a6be40417914720932de757de34a99ab87f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/CommonErrors.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n// Copyright Fathom 2023\\n\\npragma solidity 0.8.19;\\n\\nerror FeeExceedsMax();\\nerror ERC20InsufficientAllowance(uint256 currentAllowance);\\nerror InsufficientFunds();\\nerror ZeroAddress();\\nerror ERC20PermitExpired();\\nerror ERC20PermitInvalidSignature(address recoveredAddress);\\nerror InsufficientShares(uint256 balanceOfOwner);\\nerror InactiveStrategy(address strategy);\\nerror InactiveVault();\\nerror ExceedDepositLimit(uint256 recipientMaxDeposit);\\nerror ZeroValue();\\nerror StrategyDebtIsLessThanAssetsNeeded(uint256 strageyCurrentDebt);\\nerror MaxLoss();\\nerror InsufficientAssets(uint256 currTotalIdle, uint256 requestedAssets);\\nerror TooMuchLoss();\\nerror InvalidAssetDecimals();\\nerror UsingModule();\\nerror AlreadyInitialized();\\nerror AmountTooHigh();\\nerror ERC20ApprovalFailed();\\nerror ERC20TransferFailed();\\nerror InvalidAsset(address asset);\\nerror StrategyAlreadyActive();\\nerror StrategyHasDebt(uint256 debt);\\nerror DebtDidntChange();\\nerror StrategyHasUnrealisedLosses(uint256 unrealisedLosses);\\nerror DebtHigherThanMaxDebt(uint256 newDebt, uint256 maxDebt);\\nerror UsingDepositLimit();\\nerror ProfitUnlockTimeTooLong();\\n\",\"keccak256\":\"0x29e0d4ed9bf474738245c96cf5f16988ac62eec853b39012ff45408daf543cde\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/VaultStorage.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n// Copyright Fathom 2023\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { AccessControl } from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"./VaultStructs.sol\\\";\\n\\ncontract VaultStorage is AccessControl, ReentrancyGuard {\\n    /// @notice The max length the withdrawal queue can be.\\n    uint256 public constant MAX_QUEUE = 10;\\n    /// @notice 100% in Basis Points.\\n    uint256 public constant MAX_BPS = 10000;\\n    /// @notice 50% in BPS for fees.\\n    uint16 public constant MAX_FEE_BPS = 5000;\\n    /// @notice Extended for profit locking calculations.\\n    uint256 public constant MAX_BPS_EXTENDED = 1_000_000_000_000;\\n    /// @notice One year constant for calculating the profit unlocking rate.\\n    uint256 public constant ONE_YEAR = 31_556_952;\\n    /// @notice The version of this vault.\\n    string public constant API_VERSION = \\\"1.0.0\\\";\\n\\n    /// @notice Roles\\n    bytes32 public constant STRATEGY_MANAGER = keccak256(\\\"STRATEGY_MANAGER\\\");\\n    bytes32 public constant REPORTING_MANAGER = keccak256(\\\"REPORTING_MANAGER\\\");\\n    bytes32 public constant DEBT_PURCHASER = keccak256(\\\"DEBT_PURCHASER\\\");\\n\\n    /// @notice EIP-2612 permit() typehashes\\n    bytes32 public constant DOMAIN_TYPE_HASH = keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n    bytes32 public constant PERMIT_TYPE_HASH = keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n\\n    /// @notice EIP-2612 permit() domain separator.\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 public DOMAIN_SEPARATOR;\\n\\n    /// @notice Total amount of shares that are currently minted including those locked.\\n    /// NOTE: To get the ERC20 compliant version use totalSupply().\\n    uint256 public totalSupplyAmount;\\n\\n    /// @notice Total amount of assets that has been deposited in strategies.\\n    uint256 public totalDebtAmount;\\n    /// @notice Current assets held in the vault contract. Replacing balanceOf(this) to avoid pricePerShare manipulation.\\n    uint256 public totalIdleAmount;\\n    /// @notice Minimum amount of assets that should be kept in the vault contract to allow for fast, cheap redeems.\\n    uint256 public minimumTotalIdle;\\n    /// @notice Maximum amount of tokens that the vault can accept. If totalAssets > deposit_limit, deposits will revert.\\n    uint256 public depositLimit;\\n\\n    /// @notice The amount of time profits will unlock over.\\n    uint256 public profitMaxUnlockTime;\\n    /// @notice The timestamp of when the current unlocking period ends.\\n    uint256 public fullProfitUnlockDate;\\n    /// @notice The per second rate at which profit will unlock.\\n    uint256 public profitUnlockingRate;\\n    /// @notice Last timestamp of the most recent profitable report.\\n    uint256 public lastProfitUpdate;\\n\\n    /// @notice Contract that charges fees and can give refunds.\\n    address public accountant;\\n    /// @notice Contract to control the deposit limit.\\n    address public depositLimitModule;\\n    /// @notice Contract to control the withdraw limit.\\n    address public withdrawLimitModule;\\n\\n    /// @notice Address that can add and remove roles to addresses.\\n    address public roleManager;\\n    /// @notice Temporary variable to store the address of the next role_manager until the role is accepted.\\n    address public futureRoleManager;\\n\\n    /// @notice Factory address\\n    address public factoryAddress;\\n\\n    /// @notice Address of the custom fee recipient.\\n    address public customFeeRecipient;\\n\\n    /// @notice Address of the underlying token used by the vault\\n    IERC20 public assetContract;\\n\\n    /// @notice The custom fee BPS charged for withdrawals.\\n    uint16 public customFeeBPS;\\n\\n    /// @notice Should the vault use the default_queue regardless whats passed in.\\n    bool public useDefaultQueue;\\n\\n    /// @notice State of the vault - if set to true, only withdrawals will be available. It can't be reverted.\\n    bool public shutdown;\\n\\n    /// @notice Initialized state of the vault.\\n    bool internal initialized;\\n\\n    /// @notice The current decimals value of the vault.\\n    uint8 public decimalsValue;\\n\\n    /// @notice ERC20 - name of the vault's token\\n    string public sharesName;\\n    /// @notice ERC20 - symbol of the vault's token\\n    string public sharesSymbol;\\n\\n    /// @notice The current default withdrawal queue.\\n    address[] public defaultQueue;\\n\\n    // The custom fees\\n    FeeAssessment public customFees;\\n\\n    /// @notice HashMap that records all the strategies that are allowed to receive assets from the vault.\\n    mapping(address => StrategyParams) public strategies;\\n\\n    /// @notice ERC20 - amount of shares per account\\n    mapping(address => uint256) internal _balanceOf;\\n    /// @notice ERC20 - owner -> (spender -> amount)\\n    mapping(address => mapping(address => uint256)) internal _allowance;\\n\\n    /// @notice EIP-2612 permit() nonces\\n    mapping(address => uint256) public nonces;\\n\\n    /// @notice HashMap mapping addresses to their roles\\n    mapping(address => bytes32) public roles;\\n    /// @notice HashMap mapping roles to their permissioned state. If false, the role is not open to the public.\\n    mapping(bytes32 => bool) public openRoles;\\n}\\n\",\"keccak256\":\"0x2cbc4f2b7529ece0fcaaada2da4b19451fb6b4689e4d8d53a9c38fcb8fccd241\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/VaultStructs.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n// Copyright Fathom 2023\\n\\npragma solidity 0.8.19;\\n\\nstruct StrategyParams {\\n    uint256 activation;\\n    uint256 lastReport;\\n    uint256 currentDebt;\\n    uint256 maxDebt;\\n}\\n\\nstruct FeeAssessment {\\n    uint256 totalFees;\\n    uint256 totalRefunds;\\n    uint256 protocolFees;\\n    address protocolFeeRecipient;\\n}\\n\\nstruct ShareManagement {\\n    uint256 sharesToBurn;\\n    uint256 accountantFeesShares;\\n    uint256 protocolFeesShares;\\n}\\n\\nstruct WithdrawalState {\\n    uint256 requestedAssets;\\n    uint256 currTotalIdle;\\n    uint256 currTotalDebt;\\n    uint256 assetsNeeded;\\n    uint256 previousBalance;\\n    uint256 unrealisedLossesShare;\\n}\\n\\nenum StrategyChangeType {\\n    ADDED, // Corresponds to the strategy being added.\\n    REVOKED // Corresponds to the strategy being revoked.\\n}\\n\\nenum RoleStatusChange {\\n    OPENED, // Corresponds to a role being opened.\\n    CLOSED // Corresponds to a role being closed.\\n}\\n\\nenum Rounding {\\n    ROUND_DOWN, // Corresponds to rounding down to the nearest whole number.\\n    ROUND_UP // Corresponds to rounding up to the nearest whole number.\\n}\\n\",\"keccak256\":\"0x7e35a13e971bc0eb6983be78142f2198a5ab247063270b09b3d36c8289aa86e0\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/interfaces/IAccountant.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n// Copyright Fathom 2023\\n\\npragma solidity 0.8.19;\\n\\ninterface IAccountant {\\n    function report(address strategy, uint256 gain, uint256 loss) external returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0x76c8fecd3e475d7b9a8ef7ae7481eb6045858d770f668d74b7aebe7c322b855e\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/interfaces/IDepositLimitModule.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n// Copyright Fathom 2023\\n\\npragma solidity 0.8.19;\\n\\ninterface IDepositLimitModule {\\n    function availableDepositLimit(address receiver) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa603bf8a0958b021e08a7412e5e1e08a30fb2105fe4a5d662b4206201ea0795c\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/interfaces/IERC4626.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC4626.sol)\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\n/// @dev Interface of the ERC4626 \\\"Tokenized Vault Standard\\\", as defined in\\n/// https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\\ninterface IERC4626 is IERC20, IERC20Metadata {\\n    event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\\n\\n    event Withdraw(address indexed sender, address indexed receiver, address indexed owner, uint256 assets, uint256 shares);\\n\\n    /// @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\\n    ///\\n    /// - MUST emit the Deposit event.\\n    /// - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n    /// deposit execution, and are accounted for during deposit.\\n    /// - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\\n    /// approving enough underlying tokens to the Vault contract, etc).\\n    ///\\n    /// NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\\n\\n    /// @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\\n    ///\\n    /// - MUST emit the Deposit event.\\n    /// - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\\n    /// execution, and are accounted for during mint.\\n    /// - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\\n    /// approving enough underlying tokens to the Vault contract, etc).\\n    ///\\n    /// NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\\n\\n    /// @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\\n    /// Vault, through a withdraw call.\\n    ///\\n    /// - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n    /// - MUST NOT revert.\\n    function maxWithdraw(address owner, uint256 maxLoss, address[] calldata strategies) external returns (uint256 maxAssets);\\n\\n    /// @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\\n    ///\\n    /// - MUST emit the Withdraw event.\\n    /// - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n    /// withdraw execution, and are accounted for during withdraw.\\n    /// - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\\n    /// not having enough shares, etc).\\n    ///\\n    /// Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n    /// Those methods should be performed separately.\\n    function withdraw(\\n        uint256 assets,\\n        address receiver,\\n        address owner,\\n        uint256 maxLoss,\\n        address[] calldata strategies\\n    ) external returns (uint256 shares);\\n\\n    /// @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\\n    /// through a redeem call.\\n    ///\\n    /// - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n    /// - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\\n    /// - MUST NOT revert.\\n    function maxRedeem(address owner, uint256 maxLoss, address[] calldata strategies) external returns (uint256 maxShares);\\n\\n    /// @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\\n    ///\\n    /// - MUST emit the Withdraw event.\\n    /// - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n    /// redeem execution, and are accounted for during redeem.\\n    /// - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\\n    /// not having enough shares, etc).\\n    ///\\n    /// NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n    /// Those methods should be performed separately.\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address owner,\\n        uint256 maxLoss,\\n        address[] calldata strategies\\n    ) external returns (uint256 assets);\\n\\n    /// @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\\n    ///\\n    /// - MUST be an ERC-20 token contract.\\n    /// - MUST NOT revert.\\n    function asset() external view returns (address assetTokenAddress);\\n\\n    /// @dev Returns the total amount of the underlying asset that is \\u201cmanaged\\u201d by Vault.\\n    ///\\n    /// - SHOULD include any compounding that occurs from yield.\\n    /// - MUST be inclusive of any fees that are charged against assets in the Vault.\\n    /// - MUST NOT revert.\\n    function totalAssets() external view returns (uint256 totalManagedAssets);\\n\\n    /// @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\\n    /// scenario where all the conditions are met.\\n    ///\\n    /// - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n    /// - MUST NOT show any variations depending on the caller.\\n    /// - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n    /// - MUST NOT revert.\\n    ///\\n    /// NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n    /// \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n    /// from.\\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\\n\\n    /// @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\\n    /// scenario where all the conditions are met.\\n    ///\\n    /// - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n    /// - MUST NOT show any variations depending on the caller.\\n    /// - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n    /// - MUST NOT revert.\\n    ///\\n    /// NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n    /// \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n    /// from.\\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\\n\\n    /// @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\\n    /// through a deposit call.\\n    ///\\n    /// - MUST return a limited value if receiver is subject to some deposit limit.\\n    /// - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\\n    /// - MUST NOT revert.\\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\\n\\n    /// @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\\n    /// current on-chain conditions.\\n    ///\\n    /// - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\\n    /// call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\\n    /// in the same transaction.\\n    /// - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\\n    /// deposit would be accepted, regardless if the user has enough tokens approved, etc.\\n    /// - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n    /// - MUST NOT revert.\\n    ///\\n    /// NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\\n    /// share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\\n\\n    /// @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\\n    /// - MUST return a limited value if receiver is subject to some mint limit.\\n    /// - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\\n    /// - MUST NOT revert.\\n    function maxMint(address receiver) external view returns (uint256 maxShares);\\n\\n    /// @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\\n    /// current on-chain conditions.\\n    ///\\n    /// - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\\n    /// in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\\n    /// same transaction.\\n    /// - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\\n    /// would be accepted, regardless if the user has enough tokens approved, etc.\\n    /// - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n    /// - MUST NOT revert.\\n    ///\\n    /// NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\\n    /// share price or some other type of condition, meaning the depositor will lose assets by minting.\\n    function previewMint(uint256 shares) external view returns (uint256 assets);\\n\\n    /// @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\\n    /// given current on-chain conditions.\\n    ///\\n    /// - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\\n    /// call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\\n    /// called\\n    /// in the same transaction.\\n    /// - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\\n    /// the withdrawal would be accepted, regardless if the user has enough shares, etc.\\n    /// - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n    /// - MUST NOT revert.\\n    ///\\n    /// NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\\n    /// share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\\n\\n    /// @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\\n    /// given current on-chain conditions.\\n    ///\\n    /// - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\\n    /// in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\\n    /// same transaction.\\n    /// - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\\n    /// redemption would be accepted, regardless if the user has enough shares, etc.\\n    /// - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n    /// - MUST NOT revert.\\n    ///\\n    /// NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\\n    /// share price or some other type of condition, meaning the depositor will lose assets by redeeming.\\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\\n}\\n\",\"keccak256\":\"0x81a23c4eb939b72d4de52b9fa805ae86c914310de9865d3110caddff1641b26b\",\"license\":\"MIT\"},\"contracts/interfaces/IFactory.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n// Copyright Fathom 2023\\n\\npragma solidity 0.8.19;\\n\\ninterface IFactory {\\n    function protocolFeeConfig() external view returns (uint16 /*feeBps*/, address /*feeRecipient*/);\\n}\\n\",\"keccak256\":\"0xd79d306c87548778e7fea75591e6ad69d7d50e9f629b3737f9cd8a0f7304e208\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/interfaces/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n// Copyright Fathom 2023\\n\\npragma solidity 0.8.19;\\n\\ninterface IStrategy {\\n    function redeem(uint256 shares, address receiver, address owner) external returns (uint256);\\n\\n    function deposit(uint256 assets, address receiver) external returns (uint256);\\n\\n    function asset() external view returns (address);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function maxDeposit(address receiver) external view returns (uint256);\\n\\n    function totalAssets() external view returns (uint256);\\n\\n    function convertToAssets(uint256 shares) external view returns (uint256);\\n\\n    function convertToShares(uint256 assets) external view returns (uint256);\\n\\n    function previewWithdraw(uint256 assets) external view returns (uint256);\\n\\n    function maxRedeem(address owner) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x172c303c8e39f69a0f72d05b0f2b6cb94187af68b29b4f7dca87a746ad89baa6\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n// Copyright Fathom 2023\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../VaultStructs.sol\\\";\\nimport { IERC4626 } from \\\"./IERC4626.sol\\\";\\n\\ninterface IVault is IERC4626 {\\n    function initialize(\\n        uint256 _profitMaxUnlockTime,\\n        address _asset,\\n        uint8 _decimals,\\n        string calldata _name,\\n        string calldata _symbol,\\n        address _accountant\\n    ) external;\\n\\n    function setAccountant(address newAccountant) external;\\n\\n    function setFees(uint256 totalFees, uint256 totalRefunds, uint256 protocolFees, address protocolFeeRecipient) external;\\n\\n    function setDefaultQueue(address[] calldata newDefaultQueue) external;\\n\\n    function setUseDefaultQueue(bool useDefaultQueue) external;\\n\\n    function setDepositLimit(uint256 depositLimit) external;\\n\\n    function setDepositLimitModule(address newDepositLimitModule) external;\\n\\n    function setWithdrawLimitModule(address newWithdrawLimitModule) external;\\n\\n    function setMinimumTotalIdle(uint256 minimumTotalIdle) external;\\n\\n    function setProfitMaxUnlockTime(uint256 newProfitMaxUnlockTime) external;\\n\\n    function addStrategy(address newStrategy) external;\\n\\n    function revokeStrategy(address strategy) external;\\n\\n    function forceRevokeStrategy(address strategy) external;\\n\\n    function updateMaxDebtForStrategy(address strategy, uint256 newMaxDebt) external;\\n\\n    function shutdownVault() external;\\n\\n    function processReport(address strategy) external returns (uint256, uint256);\\n\\n    function updateDebt(address sender, address strategy, uint256 targetDebt) external returns (uint256);\\n\\n    function buyDebt(address strategy, uint256 amount) external;\\n\\n    function withdraw(uint256 assets, address receiver, address owner, uint256 maxLoss, address[] calldata strategies) external returns (uint256);\\n\\n    function redeem(uint256 shares, address receiver, address owner, uint256 maxLoss, address[] calldata strategies) external returns (uint256);\\n\\n    function deposit(uint256 assets, address receiver) external returns (uint256);\\n\\n    function mint(uint256 shares, address receiver) external returns (uint256);\\n\\n    function permit(address owner, address spender, uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external returns (bool);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transfer(address receiver, uint256 amount) external returns (bool);\\n\\n    function transferFrom(address sender, address receiver, uint256 amount) external returns (bool);\\n\\n    function maxWithdraw(address owner, uint256 maxLoss, address[] calldata strategies) external view returns (uint256);\\n\\n    function maxRedeem(address owner, uint256 maxLoss, address[] calldata strategies) external view returns (uint256);\\n\\n    function unlockedShares() external view returns (uint256);\\n\\n    function pricePerShare() external view returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function balanceOf(address addr) external view returns (uint256);\\n\\n    function fees() external view returns (FeeAssessment memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function asset() external view returns (address);\\n\\n    function totalAssets() external view returns (uint256);\\n\\n    function convertToShares(uint256 assets) external view returns (uint256);\\n\\n    function convertToAssets(uint256 shares) external view returns (uint256);\\n\\n    function previewDeposit(uint256 assets) external view returns (uint256);\\n\\n    function previewWithdraw(uint256 assets) external view returns (uint256);\\n\\n    function previewMint(uint256 shares) external view returns (uint256);\\n\\n    function previewRedeem(uint256 shares) external view returns (uint256);\\n\\n    function maxDeposit(address receiver) external view returns (uint256);\\n\\n    function maxMint(address receiver) external view returns (uint256);\\n\\n    function getDebt(address strategy) external view returns (uint256);\\n\\n    function assessShareOfUnrealisedLosses(address strategy, uint256 assetsNeeded) external view returns (uint256);\\n\\n    function getDefaultQueueLength() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xfc96812e10ab7b398cd8165d60b9ec237950b63fd1f8019eb6ee922eb7b1ee8d\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/interfaces/IVaultEvents.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n// Copyright Fathom 2023\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"../VaultStructs.sol\\\";\\n\\ninterface IVaultEvents {\\n    event StrategyChanged(address indexed strategy, StrategyChangeType changeType);\\n    event StrategyReported(\\n        address indexed strategy,\\n        uint256 gain,\\n        uint256 loss,\\n        uint256 currentDebt,\\n        uint256 protocolFees,\\n        uint256 totalFees,\\n        uint256 totalRefunds\\n    );\\n    event DebtUpdated(address indexed strategy, uint256 currentDebt, uint256 newDebt);\\n    event RoleSet(address indexed account, bytes32 role);\\n    event RoleStatusChanged(bytes32 indexed role, RoleStatusChange status);\\n    event UpdatedRoleManager(address roleManager);\\n\\n    event UpdatedAccountant(address accountant);\\n    event UpdatedFees(uint256 totalFees, uint256 totalRefunds, uint256 protocolFees, address protocolFeeRecipient);\\n    event UpdatedDefaultQueue(address[] newDefaultQueue);\\n    event UpdatedUseDefaultQueue(bool useDefaultQueue);\\n    event UpdatedMaxDebtForStrategy(address indexed sender, address indexed strategy, uint256 newDebt);\\n    event UpdatedDepositLimit(uint256 depositLimit);\\n    event UpdatedMinimumTotalIdle(uint256 minimumTotalIdle);\\n    event UpdatedProfitMaxUnlockTime(uint256 profitMaxUnlockTime);\\n    event DebtPurchased(address indexed strategy, uint256 amount);\\n    event Shutdown();\\n\\n    event UpdatedDepositLimitModule(address depositLimitModule);\\n    event UpdatedWithdrawLimitModule(address withdrawLimitModule);\\n}\\n\",\"keccak256\":\"0x266f8e98986e9385aa4841059ffa9e22fe574c764ad9ba01f066db108bbe8832\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/interfaces/IWithdrawLimitModule.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n// Copyright Fathom 2023\\n\\npragma solidity 0.8.19;\\n\\ninterface IWithdrawLimitModule {\\n    function availableWithdrawLimit(address owner, uint256 maxLoss, address[] calldata strategies) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd7722e31be68b8fda7a7eb07dbf7231b4e74bdcd5e78d101256dd7e52fed4bea\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/packages/VaultPackage.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n// Copyright Fathom 2023\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"../CommonErrors.sol\\\";\\nimport \\\"../VaultStorage.sol\\\";\\nimport \\\"../interfaces/IVault.sol\\\";\\nimport \\\"../interfaces/IVaultEvents.sol\\\";\\nimport \\\"../interfaces/IAccountant.sol\\\";\\nimport \\\"../interfaces/IFactory.sol\\\";\\nimport \\\"../interfaces/IStrategy.sol\\\";\\nimport \\\"../interfaces/IDepositLimitModule.sol\\\";\\nimport \\\"../interfaces/IWithdrawLimitModule.sol\\\";\\n\\n/// @title Fathom Vault\\n/// @notice The Fathom Vault is designed as a non-opinionated system to distribute funds of\\n/// depositors for a specific `asset` into different opportunities (aka Strategies)\\n/// and manage accounting in a robust way.\\ncontract VaultPackage is VaultStorage, IVault, IVaultEvents {\\n    using Math for uint256;\\n\\n    // solhint-disable-next-line function-max-lines\\n    function initialize(\\n        uint256 _profitMaxUnlockTime,\\n        address _asset,\\n        uint8 _decimals,\\n        string calldata _name,\\n        string calldata _symbol,\\n        address _accountant\\n    ) external override onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (initialized == true) {\\n            revert AlreadyInitialized();\\n        }\\n\\n        if (_isContract(msg.sender)) {\\n            factoryAddress = msg.sender;\\n        } else {\\n            factoryAddress = address(0);\\n            customFeeBPS = MAX_FEE_BPS;\\n            customFeeRecipient = msg.sender;\\n        }\\n\\n        // Accountant can be 0 - in that case protocol will manage the fees.\\n        accountant = _accountant;\\n\\n        // Must be less than one year for report cycles\\n        if (_profitMaxUnlockTime > ONE_YEAR) {\\n            revert ProfitUnlockTimeTooLong();\\n        }\\n        profitMaxUnlockTime = _profitMaxUnlockTime;\\n\\n        decimalsValue = _decimals;\\n        if (decimalsValue >= 256) {\\n            revert InvalidAssetDecimals();\\n        }\\n\\n        assetContract = IERC20(_asset);\\n        sharesName = _name;\\n        sharesSymbol = _symbol;\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _grantRole(STRATEGY_MANAGER, msg.sender);\\n        _grantRole(REPORTING_MANAGER, msg.sender);\\n        _grantRole(DEBT_PURCHASER, msg.sender);\\n\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                DOMAIN_TYPE_HASH,\\n                keccak256(bytes(_name)), // \\\"Fathom Vault\\\" in the example\\n                keccak256(bytes(API_VERSION)), // API_VERSION in the example\\n                block.chainid, // Current chain ID\\n                address(this) // Address of the contract\\n            )\\n        );\\n\\n        initialized = true;\\n    }\\n\\n    /// @notice Set the new accountant address.\\n    /// @param newAccountant The new accountant address.\\n    function setAccountant(address newAccountant) external override onlyRole(DEFAULT_ADMIN_ROLE) {\\n        accountant = newAccountant;\\n        emit UpdatedAccountant(newAccountant);\\n    }\\n\\n    /// @notice Set fees and refunds.\\n    function setFees(\\n        uint256 totalFees,\\n        uint256 totalRefunds,\\n        uint256 protocolFees,\\n        address protocolFeeRecipient\\n    ) external override onlyRole(DEFAULT_ADMIN_ROLE) {\\n        customFees.totalFees = totalFees;\\n        customFees.totalRefunds = totalRefunds;\\n        customFees.protocolFees = protocolFees;\\n        customFees.protocolFeeRecipient = protocolFeeRecipient;\\n\\n        emit UpdatedFees(totalFees, totalRefunds, protocolFees, protocolFeeRecipient);\\n    }\\n\\n    /// @notice Set the new default queue array.\\n    /// @dev Will check each strategy to make sure it is active.\\n    /// @param newDefaultQueue The new default queue array.\\n    function setDefaultQueue(address[] calldata newDefaultQueue) external override onlyRole(STRATEGY_MANAGER) {\\n        // Make sure every strategy in the new queue is active.\\n        for (uint256 i = 0; i < newDefaultQueue.length; i++) {\\n            address strategy = newDefaultQueue[i];\\n            if (strategies[strategy].activation == 0) {\\n                revert InactiveStrategy(strategy);\\n            }\\n        }\\n        // Save the new queue.\\n        defaultQueue = newDefaultQueue;\\n        emit UpdatedDefaultQueue(newDefaultQueue);\\n    }\\n\\n    /// @notice Set a new value for `use_default_queue`.\\n    /// @dev If set `True` the default queue will always be\\n    /// used no matter whats passed in.\\n    /// @param _useDefaultQueue new value.\\n    function setUseDefaultQueue(bool _useDefaultQueue) external override onlyRole(STRATEGY_MANAGER) {\\n        useDefaultQueue = _useDefaultQueue;\\n        emit UpdatedUseDefaultQueue(_useDefaultQueue);\\n    }\\n\\n    /// @notice Set the new deposit limit.\\n    /// @dev Can not be changed if a depositLimitModule\\n    /// is set or if shutdown.\\n    /// @param _depositLimit The new deposit limit.\\n    function setDepositLimit(uint256 _depositLimit) external override onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (shutdown == true) {\\n            revert InactiveVault();\\n        }\\n        if (depositLimitModule != address(0)) {\\n            revert UsingModule();\\n        }\\n        depositLimit = _depositLimit;\\n        emit UpdatedDepositLimit(_depositLimit);\\n    }\\n\\n    /// @notice Set a contract to handle the deposit limit.\\n    /// @dev The default `depositLimit` will need to be set to\\n    /// max uint256 since the module will override it.\\n    /// @param _depositLimitModule Address of the module.\\n    function setDepositLimitModule(address _depositLimitModule) external override onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (shutdown == true) {\\n            revert InactiveVault();\\n        }\\n        if (depositLimit != type(uint256).max) {\\n            revert UsingDepositLimit();\\n        }\\n        depositLimitModule = _depositLimitModule;\\n        emit UpdatedDepositLimitModule(_depositLimitModule);\\n    }\\n\\n    /// @notice Set a contract to handle the withdraw limit.\\n    /// @dev This will override the default `maxWithdraw`.\\n    /// @param _withdrawLimitModule Address of the module.\\n    function setWithdrawLimitModule(address _withdrawLimitModule) external override onlyRole(DEFAULT_ADMIN_ROLE) {\\n        withdrawLimitModule = _withdrawLimitModule;\\n        emit UpdatedWithdrawLimitModule(_withdrawLimitModule);\\n    }\\n\\n    /// @notice Set the new minimum total idle.\\n    /// @param _minimumTotalIdle The new minimum total idle.\\n    function setMinimumTotalIdle(uint256 _minimumTotalIdle) external override onlyRole(DEFAULT_ADMIN_ROLE) {\\n        minimumTotalIdle = _minimumTotalIdle;\\n        emit UpdatedMinimumTotalIdle(_minimumTotalIdle);\\n    }\\n\\n    /// @notice Set the new profit max unlock time.\\n    /// @dev The time is denominated in seconds and must be less than 1 year.\\n    ///  We only need to update locking period if setting to 0,\\n    ///  since the current period will use the old rate and on the next\\n    ///  report it will be reset with the new unlocking time.\\n    ///  Setting to 0 will cause any currently locked profit to instantly\\n    /// unlock and an immediate increase in the vaults Price Per Share.\\n    /// @param _newProfitMaxUnlockTime The new profit max unlock time.\\n    function setProfitMaxUnlockTime(uint256 _newProfitMaxUnlockTime) external override onlyRole(DEFAULT_ADMIN_ROLE) {\\n        // Must be less than one year for report cycles\\n        if (_newProfitMaxUnlockTime > ONE_YEAR) {\\n            revert ProfitUnlockTimeTooLong();\\n        }\\n\\n        // If setting to 0 we need to reset any locked values.\\n        if (_newProfitMaxUnlockTime == 0) {\\n            // Burn any shares the vault still has.\\n            _burnShares(_balanceOf[address(this)], address(this));\\n            // Reset unlocking variables to 0.\\n            profitUnlockingRate = 0;\\n            fullProfitUnlockDate = 0;\\n        }\\n        profitMaxUnlockTime = _newProfitMaxUnlockTime;\\n        emit UpdatedProfitMaxUnlockTime(_newProfitMaxUnlockTime);\\n    }\\n\\n    /// @notice Add a new strategy.\\n    /// @param newStrategy The new strategy to add.\\n    function addStrategy(address newStrategy) external override onlyRole(STRATEGY_MANAGER) {\\n        if (newStrategy == address(0) || newStrategy == address(this)) {\\n            revert ZeroAddress();\\n        }\\n        address strategyAsset = IStrategy(newStrategy).asset();\\n        if (strategyAsset != address(assetContract)) {\\n            revert InvalidAsset(strategyAsset);\\n        }\\n        if (strategies[newStrategy].activation != 0) {\\n            revert StrategyAlreadyActive();\\n        }\\n\\n        // Add the new strategy to the mapping.\\n        strategies[newStrategy] = StrategyParams({ activation: block.timestamp, lastReport: block.timestamp, currentDebt: 0, maxDebt: 0 });\\n\\n        // If the default queue has space, add the strategy.\\n        uint256 defaultQueueLength = defaultQueue.length;\\n        if (defaultQueueLength < MAX_QUEUE) {\\n            defaultQueue.push(newStrategy);\\n        }\\n\\n        emit StrategyChanged(newStrategy, StrategyChangeType.ADDED);\\n    }\\n\\n    /// @notice Revoke a strategy.\\n    /// @param strategy The strategy to revoke.\\n    function revokeStrategy(address strategy) external override onlyRole(STRATEGY_MANAGER) {\\n        _revokeStrategy(strategy, false);\\n    }\\n\\n    /// @notice Force revoke a strategy.\\n    /// @dev The vault will remove the strategy and write off any debt left\\n    /// in it as a loss. This function is a dangerous function as it can force a\\n    /// strategy to take a loss. All possible assets should be removed from the\\n    /// strategy first via update_debt. If a strategy is removed erroneously it\\n    /// can be re-added and the loss will be credited as profit. Fees will apply.\\n    /// @param strategy The strategy to force revoke.\\n    function forceRevokeStrategy(address strategy) external override onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _revokeStrategy(strategy, true);\\n    }\\n\\n    /// @notice Update the max debt for a strategy.\\n    /// @param strategy The strategy to update the max debt for.\\n    /// @param newMaxDebt The new max debt for the strategy.\\n    function updateMaxDebtForStrategy(address strategy, uint256 newMaxDebt) external override onlyRole(STRATEGY_MANAGER) {\\n        if (strategies[strategy].activation == 0) {\\n            revert InactiveStrategy(strategy);\\n        }\\n        strategies[strategy].maxDebt = newMaxDebt;\\n        emit UpdatedMaxDebtForStrategy(msg.sender, strategy, newMaxDebt);\\n    }\\n\\n    /// @notice Shutdown the vault.\\n    function shutdownVault() external override onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (shutdown == true) {\\n            revert InactiveVault();\\n        }\\n\\n        // Shutdown the vault.\\n        shutdown = true;\\n\\n        // Set deposit limit to 0.\\n        if (depositLimitModule != address(0)) {\\n            depositLimitModule = address(0);\\n            emit UpdatedDepositLimitModule(address(0));\\n        }\\n\\n        depositLimit = 0;\\n        emit UpdatedDepositLimit(0);\\n\\n        _grantRole(STRATEGY_MANAGER, msg.sender);\\n        emit Shutdown();\\n    }\\n\\n    /// @notice Process the report of a strategy.\\n    /// @dev Processing a report means comparing the debt that the strategy has taken\\n    /// with the current amount of funds it is reporting. If the strategy owes\\n    /// less than it currently has, it means it has had a profit, else (assets < debt)\\n    /// it has had a loss.\\n    /// Different strategies might choose different reporting strategies: pessimistic,\\n    /// only realised P&L, ... The best way to report depends on the strategy.\\n    /// The profit will be distributed following a smooth curve over the vaults\\n    /// profitMaxUnlockTime seconds. Losses will be taken immediately, first from the\\n    /// profit buffer (avoiding an impact in pps), then will reduce pps.\\n    /// Any applicable fees are charged and distributed during the report as well\\n    /// to the specified recipients.\\n    /// @param strategy The strategy to process the report for.\\n    /// @return The gain and loss of the strategy.\\n    function processReport(address strategy) external override onlyRole(REPORTING_MANAGER) nonReentrant returns (uint256, uint256) {\\n        // Make sure we have a valid strategy.\\n        if (strategies[strategy].activation == 0) {\\n            revert InactiveStrategy(strategy);\\n        }\\n\\n        // Burn shares that have been unlocked since the last update\\n        _burnUnlockedShares();\\n\\n        (uint256 gain, uint256 loss) = _assessProfitAndLoss(strategy);\\n\\n        FeeAssessment memory assessmentFees = _assessFees(strategy, gain, loss);\\n\\n        ShareManagement memory shares = _calculateShareManagement(gain, loss, assessmentFees.totalFees, assessmentFees.protocolFees, strategy);\\n\\n        (uint256 previouslyLockedShares, uint256 newlyLockedShares) = _handleShareBurnsAndIssues(shares, assessmentFees, gain);\\n\\n        _manageUnlockingOfShares(previouslyLockedShares, newlyLockedShares);\\n\\n        // Record the report of profit timestamp.\\n        strategies[strategy].lastReport = block.timestamp;\\n\\n        // We have to recalculate the fees paid for cases with an overall loss.\\n        emit StrategyReported(\\n            strategy,\\n            gain,\\n            loss,\\n            strategies[strategy].currentDebt,\\n            _convertToAssets(shares.protocolFeesShares, Rounding.ROUND_DOWN),\\n            _convertToAssets(shares.protocolFeesShares + shares.accountantFeesShares, Rounding.ROUND_DOWN),\\n            assessmentFees.totalRefunds\\n        );\\n\\n        return (gain, loss);\\n    }\\n\\n    /// @notice Update the debt for a strategy.\\n    /// @param strategy The strategy to update the debt for.\\n    /// @param targetDebt The target debt for the strategy.\\n    /// @return The amount of debt added or removed.\\n    // solhint-disable-next-line function-max-lines,code-complexity\\n    function updateDebt(\\n        address sender,\\n        address strategy,\\n        uint256 targetDebt\\n    ) external override onlyRole(STRATEGY_MANAGER) nonReentrant returns (uint256) {\\n        if (strategies[strategy].currentDebt != targetDebt && totalIdleAmount <= minimumTotalIdle) {\\n            revert InsufficientFunds();\\n        }\\n\\n        // How much we want the strategy to have.\\n        uint256 newDebt = targetDebt;\\n        // How much the strategy currently has.\\n        uint256 currentDebt = strategies[strategy].currentDebt;\\n\\n        // If the vault is shutdown we can only pull funds.\\n        if (shutdown == true) {\\n            newDebt = 0;\\n        }\\n\\n        if (newDebt == currentDebt) {\\n            revert DebtDidntChange();\\n        }\\n\\n        if (currentDebt > newDebt) {\\n            // Reduce debt\\n            uint256 assetsToWithdraw = currentDebt - newDebt;\\n\\n            // Respect minimum total idle in vault\\n            if (totalIdleAmount + assetsToWithdraw < minimumTotalIdle) {\\n                assetsToWithdraw = minimumTotalIdle - totalIdleAmount;\\n                // Cant withdraw more than the strategy has.\\n                if (assetsToWithdraw > currentDebt) {\\n                    assetsToWithdraw = currentDebt;\\n                }\\n            }\\n\\n            // Check how much we are able to withdraw.\\n            // Use maxRedeem and convert since we use redeem.\\n            uint256 withdrawable = IStrategy(strategy).convertToAssets(IStrategy(strategy).maxRedeem(sender));\\n\\n            if (withdrawable == 0) {\\n                revert ZeroValue();\\n            }\\n\\n            // If insufficient withdrawable, withdraw what we can.\\n            if (withdrawable < assetsToWithdraw) {\\n                assetsToWithdraw = withdrawable;\\n            }\\n\\n            // If there are unrealised losses we don't let the vault reduce its debt until there is a new report\\n            uint256 unrealisedLossesShare = _assessShareOfUnrealisedLosses(strategy, assetsToWithdraw);\\n            if (unrealisedLossesShare != 0) {\\n                revert StrategyHasUnrealisedLosses(unrealisedLossesShare);\\n            }\\n\\n            // Always check the actual amount withdrawn.\\n            uint256 preBalance = assetContract.balanceOf(sender);\\n            _withdrawFromStrategy(strategy, assetsToWithdraw);\\n            uint256 postBalance = assetContract.balanceOf(sender);\\n\\n            // making sure we are changing idle according to the real result no matter what.\\n            // We pull funds with {redeem} so there can be losses or rounding differences.\\n            uint256 withdrawn = Math.min(postBalance - preBalance, currentDebt);\\n\\n            // If we got too much make sure not to increase PPS.\\n            if (withdrawn > assetsToWithdraw) {\\n                assetsToWithdraw = withdrawn;\\n            }\\n\\n            // Update storage.\\n            totalIdleAmount += withdrawn; // actual amount we got.\\n            // Amount we tried to withdraw in case of losses\\n            totalDebtAmount -= assetsToWithdraw;\\n\\n            _setTotalIdleAmount(totalIdleAmount);\\n            _setTotalDebtAmount(totalDebtAmount);\\n\\n            newDebt = currentDebt - assetsToWithdraw;\\n        } else {\\n            // We are increasing the strategies debt\\n\\n            // Revert if target_debt cannot be achieved due to configured max_debt for given strategy\\n            if (newDebt > strategies[strategy].maxDebt) {\\n                revert DebtHigherThanMaxDebt(newDebt, strategies[strategy].maxDebt);\\n            }\\n\\n            // Vault is increasing debt with the strategy by sending more funds.\\n            uint256 currentMaxDeposit = IStrategy(strategy).maxDeposit(sender);\\n            if (currentMaxDeposit == 0) {\\n                revert ZeroValue();\\n            }\\n\\n            // Deposit the difference between desired and current.\\n            uint256 assetsToDeposit = newDebt - currentDebt;\\n            if (assetsToDeposit > currentMaxDeposit) {\\n                // Deposit as much as possible.\\n                assetsToDeposit = currentMaxDeposit;\\n            }\\n\\n            uint256 availableIdle = totalIdleAmount - minimumTotalIdle;\\n\\n            // If insufficient funds to deposit, transfer only what is free.\\n            if (assetsToDeposit > availableIdle) {\\n                assetsToDeposit = availableIdle;\\n            }\\n\\n            // Can't Deposit 0.\\n            if (assetsToDeposit > 0) {\\n                // Approve the strategy to pull only what we are giving it.\\n                _erc20SafeApprove(address(assetContract), strategy, assetsToDeposit);\\n\\n                // Always update based on actual amounts deposited.\\n                uint256 preBalance = assetContract.balanceOf(address(this));\\n                _depositToStrategy(strategy, assetsToDeposit);\\n                uint256 postBalance = assetContract.balanceOf(address(this));\\n\\n                // Make sure our approval is always back to 0.\\n                _erc20SafeApprove(address(assetContract), strategy, 0);\\n\\n                // Making sure we are changing according to the real result no\\n                // matter what. This will spend more gas but makes it more robust.\\n                assetsToDeposit = preBalance - postBalance;\\n\\n                // Update storage.\\n                totalIdleAmount -= assetsToDeposit;\\n                totalDebtAmount += assetsToDeposit;\\n\\n                _setTotalIdleAmount(totalIdleAmount);\\n                _setTotalDebtAmount(totalDebtAmount);\\n\\n                newDebt = currentDebt + assetsToDeposit;\\n            }\\n        }\\n\\n        // Commit memory to storage.\\n        strategies[strategy].currentDebt = newDebt;\\n\\n        emit DebtUpdated(strategy, currentDebt, newDebt);\\n        return newDebt;\\n    }\\n\\n    /// @notice Used for governance to buy bad debt from the vault.\\n    /// @dev This should only ever be used in an emergency in place\\n    /// of force revoking a strategy in order to not report a loss.\\n    /// It allows the DEBT_PURCHASER role to buy the strategies debt\\n    /// for an equal amount of `asset`.\\n    /// @param strategy The strategy to buy the debt for\\n    /// @param amount The amount of debt to buy from the vault.\\n    function buyDebt(address strategy, uint256 amount) external override onlyRole(DEBT_PURCHASER) nonReentrant {\\n        if (strategies[strategy].activation == 0) {\\n            revert InactiveStrategy(strategy);\\n        }\\n\\n        // Cache the current debt.\\n        uint256 currentDebt = strategies[strategy].currentDebt;\\n\\n        if (currentDebt == 0 || amount == 0) {\\n            revert ZeroValue();\\n        }\\n\\n        if (amount > currentDebt) {\\n            amount = currentDebt;\\n        }\\n\\n        // We get the proportion of the debt that is being bought and\\n        // transfer the equivalent shares. We assume this is being used\\n        // due to strategy issues so won't rely on its conversion rates.\\n        uint256 shares = (IERC20(strategy).balanceOf(address(this)) * amount) / currentDebt;\\n\\n        if (shares == 0) {\\n            revert ZeroValue();\\n        }\\n\\n        _erc20SafeTransferFrom(address(this), msg.sender, address(this), amount);\\n\\n        // Lower strategy debt\\n        strategies[strategy].currentDebt -= amount;\\n        // lower total debt\\n        totalDebtAmount -= amount;\\n        // Increase total idle\\n        totalIdleAmount += amount;\\n\\n        // Log debt change\\n        emit DebtUpdated(strategy, currentDebt, currentDebt - amount);\\n\\n        // Transfer the strategies shares out\\n        _erc20SafeTransfer(strategy, msg.sender, shares);\\n\\n        // Log the debt purchase\\n        emit DebtPurchased(strategy, amount);\\n    }\\n\\n    /// @notice Withdraw an amount of asset to `receiver` burning `owner`s shares.\\n    /// @dev The default behavior is to not allow any loss.\\n    /// @param assets The amount of asset to withdraw.\\n    /// @param receiver The address to receive the assets.\\n    /// @param owner The address who's shares are being burnt.\\n    /// @param maxLoss Optional amount of acceptable loss in Basis Points.\\n    /// @param _strategies Optional array of strategies to withdraw from.\\n    /// @return The amount of shares actually burnt.\\n    function withdraw(\\n        uint256 assets,\\n        address receiver,\\n        address owner,\\n        uint256 maxLoss,\\n        address[] calldata _strategies\\n    ) external override nonReentrant returns (uint256) {\\n        uint256 shares = _convertToShares(assets, Rounding.ROUND_UP);\\n        _redeem(msg.sender, receiver, owner, assets, shares, maxLoss, _strategies);\\n        return shares;\\n    }\\n\\n    /// @notice Redeems an amount of shares of `owners` shares sending funds to `receiver`.\\n    /// @dev The default behavior is to allow losses to be realized.\\n    /// @param shares The amount of shares to burn.\\n    /// @param receiver The address to receive the assets.\\n    /// @param owner The address who's shares are being burnt.\\n    /// @param maxLoss Optional amount of acceptable loss in Basis Points.\\n    /// @param _strategies Optional array of strategies to withdraw from.\\n    /// @return The amount of assets actually withdrawn.\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address owner,\\n        uint256 maxLoss,\\n        address[] calldata _strategies\\n    ) external override nonReentrant returns (uint256) {\\n        uint256 assets = _convertToAssets(shares, Rounding.ROUND_DOWN);\\n        // Always return the actual amount of assets withdrawn.\\n        return _redeem(msg.sender, receiver, owner, assets, shares, maxLoss, _strategies);\\n    }\\n\\n    /// @notice Deposit assets into the vault.\\n    /// @param assets The amount of assets to deposit.\\n    /// @param receiver The address to receive the shares.\\n    /// @return The amount of shares minted.\\n    function deposit(uint256 assets, address receiver) external override nonReentrant returns (uint256) {\\n        return _deposit(msg.sender, receiver, assets);\\n    }\\n\\n    /// @notice Mint shares for the receiver.\\n    /// @param shares The amount of shares to mint.\\n    /// @param receiver The address to receive the shares.\\n    /// @return The amount of assets deposited.\\n    function mint(uint256 shares, address receiver) external override nonReentrant returns (uint256) {\\n        return _mint(msg.sender, receiver, shares);\\n    }\\n\\n    /// @notice Approve an address to spend the vault's shares.\\n    /// @param owner The address to approve.\\n    /// @param spender The address to approve.\\n    /// @param amount The amount of shares to approve.\\n    /// @param deadline The deadline for the permit.\\n    /// @param v The v component of the signature.\\n    /// @param r The r component of the signature.\\n    /// @param s The s component of the signature.\\n    /// @return True if the approval was successful.\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 amount,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external override returns (bool) {\\n        if (owner == address(0)) {\\n            revert ZeroAddress();\\n        }\\n        if (deadline < block.timestamp) {\\n            revert ERC20PermitExpired();\\n        }\\n        uint256 nonce = nonces[owner];\\n\\n        bytes32 structHash = keccak256(abi.encode(PERMIT_TYPE_HASH, owner, spender, amount, nonce, deadline));\\n\\n        bytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", DOMAIN_SEPARATOR, structHash));\\n\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        if (recoveredAddress == address(0) || recoveredAddress != owner) {\\n            revert ERC20PermitInvalidSignature(recoveredAddress);\\n        }\\n\\n        // Set the allowance to the specified amount\\n        _approve(owner, spender, amount);\\n\\n        // Increase nonce for the owner\\n        nonces[owner]++;\\n\\n        emit Approval(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /// @notice Approve an address to spend the vault's shares.\\n    /// @param spender The address to approve.\\n    /// @param amount The amount of shares to approve.\\n    /// @return True if the approval was successful.\\n    function approve(address spender, uint256 amount) external override returns (bool) {\\n        return _approve(msg.sender, spender, amount);\\n    }\\n\\n    /// @notice Transfer shares to a receiver.\\n    /// @param receiver The address to transfer shares to.\\n    /// @param amount The amount of shares to transfer.\\n    /// @return True if the transfer was successful.\\n    function transfer(address receiver, uint256 amount) external override returns (bool) {\\n        if (receiver == address(this) || receiver == address(0)) {\\n            revert ZeroAddress();\\n        }\\n        _transfer(msg.sender, receiver, amount);\\n        return true;\\n    }\\n\\n    /// @notice Transfer shares from a sender to a receiver.\\n    /// @param sender The address to transfer shares from.\\n    /// @param receiver The address to transfer shares to.\\n    /// @param amount The amount of shares to transfer.\\n    /// @return True if the transfer was successful.\\n    function transferFrom(address sender, address receiver, uint256 amount) external override returns (bool) {\\n        if (receiver == address(this) || receiver == address(0)) {\\n            revert ZeroAddress();\\n        }\\n        _spendAllowance(sender, msg.sender, amount);\\n        _transfer(sender, receiver, amount);\\n        return true;\\n    }\\n\\n    /// @notice Get the maximum amount of assets that can be withdrawn.\\n    /// @dev Complies to normal 4626 interface and takes custom params.\\n    /// @param owner The address that owns the shares.\\n    /// @param maxLoss Custom maxLoss if any.\\n    /// @param _strategies Custom strategies queue if any.\\n    /// @return The maximum amount of assets that can be withdrawn.\\n    function maxWithdraw(address owner, uint256 maxLoss, address[] calldata _strategies) external view override returns (uint256) {\\n        return _maxWithdraw(owner, maxLoss, _strategies);\\n    }\\n\\n    /// @notice Get the maximum amount of shares that can be redeemed.\\n    /// @dev Complies to normal 4626 interface and takes custom params.\\n    /// @param owner The address that owns the shares.\\n    /// @param maxLoss Custom maxLoss if any.\\n    /// @param _strategies Custom strategies queue if any.\\n    /// @return The maximum amount of shares that can be redeemed.\\n    function maxRedeem(address owner, uint256 maxLoss, address[] calldata _strategies) external view override returns (uint256) {\\n        uint256 maxWithdrawAmount = _maxWithdraw(owner, maxLoss, _strategies);\\n        uint256 sharesEquivalent = _convertToShares(maxWithdrawAmount, Rounding.ROUND_UP);\\n        return Math.min(sharesEquivalent, _balanceOf[owner]);\\n    }\\n\\n    /// @notice Get the amount of shares that have been unlocked.\\n    /// @return The amount of shares that are have been unlocked.\\n    function unlockedShares() external view override returns (uint256) {\\n        return _unlockedShares();\\n    }\\n\\n    /// @notice Get the price per share (pps) of the vault.\\n    /// @dev This value offers limited precision. Integrations that require\\n    /// exact precision should use convertToAssets or convertToShares instead.\\n    /// @return The price per share.\\n    function pricePerShare() external view override returns (uint256) {\\n        return _convertToAssets(10 ** decimalsValue, Rounding.ROUND_DOWN);\\n    }\\n\\n    /// @notice ERC20 - name of the vault's token\\n    function name() external view override returns (string memory) {\\n        return sharesName;\\n    }\\n\\n    /// @notice ERC20 - symbol of the vault's token\\n    function symbol() external view override returns (string memory) {\\n        return sharesSymbol;\\n    }\\n\\n    /// @notice Get the total supply of shares.\\n    /// @return The total supply of shares.\\n    function totalSupply() external view override returns (uint256) {\\n        return _totalSupply();\\n    }\\n\\n    /// @notice Get the address of the asset.\\n    /// @return The address of the asset.\\n    function asset() external view override returns (address) {\\n        return address(assetContract);\\n    }\\n\\n    /// @notice Get the total assets held by the vault.\\n    /// @return The total assets held by the vault.\\n    function totalAssets() external view override returns (uint256) {\\n        return _totalAssets();\\n    }\\n\\n    /// @notice Convert an amount of assets to shares.\\n    /// @param assets The amount of assets to convert.\\n    /// @return The amount of shares.\\n    function convertToShares(uint256 assets) external view override returns (uint256) {\\n        return _convertToShares(assets, Rounding.ROUND_DOWN);\\n    }\\n\\n    /// @notice Convert an amount of shares to assets.\\n    /// @param shares The amount of shares to convert.\\n    /// @return The amount of assets.\\n    function convertToAssets(uint256 shares) external view override returns (uint256) {\\n        return _convertToAssets(shares, Rounding.ROUND_DOWN);\\n    }\\n\\n    /// @notice Preview the amount of shares that would be minted for a deposit.\\n    /// @param assets The amount of assets to deposit.\\n    /// @return The amount of shares that would be minted.\\n    function previewDeposit(uint256 assets) external view override returns (uint256) {\\n        return _convertToShares(assets, Rounding.ROUND_DOWN);\\n    }\\n\\n    /// @notice Preview the amount of shares that would be redeemed for a withdraw.\\n    /// @param assets The amount of assets to withdraw.\\n    /// @return The amount of shares that would be redeemed.\\n    function previewWithdraw(uint256 assets) external view override returns (uint256) {\\n        return _convertToShares(assets, Rounding.ROUND_UP);\\n    }\\n\\n    /// @notice Preview the amount of assets that would be deposited for a mint.\\n    /// @param shares The amount of shares to mint.\\n    /// @return The amount of assets that would be deposited.\\n    function previewMint(uint256 shares) external view override returns (uint256) {\\n        return _convertToAssets(shares, Rounding.ROUND_UP);\\n    }\\n\\n    /// @notice Preview the amount of assets that would be withdrawn for a redeem.\\n    /// @param shares The amount of shares to redeem.\\n    /// @return The amount of assets that would be withdrawn.\\n    function previewRedeem(uint256 shares) external view override returns (uint256) {\\n        return _convertToAssets(shares, Rounding.ROUND_DOWN);\\n    }\\n\\n    /// @notice Get the maximum amount of assets that can be deposited.\\n    /// @param receiver The address that will receive the shares.\\n    /// @return The maximum amount of assets that can be deposited.\\n    function maxDeposit(address receiver) external view override returns (uint256) {\\n        return _maxDeposit(receiver);\\n    }\\n\\n    /// @notice Get the maximum amount of shares that can be minted.\\n    /// @param receiver The address that will receive the shares.\\n    /// @return The maximum amount of shares that can be minted.\\n    function maxMint(address receiver) external view override returns (uint256) {\\n        uint256 maxDepositAmount = _maxDeposit(receiver);\\n        return _convertToShares(maxDepositAmount, Rounding.ROUND_DOWN);\\n    }\\n\\n    /// @notice Assess the share of unrealised losses for a strategy.\\n    /// @param strategy The strategy to assess the share of unrealised losses for.\\n    /// @param assetsNeeded The amount of assets needed by the strategy.\\n    function assessShareOfUnrealisedLosses(address strategy, uint256 assetsNeeded) external view override returns (uint256) {\\n        // Assuming strategies mapping and _assessShareOfUnrealisedLosses are defined\\n        uint256 strategyCurrentDebt = strategies[strategy].currentDebt;\\n        if (strategyCurrentDebt < assetsNeeded) {\\n            revert StrategyDebtIsLessThanAssetsNeeded(strategyCurrentDebt);\\n        }\\n        return _assessShareOfUnrealisedLosses(strategy, assetsNeeded);\\n    }\\n\\n    /// @notice Get default strategy queue length.\\n    function getDefaultQueueLength() external view override returns (uint256 length) {\\n        return defaultQueue.length;\\n    }\\n\\n    /// @notice Get the number of decimals of the asset/share.\\n    /// @return The number of decimals of the asset/share.\\n    function decimals() external view override returns (uint8) {\\n        return decimalsValue;\\n    }\\n\\n    /// @notice Get the vault's fees.\\n    /// @return The vault's fees.\\n    function fees() external view override returns (FeeAssessment memory) {\\n        return customFees;\\n    }\\n\\n    /// @notice Get debt for a strategy.\\n    /// @param strategy The strategy to withdraw from.\\n    function getDebt(address strategy) external view override returns (uint256) {\\n        return strategies[strategy].currentDebt;\\n    }\\n\\n    /// @notice Get the allowance for a spender.\\n    /// @param owner The address that owns the shares.\\n    /// @param spender The address that is allowed to spend the shares.\\n    function allowance(address owner, address spender) public view override returns (uint256) {\\n        return _allowance[owner][spender];\\n    }\\n\\n    /// @notice Get the balance of a user.\\n    /// @param addr The address to get the balance of.\\n    /// @return The balance of the user.\\n    function balanceOf(address addr) public view override returns (uint256) {\\n        if (addr == address(this)) {\\n            return _balanceOf[addr] - _unlockedShares();\\n        }\\n        return _balanceOf[addr];\\n    }\\n\\n    /// @notice Deposit assets into the strategy.\\n    function _depositToStrategy(address strategy, uint256 assetsToDeposit) internal {\\n        IStrategy(strategy).deposit(assetsToDeposit, address(this));\\n    }\\n\\n    /// @notice Set the total debt.\\n    function _setTotalDebtAmount(uint256 _totalDebtAmount) internal {\\n        totalDebtAmount = _totalDebtAmount;\\n    }\\n\\n    /// @notice Set the total idle.\\n    function _setTotalIdleAmount(uint256 _totalIdleAmount) internal {\\n        totalIdleAmount = _totalIdleAmount;\\n    }\\n\\n    /// @notice Set the minimum total idle.\\n    function _setMinimumTotalIdle(uint256 _minimumTotalIdle) internal {\\n        minimumTotalIdle = _minimumTotalIdle;\\n    }\\n\\n    /// @notice Calculate and distribute any fees and refunds from the strategy's performance.\\n    function _assessFees(address strategy, uint256 gain, uint256 loss) internal returns (FeeAssessment memory) {\\n        // If accountant is not set, fees and refunds remain unchanged.\\n        if (accountant != address(0)) {\\n            FeeAssessment memory fees_ = FeeAssessment(0, 0, 0, address(0));\\n\\n            (fees_.totalFees, fees_.totalRefunds) = IAccountant(accountant).report(strategy, gain, loss);\\n\\n            // Protocol fees will be 0 if accountant fees are 0.\\n            if (fees_.totalFees > 0) {\\n                uint16 protocolFeeBps;\\n                // Get the config for this vault.\\n                if (factoryAddress == address(0)) {\\n                    // If the factory is not set, use the default config.\\n                    protocolFeeBps = customFeeBPS;\\n                    fees_.protocolFeeRecipient = customFeeRecipient;\\n                } else {\\n                    // If the factory is set, use the config for this vault.\\n                    (protocolFeeBps, fees_.protocolFeeRecipient) = IFactory(factoryAddress).protocolFeeConfig();\\n                }\\n\\n                if (protocolFeeBps > 0) {\\n                    if (protocolFeeBps > MAX_BPS) {\\n                        revert FeeExceedsMax();\\n                    }\\n                    // Protocol fees are a percent of the fees the accountant is charging.\\n                    fees_.protocolFees = (fees_.totalFees * uint256(protocolFeeBps)) / MAX_BPS;\\n                }\\n            }\\n            return fees_;\\n        } else {\\n            return customFees;\\n        }\\n    }\\n\\n    /// @notice Burns shares that have been unlocked since last update.\\n    /// In case the full unlocking period has passed, it stops the unlocking.\\n    function _burnUnlockedShares() internal {\\n        // Get the amount of shares that have unlocked\\n        uint256 currUnlockedShares = _unlockedShares();\\n        // IF 0 there's nothing to do.\\n        if (currUnlockedShares == 0) return;\\n\\n        // Only do an SSTORE if necessary\\n        if (fullProfitUnlockDate > block.timestamp) {\\n            lastProfitUpdate = block.timestamp;\\n        }\\n\\n        // Burn the shares unlocked.\\n        _burnShares(currUnlockedShares, address(this));\\n    }\\n\\n    /// @notice Used only to approve tokens that are not the type managed by this Vault.\\n    /// Used to handle non-compliant tokens like USDT\\n    function _erc20SafeApprove(address token, address spender, uint256 amount) internal {\\n        if (token == address(0) || spender == address(0)) {\\n            revert ZeroAddress();\\n        }\\n        if (!IERC20(token).approve(spender, amount)) {\\n            revert ERC20ApprovalFailed();\\n        }\\n    }\\n\\n    /// @notice Calculate share management based on gains, losses, and fees.\\n    function _calculateShareManagement(\\n        uint256 gain,\\n        uint256 loss,\\n        uint256 totalFees,\\n        uint256 protocolFees,\\n        address strategy\\n    ) internal returns (ShareManagement memory) {\\n        // `shares_to_burn` is derived from amounts that would reduce the vaults PPS.\\n        // NOTE: this needs to be done before any pps changes\\n        ShareManagement memory shares;\\n\\n        uint256 currentDebt = strategies[strategy].currentDebt;\\n\\n        // Record any reported gains.\\n        if (gain > 0) {\\n            // NOTE: this will increase totalAssets\\n            _setDebt(strategy, currentDebt + gain);\\n            totalDebtAmount += gain;\\n        }\\n\\n        // Strategy is reporting a loss\\n        if (loss > 0) {\\n            _setDebt(strategy, currentDebt - loss);\\n            totalDebtAmount -= loss;\\n        }\\n\\n        // Only need to burn shares if there is a loss or fees.\\n        if (loss + totalFees > 0) {\\n            // The amount of shares we will want to burn to offset losses and fees.\\n            shares.sharesToBurn += _convertToShares(loss + totalFees, Rounding.ROUND_UP);\\n\\n            // Vault calculates the amount of shares to mint as fees before changing totalAssets / totalSupply.\\n            if (totalFees > 0) {\\n                // Accountant fees are total fees - protocol fees.\\n                shares.accountantFeesShares = _convertToShares(totalFees - protocolFees, Rounding.ROUND_DOWN);\\n                if (protocolFees > 0) {\\n                    uint256 numerator = protocolFees * gain;\\n                    shares.protocolFeesShares = _convertToShares(numerator / 100, Rounding.ROUND_DOWN);\\n                }\\n            }\\n        }\\n\\n        return shares;\\n    }\\n\\n    /// @notice Handle the burning and issuing of shares based on the strategy's report.\\n    // solhint-disable-next-line function-max-lines\\n    function _handleShareBurnsAndIssues(\\n        ShareManagement memory shares,\\n        FeeAssessment memory _fees,\\n        uint256 gain\\n    ) internal returns (uint256 previouslyLockedShares, uint256 newlyLockedShares) {\\n        // Shares to lock is any amounts that would otherwise increase the vaults PPS.\\n        uint256 _newlyLockedShares;\\n        if (_fees.totalRefunds > 0) {\\n            // Make sure we have enough approval and enough asset to pull.\\n            _fees.totalRefunds = Math.min(_fees.totalRefunds, Math.min(balanceOf(accountant), allowance(accountant, address(this))));\\n            // Transfer the refunded amount of asset to the vault.\\n            _erc20SafeTransferFrom(address(assetContract), accountant, address(this), _fees.totalRefunds);\\n            // Update storage to increase total assets.\\n            totalIdleAmount += _fees.totalRefunds;\\n        }\\n\\n        // Mint anything we are locking to the vault.\\n        if (gain + _fees.totalRefunds > 0 && profitMaxUnlockTime != 0) {\\n            _newlyLockedShares = _issueSharesForAmount(gain + _fees.totalRefunds, address(this));\\n        }\\n\\n        // NOTE: should be precise (no new unlocked shares due to above's burn of shares)\\n        // newlyLockedShares have already been minted / transferred to the vault, so they need to be subtracted\\n        // no risk of underflow because they have just been minted.\\n        uint256 _previouslyLockedShares = _balanceOf[address(this)] - _newlyLockedShares;\\n\\n        // Now that pps has updated, we can burn the shares we intended to burn as a result of losses/fees.\\n        // NOTE: If a value reduction (losses / fees) has occurred, prioritize burning locked profit to avoid\\n        // negative impact on price per share. Price per share is reduced only if losses exceed locked value.\\n        if (shares.sharesToBurn > 0) {\\n            // Cant burn more than the vault owns.\\n            shares.sharesToBurn = Math.min(shares.sharesToBurn, _previouslyLockedShares + _newlyLockedShares);\\n            _burnShares(shares.sharesToBurn, address(this));\\n\\n            // We burn first the newly locked shares, then the previously locked shares.\\n            uint256 sharesNotToLock = Math.min(shares.sharesToBurn, _newlyLockedShares);\\n            // Reduce the amounts to lock by how much we burned\\n            _newlyLockedShares -= sharesNotToLock;\\n            _previouslyLockedShares -= (shares.sharesToBurn - sharesNotToLock);\\n        }\\n\\n        // Issue shares for fees that were calculated above if applicable.\\n        if (shares.accountantFeesShares > 0) {\\n            _issueShares(shares.accountantFeesShares, accountant);\\n        }\\n\\n        if (shares.protocolFeesShares > 0) {\\n            _issueShares(shares.protocolFeesShares, _fees.protocolFeeRecipient);\\n        }\\n\\n        return (_previouslyLockedShares, _newlyLockedShares);\\n    }\\n\\n    /// @notice Manage the unlocking of shares over time based on the vault's configuration.\\n    function _manageUnlockingOfShares(uint256 previouslyLockedShares, uint256 newlyLockedShares) internal {\\n        // Update unlocking rate and time to fully unlocked.\\n        uint256 totalLockedShares = previouslyLockedShares + newlyLockedShares;\\n        if (totalLockedShares > 0) {\\n            uint256 previouslyLockedTime = 0;\\n            // Check if we need to account for shares still unlocking.\\n            if (fullProfitUnlockDate > block.timestamp) {\\n                // There will only be previously locked shares if time remains.\\n                // We calculate this here since it will not occur every time we lock shares.\\n                previouslyLockedTime = previouslyLockedShares * (fullProfitUnlockDate - block.timestamp);\\n            }\\n\\n            // newProfitLockingPeriod is a weighted average between the remaining time of the previously locked shares and the profitMaxUnlockTime\\n            uint256 newProfitLockingPeriod = (previouslyLockedTime + newlyLockedShares * profitMaxUnlockTime) / totalLockedShares;\\n            // Calculate how many shares unlock per second.\\n            profitUnlockingRate = (totalLockedShares * MAX_BPS_EXTENDED) / newProfitLockingPeriod;\\n            // Calculate how long until the full amount of shares is unlocked.\\n            fullProfitUnlockDate = block.timestamp + newProfitLockingPeriod;\\n            // Update the last profitable report timestamp.\\n            lastProfitUpdate = block.timestamp;\\n        } else {\\n            // NOTE: only setting this to 0 will turn in the desired effect, no need\\n            // to update lastProfitUpdate or fullProfitUnlockDate\\n            profitUnlockingRate = 0;\\n        }\\n    }\\n\\n    /// @notice Approves vault shares to be spent by a spender.\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal {\\n        // Unlimited approval does nothing (saves an SSTORE)\\n        uint256 currentAllowance = _allowance[owner][spender];\\n        if (currentAllowance < amount) {\\n            revert ERC20InsufficientAllowance(currentAllowance);\\n        }\\n        _approve(owner, spender, currentAllowance - amount);\\n    }\\n\\n    /// @notice Transfers shares from a sender to a receiver.\\n    function _transfer(address sender, address receiver, uint256 amount) internal {\\n        uint256 currentBalance = _balanceOf[sender];\\n        if (currentBalance < amount) {\\n            revert InsufficientFunds();\\n        }\\n        if (sender == address(0) || receiver == address(0)) {\\n            revert ZeroAddress();\\n        }\\n\\n        _balanceOf[sender] = currentBalance - amount;\\n        uint256 receiverBalance = _balanceOf[receiver];\\n        _balanceOf[receiver] = receiverBalance + amount;\\n        emit Transfer(sender, receiver, amount);\\n    }\\n\\n    /// @notice Approves a spender to spend a certain amount of shares.\\n    function _approve(address owner, address spender, uint256 amount) internal returns (bool) {\\n        if (owner == address(0) || spender == address(0)) {\\n            revert ZeroAddress();\\n        }\\n        _allowance[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /// @notice Burns shares of the owner.\\n    function _burnShares(uint256 shares, address owner) internal {\\n        if (_balanceOf[owner] < shares) {\\n            revert InsufficientShares(_balanceOf[owner]);\\n        }\\n        _balanceOf[owner] -= shares;\\n        totalSupplyAmount -= shares;\\n        emit Transfer(owner, address(0), shares);\\n    }\\n\\n    /// @notice Used only to transfer tokens that are not the type managed by this Vault.\\n    /// Used to handle non-compliant tokens like USDT\\n    function _erc20SafeTransferFrom(address token, address sender, address receiver, uint256 amount) internal {\\n        if (token == address(0) || sender == address(0) || receiver == address(0)) {\\n            revert ZeroAddress();\\n        }\\n        if (!IERC20(token).transferFrom(sender, receiver, amount)) {\\n            revert ERC20TransferFailed();\\n        }\\n    }\\n\\n    /// @notice Used only to send tokens that are not the type managed by this Vault.\\n    /// Used to handle non-compliant tokens like USDT\\n    function _erc20SafeTransfer(address token, address receiver, uint256 amount) internal {\\n        if (token == address(0) || receiver == address(0)) {\\n            revert ZeroAddress();\\n        }\\n        if (!IERC20(token).transfer(receiver, amount)) {\\n            revert ERC20TransferFailed();\\n        }\\n    }\\n\\n    /// @notice Issues shares that are worth 'amount' in the underlying token (asset).\\n    /// WARNING: this takes into account that any new assets have been summed\\n    /// to totalAssets (otherwise pps will go down).\\n    function _issueShares(uint256 shares, address recipient) internal {\\n        if (recipient == address(0)) {\\n            revert ZeroAddress();\\n        }\\n        _balanceOf[recipient] += shares;\\n        totalSupplyAmount += shares;\\n        emit Transfer(address(0), recipient, shares);\\n    }\\n\\n    /// @notice Issues shares that are worth 'amount' in the underlying token (asset).\\n    /// WARNING: this takes into account that any new assets have been summed\\n    /// to totalAssets (otherwise pps will go down).\\n    function _issueSharesForAmount(uint256 amount, address recipient) internal returns (uint256) {\\n        if (recipient == address(0)) {\\n            revert ZeroAddress();\\n        }\\n        uint256 currentTotalSupply = _totalSupply();\\n        uint256 currentTotalAssets = _totalAssets();\\n        uint256 newShares = 0;\\n\\n        // If no supply PPS = 1.\\n        if (currentTotalSupply == 0) {\\n            newShares = amount;\\n        } else if (currentTotalAssets > amount) {\\n            newShares = (amount * currentTotalSupply) / (currentTotalAssets - amount);\\n        } else {\\n            // If totalSupply > 0 but amount = totalAssets we want to revert because\\n            // after first deposit, getting here would mean that the rest of the shares\\n            // would be diluted to a pricePerShare of 0. Issuing shares would then mean\\n            // either the new depositor or the previous depositors will loose money.\\n            revert AmountTooHigh();\\n        }\\n\\n        // We don't make the function revert\\n        if (newShares == 0) {\\n            return 0;\\n        }\\n\\n        _issueShares(newShares, recipient);\\n        return newShares;\\n    }\\n\\n    /// @notice Used for `deposit` calls to transfer the amount of `asset` to the vault,\\n    /// issue the corresponding shares to the `recipient` and update all needed\\n    /// vault accounting.\\n    function _deposit(address sender, address recipient, uint256 assets) internal returns (uint256) {\\n        if (shutdown == true) {\\n            revert InactiveVault();\\n        }\\n        if (assets > _maxDeposit(recipient)) {\\n            revert ExceedDepositLimit(_maxDeposit(recipient));\\n        }\\n        if (assets == 0) {\\n            revert ZeroValue();\\n        }\\n\\n        // Transfer the tokens to the vault first.\\n        assetContract.transferFrom(msg.sender, address(this), assets);\\n        // Record the change in total assets.\\n        totalIdleAmount += assets;\\n\\n        // Issue the corresponding shares for assets.\\n        uint256 shares = _issueSharesForAmount(assets, recipient);\\n        if (shares == 0) {\\n            revert ZeroValue();\\n        }\\n\\n        emit Deposit(sender, recipient, assets, shares);\\n        return shares;\\n    }\\n\\n    /// @notice Used for `mint` calls to issue the corresponding shares to the `recipient`,\\n    /// transfer the amount of `asset` to the vault, and update all needed vault\\n    /// accounting.\\n    function _mint(address sender, address recipient, uint256 shares) internal returns (uint256) {\\n        if (shutdown == true) {\\n            revert InactiveVault();\\n        }\\n        // Get corresponding amount of assets.\\n        uint256 assets = _convertToAssets(shares, Rounding.ROUND_UP);\\n\\n        if (assets == 0) {\\n            revert ZeroValue();\\n        }\\n        if (assets > _maxDeposit(recipient)) {\\n            revert ExceedDepositLimit(_maxDeposit(recipient));\\n        }\\n\\n        // Transfer the tokens to the vault first.\\n        assetContract.transferFrom(sender, address(this), assets);\\n        // Record the change in total assets.\\n        totalIdleAmount += assets;\\n\\n        // Issue the corresponding shares for assets.\\n        _issueShares(shares, recipient); // Assuming _issueShares is defined elsewhere\\n\\n        emit Deposit(sender, recipient, assets, shares);\\n        return assets;\\n    }\\n\\n    /// @notice This takes the amount denominated in asset and performs a {redeem}\\n    /// with the corresponding amount of shares.\\n    /// We use {redeem} to natively take on losses without additional non-4626 standard parameters.\\n    function _withdrawFromStrategy(address strategy, uint256 assetsToWithdraw) internal {\\n        // Need to get shares since we use redeem to be able to take on losses.\\n        uint256 sharesToRedeem = Math.min(\\n            IStrategy(strategy).previewWithdraw(assetsToWithdraw), // Use previewWithdraw since it should round up.\\n            IStrategy(strategy).balanceOf(address(this)) // And check against our actual balance.\\n        );\\n\\n        // Redeem the shares.\\n        IStrategy(strategy).redeem(sharesToRedeem, address(this), address(this));\\n    }\\n\\n    /// @notice This will attempt to free up the full amount of assets equivalent to\\n    /// `sharesToBurn` and transfer them to the `receiver`. If the vault does\\n    /// not have enough idle funds it will go through any strategies provided by\\n    /// either the withdrawer or the queueManager to free up enough funds to\\n    /// service the request.\\n    /// The vault will attempt to account for any unrealized losses taken on from\\n    /// strategies since their respective last reports.\\n    /// Any losses realized during the withdraw from a strategy will be passed on\\n    /// to the user that is redeeming their vault shares.\\n    function _redeem(\\n        address sender,\\n        address receiver,\\n        address owner,\\n        uint256 assets,\\n        uint256 sharesToBurn,\\n        uint256 maxLoss,\\n        address[] memory _strategies\\n    ) internal returns (uint256) {\\n        _validateRedeem(receiver, owner, sharesToBurn, maxLoss);\\n        _handleAllowance(owner, sender, sharesToBurn);\\n        (uint256 requestedAssets, uint256 currTotalIdle) = _withdrawAssets(assets, _strategies);\\n        _finalizeRedeem(receiver, owner, sharesToBurn, assets, requestedAssets, currTotalIdle, maxLoss);\\n\\n        emit Withdraw(sender, receiver, owner, requestedAssets, sharesToBurn);\\n        return requestedAssets;\\n    }\\n\\n    /// @notice Handles the allowance check and spending.\\n    function _handleAllowance(address owner, address sender, uint256 sharesToBurn) internal {\\n        if (sender != owner) {\\n            _spendAllowance(owner, sender, sharesToBurn);\\n        }\\n    }\\n\\n    /// @notice Sets debt for a strategy.\\n    function _setDebt(address strategy, uint256 _newDebt) internal {\\n        strategies[strategy].currentDebt = _newDebt;\\n    }\\n\\n    /// Withdraws assets from strategies as needed and handles unrealized losses.\\n    // solhint-disable-next-line function-max-lines,code-complexity\\n    function _withdrawAssets(uint256 assets, address[] memory _strategies) internal returns (uint256, uint256) {\\n        // Initialize the state struct\\n        WithdrawalState memory state = WithdrawalState({\\n            requestedAssets: assets,\\n            currTotalIdle: totalIdleAmount,\\n            currTotalDebt: totalDebtAmount,\\n            assetsNeeded: 0,\\n            previousBalance: assetContract.balanceOf(address(this)),\\n            unrealisedLossesShare: 0\\n        });\\n\\n        // If there are not enough assets in the Vault contract, we try to free\\n        // funds from strategies.\\n        if (state.requestedAssets > state.currTotalIdle) {\\n            // Cache the default queue.\\n            address[] memory currentStrategies;\\n            uint256 defaultQueueLength;\\n            if (_strategies.length != 0 && !useDefaultQueue) {\\n                // If a custom queue was passed, and we don't force the default queue.\\n                // Use the custom queue.\\n                defaultQueueLength = _strategies.length;\\n                currentStrategies = _strategies;\\n            } else {\\n                currentStrategies = defaultQueue;\\n            }\\n\\n            // Withdraw from strategies only what idle doesn't cover.\\n            // `assetsNeeded` is the total amount we need to fill the request.\\n            state.assetsNeeded = state.requestedAssets - state.currTotalIdle;\\n\\n            // Assuming _strategies is an array of addresses representing the strategies\\n            for (uint256 i = 0; i < currentStrategies.length; i++) {\\n                address strategy = currentStrategies[i];\\n                // Make sure we have a valid strategy.\\n                uint256 activation = strategies[strategy].activation;\\n                if (activation == 0) {\\n                    revert InactiveStrategy(strategy);\\n                }\\n\\n                // How much should the strategy have.\\n                uint256 currentDebt = strategies[strategy].currentDebt;\\n\\n                // NOTE: What is the max amount to withdraw from this strategy is defined by min of asset need and debt.\\n                uint256 assetsToWithdraw = Math.min(state.assetsNeeded, currentDebt);\\n\\n                // Cache max_withdraw now for use if unrealized loss > 0\\n                // Use maxRedeem and convert since we use redeem.\\n                uint256 currMaxWithdraw = IStrategy(strategy).convertToAssets(IStrategy(strategy).maxRedeem(address(this)));\\n\\n                // If unrealised losses > 0, then the user will take the proportional share\\n                // and realize it (required to avoid users withdrawing from lossy strategies).\\n                // NOTE: strategies need to manage the fact that realising part of the loss can\\n                // mean the realisation of 100% of the loss!! (i.e. if for withdrawing 10% of the\\n                // strategy it needs to unwind the whole position, generated losses might be bigger)\\n                uint256 unrealisedLossesShare = _assessShareOfUnrealisedLosses(strategy, assetsToWithdraw);\\n                if (unrealisedLossesShare > 0) {\\n                    // If max withdraw is limiting the amount to pull, we need to adjust the portion of\\n                    // the unrealized loss the user should take.\\n                    if (currMaxWithdraw < assetsToWithdraw - unrealisedLossesShare) {\\n                        // How much would we want to withdraw\\n                        uint256 wanted = assetsToWithdraw - unrealisedLossesShare;\\n                        // Get the proportion of unrealised comparing what we want vs. what we can get\\n                        unrealisedLossesShare = (unrealisedLossesShare * currMaxWithdraw) / wanted;\\n                        // Adjust assetsToWithdraw so all future calculations work correctly\\n                        assetsToWithdraw = currMaxWithdraw + unrealisedLossesShare;\\n                    }\\n\\n                    // User now \\\"needs\\\" less assets to be unlocked (as he took some as losses)\\n                    assetsToWithdraw -= unrealisedLossesShare;\\n                    state.requestedAssets -= unrealisedLossesShare;\\n                    // NOTE: done here instead of waiting for regular update of these values\\n                    // because it's a rare case (so we can save minor amounts of gas)\\n                    state.assetsNeeded -= unrealisedLossesShare;\\n                    state.currTotalDebt -= unrealisedLossesShare;\\n\\n                    // If max withdraw is 0 and unrealised loss is still > 0 then the strategy likely\\n                    // realized a 100% loss and we will need to realize that loss before moving on.\\n                    if (currMaxWithdraw == 0 && unrealisedLossesShare > 0) {\\n                        // Adjust the strategy debt accordingly.\\n                        uint256 newDebt = currentDebt - unrealisedLossesShare;\\n\\n                        // Update strategies storage\\n                        _setDebt(strategy, newDebt);\\n\\n                        // Log the debt update\\n                        emit DebtUpdated(strategy, currentDebt, newDebt);\\n                    }\\n                }\\n\\n                // Adjust based on the max withdraw of the strategy.\\n                assetsToWithdraw = Math.min(assetsToWithdraw, currMaxWithdraw);\\n\\n                // Can't withdraw 0.\\n                if (assetsToWithdraw == 0) {\\n                    continue;\\n                }\\n\\n                // WITHDRAW FROM STRATEGY\\n                _withdrawFromStrategy(strategy, assetsToWithdraw);\\n                uint256 postBalance = assetContract.balanceOf(address(this));\\n\\n                // Always check withdrawn against the real amounts.\\n                uint256 withdrawn = postBalance - state.previousBalance;\\n                uint256 loss = 0;\\n\\n                // Check if we redeemed too much.\\n                if (withdrawn > assetsToWithdraw) {\\n                    // Make sure we don't underflow in debt updates.\\n                    if (withdrawn > currentDebt) {\\n                        // Can't withdraw more than our debt.\\n                        assetsToWithdraw = currentDebt;\\n                    } else {\\n                        assetsToWithdraw += withdrawn - assetsToWithdraw;\\n                    }\\n                    // If we have not received what we expected, we consider the difference a loss.\\n                } else if (withdrawn < assetsToWithdraw) {\\n                    loss = assetsToWithdraw - withdrawn;\\n                }\\n\\n                // NOTE: strategy's debt decreases by the full amount but the total idle increases\\n                // by the actual amount only (as the difference is considered lost).\\n                if (state.currTotalIdle + assetsToWithdraw - loss == 0) {\\n                    state.currTotalIdle = 0;\\n                } else {\\n                    state.currTotalIdle += assetsToWithdraw - loss;\\n                }\\n                if (state.requestedAssets - loss == 0) {\\n                    state.requestedAssets = 0;\\n                } else {\\n                    state.requestedAssets -= loss;\\n                }\\n                if (state.currTotalDebt - assetsToWithdraw == 0) {\\n                    state.currTotalDebt = 0;\\n                } else {\\n                    state.currTotalDebt -= assetsToWithdraw;\\n                }\\n\\n                // Vault will reduce debt because the unrealised loss has been taken by user\\n                uint256 _newDebt;\\n                if (currentDebt < (assetsToWithdraw + unrealisedLossesShare)) {\\n                    _newDebt = 0;\\n                } else {\\n                    _newDebt = currentDebt - (assetsToWithdraw + unrealisedLossesShare);\\n                }\\n\\n                // Update strategies storage\\n                _setDebt(strategy, _newDebt);\\n                // Log the debt update\\n                emit DebtUpdated(strategy, currentDebt, _newDebt);\\n\\n                // Break if we have enough total idle to serve initial request.\\n                if (state.requestedAssets <= state.currTotalIdle) {\\n                    break;\\n                }\\n\\n                // We update the previous_balance variable here to save gas in next iteration.\\n                state.previousBalance = postBalance;\\n\\n                // Reduce what we still need. Safe to use assets_to_withdraw\\n                // here since it has been checked against requested_assets\\n                state.assetsNeeded -= assetsToWithdraw;\\n            }\\n\\n            // If we exhaust the queue and still have insufficient total idle, revert.\\n            if (state.currTotalIdle < state.requestedAssets) {\\n                revert InsufficientAssets(state.currTotalIdle, state.requestedAssets);\\n            }\\n\\n            // Commit memory to storage.\\n            totalDebtAmount = state.currTotalDebt;\\n        }\\n\\n        return (state.requestedAssets, state.currTotalIdle);\\n    }\\n\\n    /// @notice Finalizes the redeem operation by burning shares and transferring assets.\\n    function _finalizeRedeem(\\n        address receiver,\\n        address owner,\\n        uint256 sharesToBurn,\\n        uint256 assets,\\n        uint256 requestedAssets,\\n        uint256 currTotalIdle,\\n        uint256 maxLoss\\n    ) internal {\\n        // Check if there is a loss and a non-default value was set.\\n        if (assets > requestedAssets && maxLoss < MAX_BPS) {\\n            // Assure the loss is within the allowed range.\\n            if (assets - requestedAssets > (assets * maxLoss) / MAX_BPS) {\\n                revert TooMuchLoss();\\n            }\\n        }\\n\\n        // First burn the corresponding shares from the redeemer.\\n        _burnShares(sharesToBurn, owner);\\n        // Commit memory to storage.\\n        totalIdleAmount = currTotalIdle - requestedAssets;\\n        // Transfer the requested amount to the receiver.\\n        _erc20SafeTransfer(address(assetContract), receiver, requestedAssets);\\n    }\\n\\n    /// @notice Revokes a strategy from the vault.\\n    function _revokeStrategy(address strategy, bool force) internal {\\n        if (strategies[strategy].activation == 0) {\\n            revert InactiveStrategy(strategy);\\n        }\\n\\n        // If force revoking a strategy, it will cause a loss.\\n        uint256 loss = 0;\\n        if (strategies[strategy].currentDebt != 0 && !force) {\\n            revert StrategyHasDebt(strategies[strategy].currentDebt);\\n        }\\n\\n        // Vault realizes the full loss of outstanding debt.\\n        loss = strategies[strategy].currentDebt;\\n        // Adjust total vault debt.\\n        totalDebtAmount -= loss;\\n\\n        emit StrategyReported(strategy, 0, loss, 0, 0, 0, 0);\\n\\n        // Set strategy params all back to 0 (WARNING: it can be re-added).\\n        strategies[strategy] = StrategyParams({ activation: 0, lastReport: 0, currentDebt: 0, maxDebt: 0 });\\n\\n        // Remove strategy if it is in the default queue.\\n        address[] memory newQueue;\\n        if (defaultQueue.length > 0) {\\n            for (uint256 i = 0; i < defaultQueue.length; i++) {\\n                address _strategy = defaultQueue[i];\\n                // Add all strategies to the new queue besides the one revoked.\\n                if (_strategy != strategy) {\\n                    newQueue[i] = _strategy;\\n                }\\n            }\\n        }\\n\\n        // Set the default queue to our updated queue.\\n        defaultQueue = newQueue;\\n\\n        emit StrategyChanged(strategy, StrategyChangeType.REVOKED);\\n    }\\n\\n    /// @dev Returns the max amount of `asset` an `owner` can withdraw.\\n    /// This will do a full simulation of the withdraw in order to determine\\n    /// how much is currently liquid and if the `maxLoss` would allow for the\\n    /// tx to not revert.\\n    /// This will track any expected loss to check if the tx will revert, but\\n    /// not account for it in the amount returned since it is unrealised and\\n    /// therefore will not be accounted for in the conversion rates.\\n    /// i.e. If we have 100 debt and 10 of unrealised loss, the max we can get\\n    /// out is 90, but a user of the vault will need to call withdraw with 100\\n    /// in order to get the full 90 out.\\n    // solhint-disable-next-line function-max-lines,code-complexity\\n    function _maxWithdraw(address owner, uint256 _maxLoss, address[] memory _strategies) internal view returns (uint256) {\\n        // Get the max amount for the owner if fully liquid.\\n        uint256 maxAssets = _convertToAssets(_balanceOf[owner], Rounding.ROUND_DOWN);\\n\\n        // If there is a withdraw limit module use that.\\n        if (withdrawLimitModule != address(0)) {\\n            uint256 moduleLimit = IWithdrawLimitModule(withdrawLimitModule).availableWithdrawLimit(owner, _maxLoss, _strategies);\\n            if (moduleLimit < maxAssets) {\\n                maxAssets = moduleLimit;\\n            }\\n            return maxAssets;\\n        }\\n\\n        // See if we have enough idle to service the withdraw.\\n        uint256 currentIdle = totalIdleAmount;\\n        if (maxAssets > currentIdle) {\\n            // Track how much we can pull.\\n            uint256 have = currentIdle;\\n            uint256 loss = 0;\\n\\n            // Cache the default queue.\\n            // If a custom queue was passed, and we don't force the default queue.\\n            // Use the custom queue.\\n            address[] memory currentStrategies = _strategies.length != 0 && !useDefaultQueue ? _strategies : defaultQueue;\\n\\n            for (uint256 i = 0; i < currentStrategies.length; i++) {\\n                address strategy = currentStrategies[i];\\n                // Can't use an invalid strategy.\\n                if (strategies[strategy].activation == 0) {\\n                    revert InactiveStrategy(strategy);\\n                }\\n\\n                // Get the maximum amount the vault would withdraw from the strategy.\\n                uint256 toWithdraw = Math.min(\\n                    maxAssets - have, // What we still need for the full withdraw\\n                    strategies[strategy].currentDebt // The current debt the strategy has.\\n                );\\n\\n                // Get any unrealised loss for the strategy.\\n                uint256 unrealisedLoss = _assessShareOfUnrealisedLosses(strategy, toWithdraw);\\n\\n                // See if any limit is enforced by the strategy.\\n                uint256 strategyLimit = IStrategy(strategy).convertToAssets(IStrategy(strategy).maxRedeem(address(this)));\\n\\n                // Adjust accordingly if there is a max withdraw limit.\\n                if (strategyLimit < toWithdraw - unrealisedLoss) {\\n                    // lower unrealised loss to the proportional to the limit.\\n                    unrealisedLoss = (unrealisedLoss * strategyLimit) / toWithdraw;\\n                    // Still count the unrealised loss as withdrawable.\\n                    toWithdraw = strategyLimit + unrealisedLoss;\\n                }\\n\\n                // If 0 move on to the next strategy.\\n                if (toWithdraw == 0) {\\n                    continue;\\n                }\\n\\n                // If there would be a loss with a non-maximum `maxLoss` value.\\n                if (unrealisedLoss > 0 && _maxLoss < MAX_BPS) {\\n                    // Check if the loss is greater than the allowed range.\\n                    if (loss + unrealisedLoss > ((have + toWithdraw) * _maxLoss) / MAX_BPS) {\\n                        // If so use the amounts up till now.\\n                        break;\\n                    }\\n                }\\n\\n                // Add to what we can pull.\\n                have += toWithdraw;\\n\\n                // If we have all we need break.\\n                if (have >= maxAssets) {\\n                    break;\\n                }\\n\\n                // Add any unrealised loss to the total\\n                loss += unrealisedLoss;\\n            }\\n\\n            // Update the max after going through the queue.\\n            // In case we broke early or exhausted the queue.\\n            maxAssets = have;\\n        }\\n\\n        return maxAssets;\\n    }\\n\\n    /// @notice Assess the profit and loss of a strategy.\\n    function _assessProfitAndLoss(address strategy) internal view returns (uint256 gain, uint256 loss) {\\n        // Vault assesses profits using 4626 compliant interface.\\n        // NOTE: It is important that a strategies `convertToAssets` implementation\\n        // cannot be manipulated or else the vault could report incorrect gains/losses.\\n        uint256 strategyShares = IStrategy(strategy).balanceOf(address(this));\\n        // How much the vaults position is worth.\\n        uint256 currentTotalAssets = IStrategy(strategy).convertToAssets(strategyShares);\\n        // How much the vault had deposited to the strategy.\\n        uint256 currentDebt = strategies[strategy].currentDebt;\\n\\n        uint256 _gain = 0;\\n        uint256 _loss = 0;\\n\\n        // Compare reported assets vs. the current debt.\\n        if (currentTotalAssets > currentDebt) {\\n            // We have a gain.\\n            _gain = currentTotalAssets - currentDebt;\\n        } else {\\n            // We have a loss.\\n            _loss = currentDebt - currentTotalAssets;\\n        }\\n\\n        return (_gain, _loss);\\n    }\\n\\n    /// @notice Returns the amount of shares that have been unlocked.\\n    /// To avoid sudden pricePerShare spikes, profits must be processed\\n    /// through an unlocking period. The mechanism involves shares to be\\n    /// minted to the vault which are unlocked gradually over time. Shares\\n    /// that have been locked are gradually unlocked over profitMaxUnlockTime.\\n    function _unlockedShares() internal view returns (uint256) {\\n        uint256 _fullProfitUnlockDate = fullProfitUnlockDate;\\n        uint256 currUnlockedShares = 0;\\n        if (_fullProfitUnlockDate > block.timestamp) {\\n            // If we have not fully unlocked, we need to calculate how much has been.\\n            currUnlockedShares = (profitUnlockingRate * (block.timestamp - lastProfitUpdate)) / MAX_BPS_EXTENDED;\\n        } else if (_fullProfitUnlockDate != 0) {\\n            // All shares have been unlocked\\n            currUnlockedShares = _balanceOf[address(this)];\\n        }\\n        return currUnlockedShares;\\n    }\\n\\n    /// @notice Need to account for the shares issued to the vault that have unlocked.\\n    function _totalSupply() internal view returns (uint256) {\\n        return totalSupplyAmount - _unlockedShares();\\n    }\\n\\n    /// @notice Total amount of assets that are in the vault and in the strategies.\\n    function _totalAssets() internal view returns (uint256) {\\n        return totalIdleAmount + totalDebtAmount;\\n    }\\n\\n    /// @notice assets = shares * (totalAssets / totalSupply) --- (== pricePerShare * shares)\\n    function _convertToAssets(uint256 shares, Rounding rounding) internal view returns (uint256) {\\n        if (shares == type(uint256).max || shares == 0) {\\n            return shares;\\n        }\\n\\n        uint256 currentTotalSupply = _totalSupply();\\n        // if totalSupply is 0, pricePerShare is 1\\n        if (currentTotalSupply == 0) {\\n            return shares;\\n        }\\n\\n        uint256 numerator = shares * _totalAssets();\\n        uint256 amount = numerator / currentTotalSupply;\\n        if (rounding == Rounding.ROUND_UP && numerator % currentTotalSupply != 0) {\\n            amount += 1;\\n        }\\n\\n        return amount;\\n    }\\n\\n    /// @notice shares = amount * (totalSupply / totalAssets) --- (== amount / pricePerShare)\\n    function _convertToShares(uint256 assets, Rounding rounding) internal view returns (uint256) {\\n        if (assets == type(uint256).max || assets == 0) {\\n            return assets;\\n        }\\n\\n        uint256 currentTotalSupply = _totalSupply();\\n        uint256 currentTotalAssets = _totalAssets();\\n\\n        if (currentTotalAssets == 0) {\\n            // if totalAssets and totalSupply is 0, pricePerShare is 1\\n            if (currentTotalSupply == 0) {\\n                return assets;\\n            } else {\\n                // Else if totalSupply > 0 pricePerShare is 0\\n                return 0;\\n            }\\n        }\\n\\n        uint256 numerator = assets * currentTotalSupply;\\n        uint256 shares = numerator / currentTotalAssets;\\n        if (rounding == Rounding.ROUND_UP && numerator % currentTotalAssets != 0) {\\n            shares += 1;\\n        }\\n\\n        return shares;\\n    }\\n\\n    function _maxDeposit(address receiver) internal view returns (uint256) {\\n        if (receiver == address(this) || receiver == address(0)) {\\n            return 0;\\n        }\\n\\n        // If there is a deposit limit module set use that.\\n        address currentDepositLimitModule = depositLimitModule;\\n        if (currentDepositLimitModule != address(0)) {\\n            // Use the deposit limit module logic\\n            return IDepositLimitModule(currentDepositLimitModule).availableDepositLimit(receiver);\\n        }\\n\\n        // Else use the standard flow.\\n        uint256 currentTotalAssets = _totalAssets();\\n        uint256 currentDepositLimit = depositLimit;\\n        if (currentTotalAssets >= currentDepositLimit) {\\n            return 0;\\n        }\\n\\n        return currentDepositLimit - currentTotalAssets;\\n    }\\n\\n    /// @notice Returns the share of losses that a user would take if withdrawing from this strategy\\n    /// e.g. if the strategy has unrealised losses for 10% of its current debt and the user\\n    /// wants to withdraw 1000 tokens, the losses that he will take are 100 token\\n    function _assessShareOfUnrealisedLosses(address strategy, uint256 assetsNeeded) internal view returns (uint256) {\\n        // Minimum of how much debt the debt should be worth.\\n        uint256 strategyCurrentDebt = strategies[strategy].currentDebt;\\n        // The actual amount that the debt is currently worth.\\n        uint256 vaultShares = IStrategy(strategy).balanceOf(address(this));\\n        uint256 strategyAssets = IStrategy(strategy).convertToAssets(vaultShares);\\n\\n        // If no losses, return 0\\n        if (strategyAssets >= strategyCurrentDebt || strategyCurrentDebt == 0) {\\n            return 0;\\n        }\\n\\n        // Users will withdraw assets_to_withdraw divided by loss ratio (strategyAssets / strategyCurrentDebt - 1),\\n        // but will only receive assets_to_withdraw.\\n        // NOTE: If there are unrealised losses, the user will take his share.\\n        uint256 numerator = assetsNeeded * strategyAssets;\\n        uint256 lossesUserShare = assetsNeeded - numerator / strategyCurrentDebt;\\n\\n        // Always round up.\\n        if (numerator % strategyCurrentDebt != 0) {\\n            lossesUserShare += 1;\\n        }\\n\\n        return lossesUserShare;\\n    }\\n\\n    /// @notice Validates the state and inputs for the redeem operation.\\n    function _validateRedeem(address receiver, address owner, uint256 sharesToBurn, uint256 maxLoss) internal view {\\n        if (receiver == address(0)) {\\n            revert ZeroAddress();\\n        }\\n        if (maxLoss > MAX_BPS) {\\n            revert MaxLoss();\\n        }\\n        if (sharesToBurn == 0) {\\n            revert ZeroValue();\\n        }\\n        if (_balanceOf[owner] < sharesToBurn) {\\n            revert InsufficientShares(_balanceOf[owner]);\\n        }\\n    }\\n\\n    /// @notice Checks if the address is a contract.\\n    function _isContract(address addr) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(addr)\\n        }\\n        return size > 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf01ba9f0106df3c71882412916c8ed4de5be606e15efdbd263fb2fd4bfc62e5c\",\"license\":\"AGPL-3.0-or-later\"}},\"version\":1}",
    "bytecode": "",
    "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106104655760003560e01c80637ecebe001161024a5780637ecebe001461083e5780638212fd431461085e57806389b893f1146108715780638afca8f01461089957806391986003146108a257806391d14854146108b557806394bf804d146108c857806395d89b41146108db578063966dae0e146108e357806399374642146108f657806399530b06146109165780639a78e72e1461091e5780639af1d35a1461094a5780639bbca8841461098e5780639e34e348146109a15780639fc2c476146109b4578063a217fddf146109c9578063a835cd81146109d1578063a9059cbb146109e4578063ab5b4d49146109f7578063b1c46c9f14610a0c578063b3c187f214610a1f578063b3d7f6b914610a32578063b6cc2d1f14610a45578063ba71ecd414610a66578063bb994d4814610a6e578063bbe4eb4914610a81578063bdc8144b14610a95578063bf4f150714610aa8578063c0993eea14610abb578063c63d75b614610ad0578063c6e6f59214610ae3578063c8dffa9514610af6578063d505accf14610aff578063d547741f14610b12578063d55be8c614610b25578063d81a09f614610b2e578063d9a0e97a14610b41578063dd62ed3e14610b49578063df69b22a14610b5c578063e5236cc914610b6f578063ecf7085814610b77578063ef8b30f714610ae3578063f2e3c4d314610b80578063f6d7bfa014610b93578063f828f50b14610ba6578063fc0e74d114610baf578063fd967f4714610bc3578063ff1e7f0814610bcc57600080fd5b8062435da51461046a57806301e1d1141461049357806301ffc9a7146104a957806303dcd12c146104cc57806306580f2d146104e157806306fdde03146104f457806307a2d13a146105095780630835a3fc1461051c5780630952864e14610525578063095ea7b31461052e5780630a28a4771461054157806316b87ac01461055457806316d3bfbb1461056957806318160ddd14610574578063223e54791461057c57806323b872dd1461058f578063248a9ca3146105a25780632d632692146105b55780632d772168146105be5780632f2ff15d146105d1578063313ce567146105e457806334b5fab6146106045780633644e5151461061757806336568abe1461062057806336fba0841461063357806338d52e0f1461063f57806339ebf823146106505780633c6aa9f1146106a55780633cd7b5ab146106b95780633f7b5e40146106c2578063402d267d146106ca578063405977e7146106dd57806348ea7127146106f05780634bbd71e9146107035780634cdad506146105095780634d08d131146107165780634d16304f146107455780634d4bb197146107585780634fb3ccc51461076d5780635141eebb1461078057806353a6613214610789578063568097d1146107ab5780635a569099146107b3578063633f228c146107c657806365cb6765146107d95780636e553f65146107ec57806370a08231146107ff57806370c33c801461081257806377e3b2671461081a575b600080fd5b600f5461047d906001600160a01b031681565b60405161048a919061533a565b60405180910390f35b61049b610bdf565b60405190815260200161048a565b6104bc6104b736600461534e565b610bee565b604051901515815260200161048a565b61049b600080516020615e0f83398151915281565b61049b6104ef3660046153d1565b610c25565b6104fc610c96565b60405161048a9190615470565b61049b6105173660046154a3565b610d28565b61049b60065481565b61049b60085481565b6104bc61053c3660046154bc565b610d35565b61049b61054f3660046154a3565b610d49565b6105676105623660046154e8565b610d56565b005b61049b6301e1855881565b61049b610d70565b61056761058a3660046154e8565b610d7a565b6104bc61059d366004615505565b610f86565b61049b6105b03660046154a3565b610fe4565b61049b60095481565b6105676105cc3660046154e8565b610ff9565b6105676105df366004615546565b61109c565b601354600160c81b900460ff165b60405160ff909116815260200161048a565b61049b610612366004615576565b6110bd565b61049b60025481565b61056761062e366004615546565b61113f565b61049b64e8d4a5100081565b6013546001600160a01b031661047d565b61068561065e3660046154e8565b601b6020526000908152604090208054600182015460028301546003909301549192909184565b60408051948552602085019390935291830152606082015260800161048a565b6013546105f290600160c81b900460ff1681565b61049b60055481565b61049b600a81565b61049b6106d83660046154e8565b6111b9565b6105676106eb3660046154bc565b6111c4565b6105676106fe3660046154e8565b611418565b6105676107113660046154e8565b61146e565b601754601854601954601a54610735939291906001600160a01b031684565b60405161048a94939291906155d1565b60135461047d906001600160a01b031681565b61049b600080516020615ecf83398151915281565b600c5461047d906001600160a01b031681565b61049b600a5481565b6104bc6107973660046154a3565b602080526000908152604090205460ff1681565b6104fc6114c4565b61049b6107c13660046154bc565b611552565b6105676107d43660046155f5565b6115a4565b61049b6107e7366004615576565b61168b565b61049b6107fa366004615546565b6116d4565b61049b61080d3660046154e8565b6116f4565b6104fc61174d565b6104fc604051806040016040528060058152602001640312e302e360dc1b81525081565b61049b61084c3660046154e8565b601e6020526000908152604090205481565b61056761086c3660046154a3565b61175a565b60135461088690600160a01b900461ffff1681565b60405161ffff909116815260200161048a565b61049b600b5481565b600e5461047d906001600160a01b031681565b6104bc6108c3366004615546565b61179a565b61049b6108d6366004615546565b6117c3565b6104fc6117d8565b60115461047d906001600160a01b031681565b61049b6109043660046154e8565b601f6020526000908152604090205481565b61049b6117e7565b61049b61092c3660046154e8565b6001600160a01b03166000908152601b602052604090206002015490565b61095261180d565b60405161048a91908151815260208083015190820152604080830151908201526060918201516001600160a01b03169181019190915260800190565b61056761099c366004615644565b61184b565b600d5461047d906001600160a01b031681565b61049b600080516020615e4f83398151915281565b61049b600081565b61049b6109df366004615505565b6118b0565b6104bc6109f23660046154bc565b611f59565b61049b600080516020615f0f83398151915281565b610567610a1a366004615661565b611fab565b60105461047d906001600160a01b031681565b61049b610a403660046154a3565b612025565b610a58610a533660046154e8565b612032565b60405161048a9291906156a2565b60165461049b565b610567610a7c3660046154e8565b612181565b6013546104bc90600160b01b900460ff1681565b610567610aa33660046154a3565b6121a4565b610567610ab6366004615707565b61222b565b61049b600080516020615f2f83398151915281565b61049b610ade3660046154e8565b612488565b61049b610af13660046154a3565b6124a1565b61049b60045481565b6104bc610b0d3660046157b6565b6124ae565b610567610b20366004615546565b6126c9565b61088661138881565b61049b610b3c3660046153d1565b6126e5565b61049b61274c565b61049b610b57366004615824565b612756565b610567610b6a3660046154a3565b612781565b610567612812565b61049b60075481565b60125461047d906001600160a01b031681565b610567610ba13660046154bc565b612914565b61049b60035481565b6013546104bc90600160b81b900460ff1681565b61049b61271081565b61047d610bda3660046154a3565b6129c5565b6000610be96129ef565b905090565b60006001600160e01b03198216637965db0b60e01b1480610c1f57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6000610c2f612a01565b6000610c3c886000612a5a565b9050610c80338888848c8a8a8a80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250612af092505050565b915050610c8c60018055565b9695505050505050565b606060148054610ca590615852565b80601f0160208091040260200160405190810160405280929190818152602001828054610cd190615852565b8015610d1e5780601f10610cf357610100808354040283529160200191610d1e565b820191906000526020600020905b815481529060010190602001808311610d0157829003601f168201915b5050505050905090565b6000610c1f826000612a5a565b6000610d42338484612b8d565b9392505050565b6000610c1f826001612c1e565b6000610d6181612ccc565b610d6c826001612cd9565b5050565b6000610be9612f0f565b600080516020615e4f833981519152610d9281612ccc565b6001600160a01b0382161580610db057506001600160a01b03821630145b15610dce5760405163d92e233d60e01b815260040160405180910390fd5b6000826001600160a01b03166338d52e0f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e32919061588c565b6013549091506001600160a01b03808316911614610e6e57806040516337bce3c560e11b8152600401610e65919061533a565b60405180910390fd5b6001600160a01b0383166000908152601b602052604090205415610ea55760405163c976754d60e01b815260040160405180910390fd5b604080516080810182524280825260208083019182526000838501818152606085018281526001600160a01b038a168352601b9093529490209251835590516001830155915160028201559051600390910155601654600a811015610f5057601680546001810182556000919091527fd833147d7dc355ba459fc788f669e58cfaf9dc25ddcd0702e87d69c7b51242890180546001600160a01b0319166001600160a01b0386161790555b836001600160a01b0316600080516020615e6f8339815191526000604051610f7891906158bf565b60405180910390a250505050565b60006001600160a01b038316301480610fa657506001600160a01b038316155b15610fc45760405163d92e233d60e01b815260040160405180910390fd5b610fcf843384612f26565b610fda848484612f8b565b5060019392505050565b60009081526020819052604090206001015490565b600061100481612ccc565b601354600160b81b900460ff1615156001036110335760405163036882cf60e41b815260040160405180910390fd5b6000196007541461105757604051634e41418560e11b815260040160405180910390fd5b600d80546001600160a01b0319166001600160a01b038416179055604051600080516020615e2f8339815191529061109090849061533a565b60405180910390a15050565b6110a582610fe4565b6110ae81612ccc565b6110b8838361308a565b505050565b6000806110fe868686868080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061310e92505050565b9050600061110d826001612c1e565b6001600160a01b0388166000908152601c60205260409020549091506111349082906134e1565b979650505050505050565b6001600160a01b03811633146111af5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610e65565b610d6c82826134f7565b6000610c1f8261355c565b600080516020615f0f8339815191526111dc81612ccc565b6111e4612a01565b6001600160a01b0383166000908152601b6020526040812054900361121e578260405163489d081b60e11b8152600401610e65919061533a565b6001600160a01b0383166000908152601b6020526040902060020154801580611245575082155b1561126357604051637c946ed760e01b815260040160405180910390fd5b8083111561126f578092505b60008184866001600160a01b03166370a08231306040518263ffffffff1660e01b815260040161129f919061533a565b602060405180830381865afa1580156112bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e091906158e7565b6112ea9190615916565b6112f49190615943565b90508060000361131757604051637c946ed760e01b815260040160405180910390fd5b61132330333087613634565b6001600160a01b0385166000908152601b60205260408120600201805486929061134e908490615957565b9250508190555083600460008282546113679190615957565b925050819055508360056000828254611380919061596a565b90915550506001600160a01b038516600080516020615f6f833981519152836113a98782615957565b6040516113b79291906156a2565b60405180910390a26113ca853383613717565b846001600160a01b03167fe94e7f88819f66c19b097748cb754149f63b1a176ed425dee1f1ee933e6d09b08560405161140591815260200190565b60405180910390a250506110b860018055565b600061142381612ccc565b600c80546001600160a01b0319166001600160a01b0384161790556040517f7421df9bb5aa804486a873c3f79b4bda8b65888cb4ceb1ce73ab3415f479adea9061109090849061533a565b600061147981612ccc565b600e80546001600160a01b0319166001600160a01b0384161790556040517fb02c7aec2b89901bc7caa8b5cd2ed1ede10b5dd3d3c15f2a249ef51a76a3fc949061109090849061533a565b601580546114d190615852565b80601f01602080910402602001604051908101604052809291908181526020018280546114fd90615852565b801561154a5780601f1061151f5761010080835404028352916020019161154a565b820191906000526020600020905b81548152906001019060200180831161152d57829003601f168201915b505050505081565b6001600160a01b0382166000908152601b60205260408120600201548281101561159257604051633327137b60e21b815260048101829052602401610e65565b61159c84846137e0565b949350505050565b600080516020615e4f8339815191526115bc81612ccc565b60005b8281101561163f5760008484838181106115db576115db61597d565b90506020020160208101906115f091906154e8565b6001600160a01b0381166000908152601b60205260408120549192500361162c578060405163489d081b60e11b8152600401610e65919061533a565b508061163781615993565b9150506115bf565b5061164c6016848461521b565b507f3adf0cd8b4427265ab8cb9118d0b9c61b811c637fe87c5be9f2f4d91ce17cfbc838360405161167e9291906159ac565b60405180910390a1505050565b60006116cb858585858080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061310e92505050565b95945050505050565b60006116de612a01565b6116e9338385613940565b9050610c1f60018055565b6000306001600160a01b038316036117315761170e613aca565b6001600160a01b0383166000908152601c6020526040902054610c1f9190615957565b506001600160a01b03166000908152601c602052604090205490565b601480546114d190615852565b600061176581612ccc565b60068290556040518281527f3c79c9aaa553ffa63df7f68d233487e697a31db07a59fb73fbab634e1871202090602001611090565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b60006117cd612a01565b6116e9338385613b28565b606060158054610ca590615852565b601354600090610be99061180690600160c81b900460ff16600a615ad3565b6000612a5a565b61181561527e565b50604080516080810182526017548152601854602082015260195491810191909152601a546001600160a01b0316606082015290565b600080516020615e4f83398151915261186381612ccc565b60138054831515600160b01b0260ff60b01b199091161790556040517fa9cd3583c5278952720fbec6b769ae08cbab1491fd69ae1edeb07ed07c9432f99061109090841515815260200190565b6000600080516020615e4f8339815191526118ca81612ccc565b6118d2612a01565b6001600160a01b0384166000908152601b60205260409020600201548314801590611901575060065460055411155b1561191f5760405163356680b760e01b815260040160405180910390fd5b6001600160a01b0384166000908152601b6020526040902060020154601354849190600160b81b900460ff16151560010361195957600091505b8082036119795760405163084df06b60e41b815260040160405180910390fd5b81811115611c5b57600061198d8383615957565b9050600654816005546119a0919061596a565b10156119c3576005546006546119b69190615957565b9050818111156119c35750805b604051636c82bbbf60e11b81526000906001600160a01b038916906307a2d13a90829063d905777e906119fa908e9060040161533a565b602060405180830381865afa158015611a17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a3b91906158e7565b6040518263ffffffff1660e01b8152600401611a5991815260200190565b602060405180830381865afa158015611a76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a9a91906158e7565b905080600003611abd57604051637c946ed760e01b815260040160405180910390fd5b81811015611ac9578091505b6000611ad589846137e0565b90508015611af95760405163311d104160e01b815260048101829052602401610e65565b6013546040516370a0823160e01b81526000916001600160a01b0316906370a0823190611b2a908e9060040161533a565b602060405180830381865afa158015611b47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b6b91906158e7565b9050611b778a85613c70565b6013546040516370a0823160e01b81526000916001600160a01b0316906370a0823190611ba8908f9060040161533a565b602060405180830381865afa158015611bc5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611be991906158e7565b90506000611c00611bfa8484615957565b886134e1565b905085811115611c0e578095505b8060056000828254611c20919061596a565b925050819055508560046000828254611c399190615957565b90915550611c449050565b611c4e8688615957565b9750505050505050611eff565b6001600160a01b0386166000908152601b6020526040902060030154821115611cb6576001600160a01b0386166000908152601b602052604090819020600301549051638f55f52760e01b8152610e659184916004016156a2565b60405163402d267d60e01b81526000906001600160a01b0388169063402d267d90611ce5908b9060040161533a565b602060405180830381865afa158015611d02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d2691906158e7565b905080600003611d4957604051637c946ed760e01b815260040160405180910390fd5b6000611d558385615957565b905081811115611d625750805b6000600654600554611d749190615957565b905080821115611d82578091505b8115611efb57601354611d9f906001600160a01b03168a84613dcd565b6013546040516370a0823160e01b81526000916001600160a01b0316906370a0823190611dd090309060040161533a565b602060405180830381865afa158015611ded573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e1191906158e7565b9050611e1d8a84613e96565b6013546040516370a0823160e01b81526000916001600160a01b0316906370a0823190611e4e90309060040161533a565b602060405180830381865afa158015611e6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e8f91906158e7565b601354909150611eaa906001600160a01b03168c6000613dcd565b611eb48183615957565b93508360056000828254611ec89190615957565b925050819055508360046000828254611ee1919061596a565b90915550611eec9050565b611ef6848761596a565b965050505b5050505b6001600160a01b0386166000818152601b60205260409081902060020184905551600080516020615f6f83398151915290611f3d90849086906156a2565b60405180910390a2509150611f5160018055565b509392505050565b60006001600160a01b038316301480611f7957506001600160a01b038316155b15611f975760405163d92e233d60e01b815260040160405180910390fd5b611fa2338484612f8b565b50600192915050565b6000611fb681612ccc565b601785905560188490556019839055601a80546001600160a01b0319166001600160a01b0384161790556040517f94aff052e386f7223093efb6183667af7a14a6d206ce5e9c66a9c064ebe94528906120169087908790879087906155d1565b60405180910390a15050505050565b6000610c1f826001612a5a565b600080600080516020615e0f83398151915261204d81612ccc565b612055612a01565b6001600160a01b0384166000908152601b6020526040812054900361208f578360405163489d081b60e11b8152600401610e65919061533a565b612097613f07565b6000806120a386613f37565b9150915060006120b487848461406b565b905060006120cd8484846000015185604001518c61427b565b90506000806120dd83858861438f565b915091506120eb8282614526565b6001600160a01b038a166000818152601b60205260408082204260018201556002015490860151600080516020615eaf833981519152928a928a9290916121329190612a5a565b61214989602001518a60400151611806919061596a565b8a6020015160405161216096959493929190615ae2565b60405180910390a25093965091945050505061217b60018055565b50915091565b600080516020615e4f83398151915261219981612ccc565b610d6c826000612cd9565b60006121af81612ccc565b601354600160b81b900460ff1615156001036121de5760405163036882cf60e41b815260040160405180910390fd5b600d546001600160a01b031615612208576040516364b9991160e11b815260040160405180910390fd5b6007829055604051828152600080516020615def83398151915290602001611090565b600061223681612ccc565b601354600160c01b900460ff1615156001036122645760405162dc149f60e41b815260040160405180910390fd5b333b1561228257601180546001600160a01b031916331790556122b8565b601180546001600160a01b03199081169091556013805461027160a31b61ffff60a01b1990911617905560128054909116331790555b600c80546001600160a01b0319166001600160a01b0384161790556301e185588911156122f85760405163fdfbb0b760e01b815260040160405180910390fd5b60088990556013805460ff60c81b1916600160c81b60ff8a811682029290921792839055610100920416106123405760405163e236476560e01b815260040160405180910390fd5b601380546001600160a01b0319166001600160a01b038a161790556014612368868883615b6e565b506015612376848683615b6e565b5061238260003361308a565b61239a600080516020615e4f8339815191523361308a565b6123b2600080516020615e0f8339815191523361308a565b6123ca600080516020615f0f8339815191523361308a565b600080516020615f2f83398151915286866040516123e9929190615c2d565b60408051918290038220828201825260058352640312e302e360dc1b6020938401528151928301939093528101919091527f06c015bd22b4c69690933c1058878ebdfef31f9aaae40bbe86d8a09fe1b2972c60608201524660808201523060a082015260c00160408051601f19818403018152919052805160209091012060025550506013805460ff60c01b1916600160c01b17905550505050505050565b6000806124948361355c565b9050610d42816000612c1e565b6000610c1f826000612c1e565b60006001600160a01b0388166124d75760405163d92e233d60e01b815260040160405180910390fd5b428510156124f8576040516363bef56160e11b815260040160405180910390fd5b6001600160a01b038881166000818152601e60209081526040808320548151600080516020615ecf8339815191528185015280830195909552948c166060850152608084018b905260a0840185905260c08085018b90528151808603909101815260e08501909152805191012060025461190160f01b6101008501526101028401526101228301819052916101420160408051601f198184030181528282528051602091820120600080855291840180845281905260ff8b169284019290925260608301899052608083018890529092509060019060a0016020604051602081039080840390855afa1580156125f2573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116158061262757508b6001600160a01b0316816001600160a01b031614155b156126475780604051633934136760e01b8152600401610e65919061533a565b6126528c8c8c612b8d565b506001600160a01b038c166000908152601e6020526040812080549161267783615993565b91905055508a6001600160a01b03168c6001600160a01b0316600080516020615eef8339815191528c6040516126af91815260200190565b60405180910390a35060019b9a5050505050505050505050565b6126d282610fe4565b6126db81612ccc565b6110b883836134f7565b60006126ef612a01565b60006126fc886001612c1e565b90506127403388888b858a8a8a80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250612af092505050565b509050610c8c60018055565b6000610be9613aca565b6001600160a01b039182166000908152601d6020908152604080832093909416825291909152205490565b600061278c81612ccc565b6301e185588211156127b15760405163fdfbb0b760e01b815260040160405180910390fd5b816000036127dd57306000818152601c60205260409020546127d2916145c7565b6000600a8190556009555b60088290556040518281527fc464d502702beac6615fdfda7756f59ccaf253cb2591db454c8def44d03bddd990602001611090565b600061281d81612ccc565b601354600160b81b900460ff16151560010361284c5760405163036882cf60e41b815260040160405180910390fd5b6013805460ff60b81b1916600160b81b179055600d546001600160a01b0316156128a857600d80546001600160a01b0319169055604051600080516020615e2f8339815191529061289f9060009061533a565b60405180910390a15b60006007819055604051908152600080516020615def8339815191529060200160405180910390a16128e8600080516020615e4f8339815191523361308a565b6040517f4426aa1fb73e391071491fcfe21a88b5c38a0a0333a1f6e77161470439704cf890600090a150565b600080516020615e4f83398151915261292c81612ccc565b6001600160a01b0383166000908152601b60205260408120549003612966578260405163489d081b60e11b8152600401610e65919061533a565b6001600160a01b0383166000818152601b6020526040908190206003018490555133907fb3eef2123fec1523a6bbc90aceb203000154c1a4974335fe06b544c7534d4b89906129b89086815260200190565b60405180910390a3505050565b601681815481106129d557600080fd5b6000918252602090912001546001600160a01b0316905081565b6000600454600554610be9919061596a565b600260015403612a535760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610e65565b6002600155565b6000600019831480612a6a575082155b15612a76575081610c1f565b6000612a80612f0f565b905080600003612a935783915050610c1f565b6000612a9d6129ef565b612aa79086615916565b90506000612ab58383615943565b90506001856001811115612acb57612acb6158a9565b148015612ae05750612add8383615c3d565b15155b156116cb57610c8c60018261596a565b6000612afe87878686614698565b612b0986898661475a565b600080612b16878561477e565b91509150612b298989888a86868b614e1f565b876001600160a01b0316896001600160a01b03168b6001600160a01b03167ffbde797d201c681b91056529119e0b02407c7bb96a4a2c75c01fc9667232c8db858a604051612b789291906156a2565b60405180910390a45098975050505050505050565b60006001600160a01b0384161580612bac57506001600160a01b038316155b15612bca5760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b038481166000818152601d60209081526040808320948816808452948252918290208690559051858152600080516020615eef833981519152910160405180910390a35060019392505050565b6000600019831480612c2e575082155b15612c3a575081610c1f565b6000612c44612f0f565b90506000612c506129ef565b905080600003612c775781600003612c6c578492505050610c1f565b600092505050610c1f565b6000612c838387615916565b90506000612c918383615943565b90506001866001811115612ca757612ca76158a9565b148015612cbc5750612cb98383615c3d565b15155b15610c8c5761113460018261596a565b612cd68133614eab565b50565b6001600160a01b0382166000908152601b60205260408120549003612d13578160405163489d081b60e11b8152600401610e65919061533a565b6001600160a01b0382166000908152601b602052604081206002015415801590612d3b575081155b15612d7a576001600160a01b0383166000908152601b6020526040908190206002015490516357d8a97560e11b81526004810191909152602401610e65565b506001600160a01b0382166000908152601b60205260408120600201546004805491928392612daa908490615957565b92505081905550826001600160a01b0316600080516020615eaf833981519152600083600080600080604051612de596959493929190615ae2565b60405180910390a2604080516080810182526000808252602080830182815283850183815260608086018581526001600160a01b038b168652601b9094529590932093518455516001840155905160028301555160039091015560165415612ed35760005b601654811015612ed157600060168281548110612e6957612e6961597d565b6000918252602090912001546001600160a01b03908116915086168114612ebe5780838381518110612e9d57612e9d61597d565b60200260200101906001600160a01b031690816001600160a01b0316815250505b5080612ec981615993565b915050612e4a565b505b8051612ee69060169060208401906152af565b50836001600160a01b0316600080516020615e6f8339815191526001604051610f7891906158bf565b6000612f19613aca565b600354610be99190615957565b6001600160a01b038084166000908152601d602090815260408083209386168352929052205481811015612f7057604051631649cee760e01b815260048101829052602401610e65565b612f848484612f7f8585615957565b612b8d565b5050505050565b6001600160a01b0383166000908152601c602052604090205481811015612fc55760405163356680b760e01b815260040160405180910390fd5b6001600160a01b0384161580612fe257506001600160a01b038316155b156130005760405163d92e233d60e01b815260040160405180910390fd5b61300a8282615957565b6001600160a01b038086166000908152601c60205260408082209390935590851681522054613039838261596a565b6001600160a01b038086166000818152601c60205260409081902093909355915190871690600080516020615e8f8339815191529061307b9087815260200190565b60405180910390a35050505050565b613094828261179a565b610d6c576000828152602081815260408083206001600160a01b03851684529091529020805460ff191660011790556130ca3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6001600160a01b0383166000908152601c602052604081205481906131339082612a5a565b600e549091506001600160a01b0316156131d357600e54604051632319b8cf60e01b81526000916001600160a01b031690632319b8cf9061317c90899089908990600401615c51565b602060405180830381865afa158015613199573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131bd91906158e7565b9050818110156131cb578091505b509050610d42565b600554808211156134d857835181906000908190158015906131ff5750601354600160b01b900460ff16155b61326357601680548060200260200160405190810160405280929190818152602001828054801561325957602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161323b575b5050505050613265565b865b905060005b81518110156134d15760008282815181106132875761328761597d565b60200260200101519050601b6000826001600160a01b03166001600160a01b03168152602001908152602001600020600001546000036132dc578060405163489d081b60e11b8152600401610e65919061533a565b600061330c6132eb878a615957565b6001600160a01b0384166000908152601b60205260409020600201546134e1565b9050600061331a83836137e0565b90506000836001600160a01b03166307a2d13a856001600160a01b031663d905777e306040518263ffffffff1660e01b8152600401613359919061533a565b602060405180830381865afa158015613376573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061339a91906158e7565b6040518263ffffffff1660e01b81526004016133b891815260200190565b602060405180830381865afa1580156133d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133f991906158e7565b90506134058284615957565b81101561343057826134178284615916565b6134219190615943565b915061342d828261596a565b92505b8260000361344157505050506134bf565b60008211801561345257506127108d105b15613492576127108d613465858b61596a565b61346f9190615916565b6134799190615943565b613483838961596a565b111561349257505050506134d1565b61349c838961596a565b97508988106134ae57505050506134d1565b6134b8828861596a565b9650505050505b806134c981615993565b91505061326a565b5091935050505b50949350505050565b60008183106134f05781610d42565b5090919050565b613501828261179a565b15610d6c576000828152602081815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60006001600160a01b03821630148061357c57506001600160a01b038216155b1561358957506000919050565b600d546001600160a01b0316801561360857604051632355178960e11b81526001600160a01b038216906346aa2f12906135c790869060040161533a565b602060405180830381865afa1580156135e4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d4291906158e7565b60006136126129ef565b60075490915080821061362a57506000949350505050565b6116cb8282615957565b6001600160a01b038416158061365157506001600160a01b038316155b8061366357506001600160a01b038216155b156136815760405163d92e233d60e01b815260040160405180910390fd5b6040516323b872dd60e01b81526001600160a01b038516906323b872dd906136b190869086908690600401615cb4565b6020604051808303816000875af11580156136d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136f49190615cd8565b61371157604051633c9fd93960e21b815260040160405180910390fd5b50505050565b6001600160a01b038316158061373457506001600160a01b038216155b156137525760405163d92e233d60e01b815260040160405180910390fd5b60405163a9059cbb60e01b81526001600160a01b0384169063a9059cbb906137809085908590600401615cf5565b6020604051808303816000875af115801561379f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137c39190615cd8565b6110b857604051633c9fd93960e21b815260040160405180910390fd5b6001600160a01b0382166000818152601b60205260408082206002015490516370a0823160e01b8152919290918391906370a082319061382490309060040161533a565b602060405180830381865afa158015613841573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061386591906158e7565b6040516303d1689d60e11b8152600481018290529091506000906001600160a01b038716906307a2d13a90602401602060405180830381865afa1580156138b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138d491906158e7565b905082811015806138e3575082155b156138f45760009350505050610c1f565b60006139008287615916565b9050600061390e8583615943565b6139189088615957565b90506139248583615c3d565b156111345761393460018261596a565b98975050505050505050565b601354600090600160b81b900460ff1615156001036139725760405163036882cf60e41b815260040160405180910390fd5b61397b8361355c565b8211156139a75761398b8361355c565b604051630ee7300760e11b8152600401610e6591815260200190565b816000036139c857604051637c946ed760e01b815260040160405180910390fd5b6013546040516323b872dd60e01b81526001600160a01b03909116906323b872dd906139fc90339030908790600401615cb4565b6020604051808303816000875af1158015613a1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a3f9190615cd8565b508160056000828254613a52919061596a565b9091555060009050613a648385614f04565b905080600003613a8757604051637c946ed760e01b815260040160405180910390fd5b836001600160a01b0316856001600160a01b0316600080516020615f4f8339815191528584604051613aba9291906156a2565b60405180910390a3949350505050565b6009546000908142821115613b0b5764e8d4a51000600b5442613aed9190615957565b600a54613afa9190615916565b613b049190615943565b9050610c1f565b8115610c1f5750306000908152601c602052604090205492915050565b601354600090600160b81b900460ff161515600103613b5a5760405163036882cf60e41b815260040160405180910390fd5b6000613b67836001612a5a565b905080600003613b8a57604051637c946ed760e01b815260040160405180910390fd5b613b938461355c565b811115613ba35761398b8461355c565b6013546040516323b872dd60e01b81526001600160a01b03909116906323b872dd90613bd790889030908690600401615cb4565b6020604051808303816000875af1158015613bf6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c1a9190615cd8565b508060056000828254613c2d919061596a565b90915550613c3d90508385614fb6565b836001600160a01b0316856001600160a01b0316600080516020615f4f8339815191528386604051613aba9291906156a2565b604051630a28a47760e01b815260048101829052600090613d52906001600160a01b03851690630a28a47790602401602060405180830381865afa158015613cbc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ce091906158e7565b6040516370a0823160e01b81526001600160a01b038616906370a0823190613d0c90309060040161533a565b602060405180830381865afa158015613d29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d4d91906158e7565b6134e1565b604051635d043b2960e11b815260048101829052306024820181905260448201529091506001600160a01b0384169063ba087652906064016020604051808303816000875af1158015613da9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061371191906158e7565b6001600160a01b0383161580613dea57506001600160a01b038216155b15613e085760405163d92e233d60e01b815260040160405180910390fd5b60405163095ea7b360e01b81526001600160a01b0384169063095ea7b390613e369085908590600401615cf5565b6020604051808303816000875af1158015613e55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e799190615cd8565b6110b857604051631946df2360e31b815260040160405180910390fd5b604051636e553f6560e01b8152600481018290523060248201526001600160a01b03831690636e553f65906044016020604051808303816000875af1158015613ee3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110b891906158e7565b6000613f11613aca565b905080600003613f1e5750565b426009541115613f2d5742600b555b612cd681306145c7565b6000806000836001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401613f68919061533a565b602060405180830381865afa158015613f85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613fa991906158e7565b6040516303d1689d60e11b8152600481018290529091506000906001600160a01b038616906307a2d13a90602401602060405180830381865afa158015613ff4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061401891906158e7565b6001600160a01b0386166000908152601b602052604081206002015491925080828411156140515761404a8385615957565b915061405e565b61405b8484615957565b90505b9097909650945050505050565b61407361527e565b600c546001600160a01b03161561424357604080516080810182526000808252602082018190528183018190526060820152600c54915163921f8a8f60e01b81526001600160a01b03878116600483015260248201879052604482018690529192919091169063921f8a8f9060640160408051808303816000875af1158015614100573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141249190615d0e565b60208301528082521561423c576011546000906001600160a01b031661416957506013546012546001600160a01b03166060830152600160a01b900461ffff166141e5565b601154604080516307d3277f60e01b815281516001600160a01b03909316926307d3277f926004808401939192918290030181865afa1580156141b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141d49190615d32565b6001600160a01b0316606084015290505b61ffff8116156131cb576127108161ffff16111561421657604051635ff85e3f60e01b815260040160405180910390fd5b81516127109061422b9061ffff841690615916565b6142359190615943565b6040830152505b9050610d42565b50604080516080810182526017548152601854602082015260195491810191909152601a546001600160a01b03166060820152610d42565b614283615304565b61428b615304565b6001600160a01b0383166000908152601b602052604090206002015487156142d8576142c0846142bb8a8461596a565b61504f565b87600460008282546142d2919061596a565b90915550505b8615614304576142ec846142bb8984615957565b86600460008282546142fe9190615957565b90915550505b6000614310878961596a565b11156143845761432a614323878961596a565b6001612c1e565b8251839061433990839061596a565b90525085156143845761435661434f8688615957565b6000612c1e565b6020830152841561438457600061436d8987615916565b905061437d61434f606483615943565b6040840152505b509695505050505050565b6000806000808560200151111561441d576020850151600c546143d99190613d4d906143c3906001600160a01b03166116f4565b600c54613d4d906001600160a01b031630612756565b60208601819052601354600c54614401926001600160a01b0392831692909116903090613634565b846020015160056000828254614417919061596a565b90915550505b600085602001518561442f919061596a565b11801561443d575060085415155b1561445e5761445b856020015185614455919061596a565b30614f04565b90505b306000908152601c6020526040812054614479908390615957565b8751909150156144da57865161449390613d4d848461596a565b8088526144a090306145c7565b60006144b08860000151846134e1565b90506144bc8184615957565b88519093506144cc908290615957565b6144d69083615957565b9150505b6020870151156144ff576020870151600c546144ff91906001600160a01b0316614fb6565b60408701511561451b5761451b87604001518760600151614fb6565b969095509350505050565b6000614532828461596a565b905080156145bd57600042600954111561456157426009546145549190615957565b61455e9085615916565b90505b600082600854856145729190615916565b61457c908461596a565b6145869190615943565b90508061459864e8d4a5100085615916565b6145a29190615943565b600a556145af814261596a565b600955505042600b55505050565b6000600a55505050565b6001600160a01b0381166000908152601c602052604090205482111561461e576001600160a01b0381166000908152601c6020526040908190205490516307f885ff60e21b81526004810191909152602401610e65565b6001600160a01b0381166000908152601c602052604081208054849290614646908490615957565b92505081905550816003600082825461465f9190615957565b90915550506040518281526000906001600160a01b03831690600080516020615e8f833981519152906020015b60405180910390a35050565b6001600160a01b0384166146bf5760405163d92e233d60e01b815260040160405180910390fd5b6127108111156146e257604051631a7ed0a160e31b815260040160405180910390fd5b8160000361470357604051637c946ed760e01b815260040160405180910390fd5b6001600160a01b0383166000908152601c6020526040902054821115613711576001600160a01b0383166000908152601c6020526040908190205490516307f885ff60e21b81526004810191909152602401610e65565b826001600160a01b0316826001600160a01b0316146110b8576110b8838383612f26565b6040805160c0810182528381526005546020820152600480548284015260006060830181905260135493516370a0823160e01b8152909384938493909260808401926001600160a01b0316916370a08231916147dc9130910161533a565b602060405180830381865afa1580156147f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061481d91906158e7565b8152600060209182015281015181519192501015614e0a576060600085516000141580156148555750601354600160b01b900460ff16155b15614865575050835184906148c3565b60168054806020026020016040519081016040528092919081815260200182805480156148bb57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161489d575b505050505091505b602083015183516148d49190615957565b606084015260005b8251811015614dcf5760008382815181106148f9576148f961597d565b6020908102919091018101516001600160a01b0381166000908152601b909252604082205490925090819003614944578160405163489d081b60e11b8152600401610e65919061533a565b6001600160a01b0382166000908152601b6020526040812060020154606088015190919061497290836134e1565b90506000846001600160a01b03166307a2d13a866001600160a01b031663d905777e306040518263ffffffff1660e01b81526004016149b1919061533a565b602060405180830381865afa1580156149ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906149f291906158e7565b6040518263ffffffff1660e01b8152600401614a1091815260200190565b602060405180830381865afa158015614a2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614a5191906158e7565b90506000614a5f86846137e0565b90508015614b5857614a718184615957565b821015614aab576000614a848285615957565b905080614a918484615916565b614a9b9190615943565b9150614aa7828461596a565b9350505b614ab58184615957565b9250808a600001818151614ac99190615957565b90525060608a018051829190614ae0908390615957565b90525060408a018051829190614af7908390615957565b90525081158015614b085750600081115b15614b58576000614b198286615957565b9050614b25878261504f565b866001600160a01b0316600080516020615f6f8339815191528683604051614b4e9291906156a2565b60405180910390a2505b614b6283836134e1565b925082600003614b7757505050505050614dbd565b614b818684613c70565b6013546040516370a0823160e01b81526000916001600160a01b0316906370a0823190614bb290309060040161533a565b602060405180830381865afa158015614bcf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190614bf391906158e7565b905060008b6080015182614c079190615957565b9050600085821115614c3e5786821115614c2357869550614c53565b614c2d8683615957565b614c37908761596a565b9550614c53565b85821015614c5357614c508287615957565b90505b80868e60200151614c64919061596a565b614c6e9190615957565b600003614c8157600060208e0152614ca0565b614c8b8187615957565b8d602001818151614c9c919061596a565b9052505b8c51614cad908290615957565b600003614cbd5760008d52614cd3565b808d600001818151614ccf9190615957565b9052505b858d60400151614ce39190615957565b600003614cf657600060408e0152614d0c565b858d604001818151614d089190615957565b9052505b6000614d18858861596a565b881015614d2757506000614d3e565b614d31858861596a565b614d3b9089615957565b90505b614d488a8261504f565b896001600160a01b0316600080516020615f6f8339815191528983604051614d719291906156a2565b60405180910390a260208e01518e5111614d945750505050505050505050614dcf565b60808e0184905260608e018051889190614daf908390615957565b905250505050505050505050505b80614dc781615993565b9150506148dc565b50825160208401511015614dff576020830151835160405163b97fded160e01b8152610e659291906004016156a2565b505060408101516004555b805160209091015190925090505b9250929050565b8284118015614e2f575061271081105b15614e7457612710614e418286615916565b614e4b9190615943565b614e558486615957565b1115614e74576040516307f65e3960e11b815260040160405180910390fd5b614e7e85876145c7565b614e888383615957565b600555601354614ea2906001600160a01b03168885613717565b50505050505050565b614eb5828261179a565b610d6c57614ec28161506e565b614ecd836020615080565b604051602001614ede929190615d68565b60408051601f198184030181529082905262461bcd60e51b8252610e6591600401615470565b60006001600160a01b038216614f2d5760405163d92e233d60e01b815260040160405180910390fd5b6000614f37612f0f565b90506000614f436129ef565b9050600082600003614f56575084614f9c565b85821115614f8357614f688683615957565b614f728488615916565b614f7c9190615943565b9050614f9c565b60405163fd7850ad60e01b815260040160405180910390fd5b80600003614fb05760009350505050610c1f565b6116cb81865b6001600160a01b038116614fdd5760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b0381166000908152601c60205260408120805484929061500590849061596a565b92505081905550816003600082825461501e919061596a565b90915550506040518281526001600160a01b03821690600090600080516020615e8f8339815191529060200161468c565b6001600160a01b039091166000908152601b6020526040902060020155565b6060610c1f6001600160a01b03831660145b6060600061508f836002615916565b61509a90600261596a565b6001600160401b038111156150b1576150b1615b0a565b6040519080825280601f01601f1916602001820160405280156150db576020820181803683370190505b509050600360fc1b816000815181106150f6576150f661597d565b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106151255761512561597d565b60200101906001600160f81b031916908160001a9053506000615149846002615916565b61515490600161596a565b90505b60018111156151cc576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106151885761518861597d565b1a60f81b82828151811061519e5761519e61597d565b60200101906001600160f81b031916908160001a90535060049490941c936151c581615dd7565b9050615157565b508315610d425760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610e65565b82805482825590600052602060002090810192821561526e579160200282015b8281111561526e5781546001600160a01b0319166001600160a01b0384351617825560209092019160019091019061523b565b5061527a929150615325565b5090565b604051806080016040528060008152602001600081526020016000815260200160006001600160a01b031681525090565b82805482825590600052602060002090810192821561526e579160200282015b8281111561526e57825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906152cf565b60405180606001604052806000815260200160008152602001600081525090565b5b8082111561527a5760008155600101615326565b6001600160a01b0391909116815260200190565b60006020828403121561536057600080fd5b81356001600160e01b031981168114610d4257600080fd5b6001600160a01b0381168114612cd657600080fd5b60008083601f84011261539f57600080fd5b5081356001600160401b038111156153b657600080fd5b6020830191508360208260051b8501011115614e1857600080fd5b60008060008060008060a087890312156153ea57600080fd5b8635955060208701356153fc81615378565b9450604087013561540c81615378565b93506060870135925060808701356001600160401b0381111561542e57600080fd5b61543a89828a0161538d565b979a9699509497509295939492505050565b60005b8381101561546757818101518382015260200161544f565b50506000910152565b602081526000825180602084015261548f81604085016020870161544c565b601f01601f19169190910160400192915050565b6000602082840312156154b557600080fd5b5035919050565b600080604083850312156154cf57600080fd5b82356154da81615378565b946020939093013593505050565b6000602082840312156154fa57600080fd5b8135610d4281615378565b60008060006060848603121561551a57600080fd5b833561552581615378565b9250602084013561553581615378565b929592945050506040919091013590565b6000806040838503121561555957600080fd5b82359150602083013561556b81615378565b809150509250929050565b6000806000806060858703121561558c57600080fd5b843561559781615378565b93506020850135925060408501356001600160401b038111156155b957600080fd5b6155c58782880161538d565b95989497509550505050565b938452602084019290925260408301526001600160a01b0316606082015260800190565b6000806020838503121561560857600080fd5b82356001600160401b0381111561561e57600080fd5b61562a8582860161538d565b90969095509350505050565b8015158114612cd657600080fd5b60006020828403121561565657600080fd5b8135610d4281615636565b6000806000806080858703121561567757600080fd5b843593506020850135925060408501359150606085013561569781615378565b939692955090935050565b918252602082015260400190565b803560ff811681146156c157600080fd5b919050565b60008083601f8401126156d857600080fd5b5081356001600160401b038111156156ef57600080fd5b602083019150836020828501011115614e1857600080fd5b60008060008060008060008060c0898b03121561572357600080fd5b88359750602089013561573581615378565b965061574360408a016156b0565b955060608901356001600160401b038082111561575f57600080fd5b61576b8c838d016156c6565b909750955060808b013591508082111561578457600080fd5b506157918b828c016156c6565b90945092505060a08901356157a581615378565b809150509295985092959890939650565b600080600080600080600060e0888a0312156157d157600080fd5b87356157dc81615378565b965060208801356157ec81615378565b95506040880135945060608801359350615808608089016156b0565b925060a0880135915060c0880135905092959891949750929550565b6000806040838503121561583757600080fd5b823561584281615378565b9150602083013561556b81615378565b600181811c9082168061586657607f821691505b60208210810361588657634e487b7160e01b600052602260045260246000fd5b50919050565b60006020828403121561589e57600080fd5b8151610d4281615378565b634e487b7160e01b600052602160045260246000fd5b60208101600283106158e157634e487b7160e01b600052602160045260246000fd5b91905290565b6000602082840312156158f957600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610c1f57610c1f615900565b634e487b7160e01b600052601260045260246000fd5b6000826159525761595261592d565b500490565b81810381811115610c1f57610c1f615900565b80820180821115610c1f57610c1f615900565b634e487b7160e01b600052603260045260246000fd5b6000600182016159a5576159a5615900565b5060010190565b60208082528181018390526000908460408401835b868110156143845782356159d481615378565b6001600160a01b0316825291830191908301906001016159c1565b600181815b80851115615a2a578160001904821115615a1057615a10615900565b80851615615a1d57918102915b93841c93908002906159f4565b509250929050565b600082615a4157506001610c1f565b81615a4e57506000610c1f565b8160018114615a645760028114615a6e57615a8a565b6001915050610c1f565b60ff841115615a7f57615a7f615900565b50506001821b610c1f565b5060208310610133831016604e8410600b8410161715615aad575081810a610c1f565b615ab783836159ef565b8060001904821115615acb57615acb615900565b029392505050565b6000610d4260ff841683615a32565b958652602086019490945260408501929092526060840152608083015260a082015260c00190565b634e487b7160e01b600052604160045260246000fd5b601f8211156110b857600081815260208120601f850160051c81016020861015615b475750805b601f850160051c820191505b81811015615b6657828155600101615b53565b505050505050565b6001600160401b03831115615b8557615b85615b0a565b615b9983615b938354615852565b83615b20565b6000601f841160018114615bcd5760008515615bb55750838201355b600019600387901b1c1916600186901b178355612f84565b600083815260209020601f19861690835b82811015615bfe5786850135825560209485019460019092019101615bde565b5086821015615c1b5760001960f88860031b161c19848701351681555b505060018560011b0183555050505050565b8183823760009101908152919050565b600082615c4c57615c4c61592d565b500690565b6001600160a01b038481168252602080830185905260606040840181905284519084018190526000928583019290916080860190855b81811015615ca5578551851683529483019491830191600101615c87565b50909998505050505050505050565b6001600160a01b039384168152919092166020820152604081019190915260600190565b600060208284031215615cea57600080fd5b8151610d4281615636565b6001600160a01b03929092168252602082015260400190565b60008060408385031215615d2157600080fd5b505080516020909101519092909150565b60008060408385031215615d4557600080fd5b825161ffff81168114615d5757600080fd5b602084015190925061556b81615378565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b815260008351615d9a81601785016020880161544c565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351615dcb81602884016020880161544c565b01602801949350505050565b600081615de657615de6615900565b50600019019056fed5c8971839cd457e3e7008c5010f80fdfb8dbe466e9eff20c25d5d7c1e93d3fb633076a97f32ae349b28772e7b1483f67a926f150cbc501d02bdbd77389325ab1e92f04e56f08d7fc631d317720ce6c1392414dbf052f01c99b4d50ccc494c091893e1a169e79f2fe8aa327b1bceb2fede7a1b76a54824f95ea0e737720954aebcf55f13710eed7eda89416c2984da5475fcff67e96fe85e56eed808559a5222ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef7f2ad1d3ba35276f35ef140f83e3e0f17b23064fd710113d3f7a5ab30d2678116e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925900d80def0427daac599092fcb16b21808ec68dd9a2e1eae89d1e8db213573758b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400fdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d75e2b8821ad6e0e26207e0cb4d242d07eeb1cbb1cfd853e645bdcd27cc5484f95a264697066735822122037ac3d79d54dffba255ea4d20d41c07b9ff2edd592ce40b8311d8410f7601c5f64736f6c63430008130033",
    "devdoc": {
      "events": {
        "Approval(address,address,uint256)": {
          "details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
        },
        "RoleAdminChanged(bytes32,bytes32,bytes32)": {
          "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this. _Available since v3.1._"
        },
        "RoleGranted(bytes32,address,address)": {
          "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
        },
        "RoleRevoked(bytes32,address,address)": {
          "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
        },
        "Transfer(address,address,uint256)": {
          "details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
        }
      },
      "kind": "dev",
      "methods": {
        "addStrategy(address)": {
          "params": {
            "newStrategy": "The new strategy to add."
          }
        },
        "allowance(address,address)": {
          "params": {
            "owner": "The address that owns the shares.",
            "spender": "The address that is allowed to spend the shares."
          }
        },
        "approve(address,uint256)": {
          "params": {
            "amount": "The amount of shares to approve.",
            "spender": "The address to approve."
          },
          "returns": {
            "_0": "True if the approval was successful."
          }
        },
        "assessShareOfUnrealisedLosses(address,uint256)": {
          "params": {
            "assetsNeeded": "The amount of assets needed by the strategy.",
            "strategy": "The strategy to assess the share of unrealised losses for."
          }
        },
        "asset()": {
          "returns": {
            "_0": "The address of the asset."
          }
        },
        "balanceOf(address)": {
          "params": {
            "addr": "The address to get the balance of."
          },
          "returns": {
            "_0": "The balance of the user."
          }
        },
        "buyDebt(address,uint256)": {
          "details": "This should only ever be used in an emergency in place of force revoking a strategy in order to not report a loss. It allows the DEBT_PURCHASER role to buy the strategies debt for an equal amount of `asset`.",
          "params": {
            "amount": "The amount of debt to buy from the vault.",
            "strategy": "The strategy to buy the debt for"
          }
        },
        "convertToAssets(uint256)": {
          "params": {
            "shares": "The amount of shares to convert."
          },
          "returns": {
            "_0": "The amount of assets."
          }
        },
        "convertToShares(uint256)": {
          "params": {
            "assets": "The amount of assets to convert."
          },
          "returns": {
            "_0": "The amount of shares."
          }
        },
        "decimals()": {
          "returns": {
            "_0": "The number of decimals of the asset/share."
          }
        },
        "deposit(uint256,address)": {
          "params": {
            "assets": "The amount of assets to deposit.",
            "receiver": "The address to receive the shares."
          },
          "returns": {
            "_0": "The amount of shares minted."
          }
        },
        "fees()": {
          "returns": {
            "_0": "The vault's fees."
          }
        },
        "forceRevokeStrategy(address)": {
          "details": "The vault will remove the strategy and write off any debt left in it as a loss. This function is a dangerous function as it can force a strategy to take a loss. All possible assets should be removed from the strategy first via update_debt. If a strategy is removed erroneously it can be re-added and the loss will be credited as profit. Fees will apply.",
          "params": {
            "strategy": "The strategy to force revoke."
          }
        },
        "getDebt(address)": {
          "params": {
            "strategy": "The strategy to withdraw from."
          }
        },
        "getRoleAdmin(bytes32)": {
          "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
        },
        "grantRole(bytes32,address)": {
          "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
        },
        "hasRole(bytes32,address)": {
          "details": "Returns `true` if `account` has been granted `role`."
        },
        "maxDeposit(address)": {
          "params": {
            "receiver": "The address that will receive the shares."
          },
          "returns": {
            "_0": "The maximum amount of assets that can be deposited."
          }
        },
        "maxMint(address)": {
          "params": {
            "receiver": "The address that will receive the shares."
          },
          "returns": {
            "_0": "The maximum amount of shares that can be minted."
          }
        },
        "maxRedeem(address,uint256,address[])": {
          "details": "Complies to normal 4626 interface and takes custom params.",
          "params": {
            "_strategies": "Custom strategies queue if any.",
            "maxLoss": "Custom maxLoss if any.",
            "owner": "The address that owns the shares."
          },
          "returns": {
            "_0": "The maximum amount of shares that can be redeemed."
          }
        },
        "maxWithdraw(address,uint256,address[])": {
          "details": "Complies to normal 4626 interface and takes custom params.",
          "params": {
            "_strategies": "Custom strategies queue if any.",
            "maxLoss": "Custom maxLoss if any.",
            "owner": "The address that owns the shares."
          },
          "returns": {
            "_0": "The maximum amount of assets that can be withdrawn."
          }
        },
        "mint(uint256,address)": {
          "params": {
            "receiver": "The address to receive the shares.",
            "shares": "The amount of shares to mint."
          },
          "returns": {
            "_0": "The amount of assets deposited."
          }
        },
        "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
          "params": {
            "amount": "The amount of shares to approve.",
            "deadline": "The deadline for the permit.",
            "owner": "The address to approve.",
            "r": "The r component of the signature.",
            "s": "The s component of the signature.",
            "spender": "The address to approve.",
            "v": "The v component of the signature."
          },
          "returns": {
            "_0": "True if the approval was successful."
          }
        },
        "previewDeposit(uint256)": {
          "params": {
            "assets": "The amount of assets to deposit."
          },
          "returns": {
            "_0": "The amount of shares that would be minted."
          }
        },
        "previewMint(uint256)": {
          "params": {
            "shares": "The amount of shares to mint."
          },
          "returns": {
            "_0": "The amount of assets that would be deposited."
          }
        },
        "previewRedeem(uint256)": {
          "params": {
            "shares": "The amount of shares to redeem."
          },
          "returns": {
            "_0": "The amount of assets that would be withdrawn."
          }
        },
        "previewWithdraw(uint256)": {
          "params": {
            "assets": "The amount of assets to withdraw."
          },
          "returns": {
            "_0": "The amount of shares that would be redeemed."
          }
        },
        "pricePerShare()": {
          "details": "This value offers limited precision. Integrations that require exact precision should use convertToAssets or convertToShares instead.",
          "returns": {
            "_0": "The price per share."
          }
        },
        "processReport(address)": {
          "details": "Processing a report means comparing the debt that the strategy has taken with the current amount of funds it is reporting. If the strategy owes less than it currently has, it means it has had a profit, else (assets < debt) it has had a loss. Different strategies might choose different reporting strategies: pessimistic, only realised P&L, ... The best way to report depends on the strategy. The profit will be distributed following a smooth curve over the vaults profitMaxUnlockTime seconds. Losses will be taken immediately, first from the profit buffer (avoiding an impact in pps), then will reduce pps. Any applicable fees are charged and distributed during the report as well to the specified recipients.",
          "params": {
            "strategy": "The strategy to process the report for."
          },
          "returns": {
            "_0": "The gain and loss of the strategy."
          }
        },
        "redeem(uint256,address,address,uint256,address[])": {
          "details": "The default behavior is to allow losses to be realized.",
          "params": {
            "_strategies": "Optional array of strategies to withdraw from.",
            "maxLoss": "Optional amount of acceptable loss in Basis Points.",
            "owner": "The address who's shares are being burnt.",
            "receiver": "The address to receive the assets.",
            "shares": "The amount of shares to burn."
          },
          "returns": {
            "_0": "The amount of assets actually withdrawn."
          }
        },
        "renounceRole(bytes32,address)": {
          "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
        },
        "revokeRole(bytes32,address)": {
          "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
        },
        "revokeStrategy(address)": {
          "params": {
            "strategy": "The strategy to revoke."
          }
        },
        "setAccountant(address)": {
          "params": {
            "newAccountant": "The new accountant address."
          }
        },
        "setDefaultQueue(address[])": {
          "details": "Will check each strategy to make sure it is active.",
          "params": {
            "newDefaultQueue": "The new default queue array."
          }
        },
        "setDepositLimit(uint256)": {
          "details": "Can not be changed if a depositLimitModule is set or if shutdown.",
          "params": {
            "_depositLimit": "The new deposit limit."
          }
        },
        "setDepositLimitModule(address)": {
          "details": "The default `depositLimit` will need to be set to max uint256 since the module will override it.",
          "params": {
            "_depositLimitModule": "Address of the module."
          }
        },
        "setMinimumTotalIdle(uint256)": {
          "params": {
            "_minimumTotalIdle": "The new minimum total idle."
          }
        },
        "setProfitMaxUnlockTime(uint256)": {
          "details": "The time is denominated in seconds and must be less than 1 year.  We only need to update locking period if setting to 0,  since the current period will use the old rate and on the next  report it will be reset with the new unlocking time.  Setting to 0 will cause any currently locked profit to instantly unlock and an immediate increase in the vaults Price Per Share.",
          "params": {
            "_newProfitMaxUnlockTime": "The new profit max unlock time."
          }
        },
        "setUseDefaultQueue(bool)": {
          "details": "If set `True` the default queue will always be used no matter whats passed in.",
          "params": {
            "_useDefaultQueue": "new value."
          }
        },
        "setWithdrawLimitModule(address)": {
          "details": "This will override the default `maxWithdraw`.",
          "params": {
            "_withdrawLimitModule": "Address of the module."
          }
        },
        "supportsInterface(bytes4)": {
          "details": "See {IERC165-supportsInterface}."
        },
        "totalAssets()": {
          "returns": {
            "_0": "The total assets held by the vault."
          }
        },
        "totalSupply()": {
          "returns": {
            "_0": "The total supply of shares."
          }
        },
        "transfer(address,uint256)": {
          "params": {
            "amount": "The amount of shares to transfer.",
            "receiver": "The address to transfer shares to."
          },
          "returns": {
            "_0": "True if the transfer was successful."
          }
        },
        "transferFrom(address,address,uint256)": {
          "params": {
            "amount": "The amount of shares to transfer.",
            "receiver": "The address to transfer shares to.",
            "sender": "The address to transfer shares from."
          },
          "returns": {
            "_0": "True if the transfer was successful."
          }
        },
        "unlockedShares()": {
          "returns": {
            "_0": "The amount of shares that are have been unlocked."
          }
        },
        "updateDebt(address,address,uint256)": {
          "params": {
            "strategy": "The strategy to update the debt for.",
            "targetDebt": "The target debt for the strategy."
          },
          "returns": {
            "_0": "The amount of debt added or removed."
          }
        },
        "updateMaxDebtForStrategy(address,uint256)": {
          "params": {
            "newMaxDebt": "The new max debt for the strategy.",
            "strategy": "The strategy to update the max debt for."
          }
        },
        "withdraw(uint256,address,address,uint256,address[])": {
          "details": "The default behavior is to not allow any loss.",
          "params": {
            "_strategies": "Optional array of strategies to withdraw from.",
            "assets": "The amount of asset to withdraw.",
            "maxLoss": "Optional amount of acceptable loss in Basis Points.",
            "owner": "The address who's shares are being burnt.",
            "receiver": "The address to receive the assets."
          },
          "returns": {
            "_0": "The amount of shares actually burnt."
          }
        }
      },
      "title": "Fathom Vault",
      "version": 1
    },
    "userdoc": {
      "kind": "user",
      "methods": {
        "API_VERSION()": {
          "notice": "The version of this vault."
        },
        "DOMAIN_SEPARATOR()": {
          "notice": "EIP-2612 permit() domain separator."
        },
        "DOMAIN_TYPE_HASH()": {
          "notice": "EIP-2612 permit() typehashes"
        },
        "MAX_BPS()": {
          "notice": "100% in Basis Points."
        },
        "MAX_BPS_EXTENDED()": {
          "notice": "Extended for profit locking calculations."
        },
        "MAX_FEE_BPS()": {
          "notice": "50% in BPS for fees."
        },
        "MAX_QUEUE()": {
          "notice": "The max length the withdrawal queue can be."
        },
        "ONE_YEAR()": {
          "notice": "One year constant for calculating the profit unlocking rate."
        },
        "STRATEGY_MANAGER()": {
          "notice": "Roles"
        },
        "accountant()": {
          "notice": "Contract that charges fees and can give refunds."
        },
        "addStrategy(address)": {
          "notice": "Add a new strategy."
        },
        "allowance(address,address)": {
          "notice": "Get the allowance for a spender."
        },
        "approve(address,uint256)": {
          "notice": "Approve an address to spend the vault's shares."
        },
        "assessShareOfUnrealisedLosses(address,uint256)": {
          "notice": "Assess the share of unrealised losses for a strategy."
        },
        "asset()": {
          "notice": "Get the address of the asset."
        },
        "assetContract()": {
          "notice": "Address of the underlying token used by the vault"
        },
        "balanceOf(address)": {
          "notice": "Get the balance of a user."
        },
        "buyDebt(address,uint256)": {
          "notice": "Used for governance to buy bad debt from the vault."
        },
        "convertToAssets(uint256)": {
          "notice": "Convert an amount of shares to assets."
        },
        "convertToShares(uint256)": {
          "notice": "Convert an amount of assets to shares."
        },
        "customFeeBPS()": {
          "notice": "The custom fee BPS charged for withdrawals."
        },
        "customFeeRecipient()": {
          "notice": "Address of the custom fee recipient."
        },
        "decimals()": {
          "notice": "Get the number of decimals of the asset/share."
        },
        "decimalsValue()": {
          "notice": "The current decimals value of the vault."
        },
        "defaultQueue(uint256)": {
          "notice": "The current default withdrawal queue."
        },
        "deposit(uint256,address)": {
          "notice": "Deposit assets into the vault."
        },
        "depositLimit()": {
          "notice": "Maximum amount of tokens that the vault can accept. If totalAssets > deposit_limit, deposits will revert."
        },
        "depositLimitModule()": {
          "notice": "Contract to control the deposit limit."
        },
        "factoryAddress()": {
          "notice": "Factory address"
        },
        "fees()": {
          "notice": "Get the vault's fees."
        },
        "forceRevokeStrategy(address)": {
          "notice": "Force revoke a strategy."
        },
        "fullProfitUnlockDate()": {
          "notice": "The timestamp of when the current unlocking period ends."
        },
        "futureRoleManager()": {
          "notice": "Temporary variable to store the address of the next role_manager until the role is accepted."
        },
        "getDebt(address)": {
          "notice": "Get debt for a strategy."
        },
        "getDefaultQueueLength()": {
          "notice": "Get default strategy queue length."
        },
        "lastProfitUpdate()": {
          "notice": "Last timestamp of the most recent profitable report."
        },
        "maxDeposit(address)": {
          "notice": "Get the maximum amount of assets that can be deposited."
        },
        "maxMint(address)": {
          "notice": "Get the maximum amount of shares that can be minted."
        },
        "maxRedeem(address,uint256,address[])": {
          "notice": "Get the maximum amount of shares that can be redeemed."
        },
        "maxWithdraw(address,uint256,address[])": {
          "notice": "Get the maximum amount of assets that can be withdrawn."
        },
        "minimumTotalIdle()": {
          "notice": "Minimum amount of assets that should be kept in the vault contract to allow for fast, cheap redeems."
        },
        "mint(uint256,address)": {
          "notice": "Mint shares for the receiver."
        },
        "name()": {
          "notice": "ERC20 - name of the vault's token"
        },
        "nonces(address)": {
          "notice": "EIP-2612 permit() nonces"
        },
        "openRoles(bytes32)": {
          "notice": "HashMap mapping roles to their permissioned state. If false, the role is not open to the public."
        },
        "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
          "notice": "Approve an address to spend the vault's shares."
        },
        "previewDeposit(uint256)": {
          "notice": "Preview the amount of shares that would be minted for a deposit."
        },
        "previewMint(uint256)": {
          "notice": "Preview the amount of assets that would be deposited for a mint."
        },
        "previewRedeem(uint256)": {
          "notice": "Preview the amount of assets that would be withdrawn for a redeem."
        },
        "previewWithdraw(uint256)": {
          "notice": "Preview the amount of shares that would be redeemed for a withdraw."
        },
        "pricePerShare()": {
          "notice": "Get the price per share (pps) of the vault."
        },
        "processReport(address)": {
          "notice": "Process the report of a strategy."
        },
        "profitMaxUnlockTime()": {
          "notice": "The amount of time profits will unlock over."
        },
        "profitUnlockingRate()": {
          "notice": "The per second rate at which profit will unlock."
        },
        "redeem(uint256,address,address,uint256,address[])": {
          "notice": "Redeems an amount of shares of `owners` shares sending funds to `receiver`."
        },
        "revokeStrategy(address)": {
          "notice": "Revoke a strategy."
        },
        "roleManager()": {
          "notice": "Address that can add and remove roles to addresses."
        },
        "roles(address)": {
          "notice": "HashMap mapping addresses to their roles"
        },
        "setAccountant(address)": {
          "notice": "Set the new accountant address."
        },
        "setDefaultQueue(address[])": {
          "notice": "Set the new default queue array."
        },
        "setDepositLimit(uint256)": {
          "notice": "Set the new deposit limit."
        },
        "setDepositLimitModule(address)": {
          "notice": "Set a contract to handle the deposit limit."
        },
        "setFees(uint256,uint256,uint256,address)": {
          "notice": "Set fees and refunds."
        },
        "setMinimumTotalIdle(uint256)": {
          "notice": "Set the new minimum total idle."
        },
        "setProfitMaxUnlockTime(uint256)": {
          "notice": "Set the new profit max unlock time."
        },
        "setUseDefaultQueue(bool)": {
          "notice": "Set a new value for `use_default_queue`."
        },
        "setWithdrawLimitModule(address)": {
          "notice": "Set a contract to handle the withdraw limit."
        },
        "sharesName()": {
          "notice": "ERC20 - name of the vault's token"
        },
        "sharesSymbol()": {
          "notice": "ERC20 - symbol of the vault's token"
        },
        "shutdown()": {
          "notice": "State of the vault - if set to true, only withdrawals will be available. It can't be reverted."
        },
        "shutdownVault()": {
          "notice": "Shutdown the vault."
        },
        "strategies(address)": {
          "notice": "HashMap that records all the strategies that are allowed to receive assets from the vault."
        },
        "symbol()": {
          "notice": "ERC20 - symbol of the vault's token"
        },
        "totalAssets()": {
          "notice": "Get the total assets held by the vault."
        },
        "totalDebtAmount()": {
          "notice": "Total amount of assets that has been deposited in strategies."
        },
        "totalIdleAmount()": {
          "notice": "Current assets held in the vault contract. Replacing balanceOf(this) to avoid pricePerShare manipulation."
        },
        "totalSupply()": {
          "notice": "Get the total supply of shares."
        },
        "totalSupplyAmount()": {
          "notice": "Total amount of shares that are currently minted including those locked. NOTE: To get the ERC20 compliant version use totalSupply()."
        },
        "transfer(address,uint256)": {
          "notice": "Transfer shares to a receiver."
        },
        "transferFrom(address,address,uint256)": {
          "notice": "Transfer shares from a sender to a receiver."
        },
        "unlockedShares()": {
          "notice": "Get the amount of shares that have been unlocked."
        },
        "updateDebt(address,address,uint256)": {
          "notice": "Update the debt for a strategy."
        },
        "updateMaxDebtForStrategy(address,uint256)": {
          "notice": "Update the max debt for a strategy."
        },
        "useDefaultQueue()": {
          "notice": "Should the vault use the default_queue regardless whats passed in."
        },
        "withdraw(uint256,address,address,uint256,address[])": {
          "notice": "Withdraw an amount of asset to `receiver` burning `owner`s shares."
        },
        "withdrawLimitModule()": {
          "notice": "Contract to control the withdraw limit."
        }
      },
      "notice": "The Fathom Vault is designed as a non-opinionated system to distribute funds of depositors for a specific `asset` into different opportunities (aka Strategies) and manage accounting in a robust way.",
      "version": 1
    },
    "storageLayout": {
      "storage": [
        {
          "astId": 24,
          "contract": "contracts/packages/VaultPackage.sol:VaultPackage",
          "label": "_roles",
          "offset": 0,
          "slot": "0",
          "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
        },
        {
          "astId": 796,
          "contract": "contracts/packages/VaultPackage.sol:VaultPackage",
          "label": "_status",
          "offset": 0,
          "slot": "1",
          "type": "t_uint256"
        },
        {
          "astId": 3876,
          "contract": "contracts/packages/VaultPackage.sol:VaultPackage",
          "label": "DOMAIN_SEPARATOR",
          "offset": 0,
          "slot": "2",
          "type": "t_bytes32"
        },
        {
          "astId": 3879,
          "contract": "contracts/packages/VaultPackage.sol:VaultPackage",
          "label": "totalSupplyAmount",
          "offset": 0,
          "slot": "3",
          "type": "t_uint256"
        },
        {
          "astId": 3882,
          "contract": "contracts/packages/VaultPackage.sol:VaultPackage",
          "label": "totalDebtAmount",
          "offset": 0,
          "slot": "4",
          "type": "t_uint256"
        },
        {
          "astId": 3885,
          "contract": "contracts/packages/VaultPackage.sol:VaultPackage",
          "label": "totalIdleAmount",
          "offset": 0,
          "slot": "5",
          "type": "t_uint256"
        },
        {
          "astId": 3888,
          "contract": "contracts/packages/VaultPackage.sol:VaultPackage",
          "label": "minimumTotalIdle",
          "offset": 0,
          "slot": "6",
          "type": "t_uint256"
        },
        {
          "astId": 3891,
          "contract": "contracts/packages/VaultPackage.sol:VaultPackage",
          "label": "depositLimit",
          "offset": 0,
          "slot": "7",
          "type": "t_uint256"
        },
        {
          "astId": 3894,
          "contract": "contracts/packages/VaultPackage.sol:VaultPackage",
          "label": "profitMaxUnlockTime",
          "offset": 0,
          "slot": "8",
          "type": "t_uint256"
        },
        {
          "astId": 3897,
          "contract": "contracts/packages/VaultPackage.sol:VaultPackage",
          "label": "fullProfitUnlockDate",
          "offset": 0,
          "slot": "9",
          "type": "t_uint256"
        },
        {
          "astId": 3900,
          "contract": "contracts/packages/VaultPackage.sol:VaultPackage",
          "label": "profitUnlockingRate",
          "offset": 0,
          "slot": "10",
          "type": "t_uint256"
        },
        {
          "astId": 3903,
          "contract": "contracts/packages/VaultPackage.sol:VaultPackage",
          "label": "lastProfitUpdate",
          "offset": 0,
          "slot": "11",
          "type": "t_uint256"
        },
        {
          "astId": 3906,
          "contract": "contracts/packages/VaultPackage.sol:VaultPackage",
          "label": "accountant",
          "offset": 0,
          "slot": "12",
          "type": "t_address"
        },
        {
          "astId": 3909,
          "contract": "contracts/packages/VaultPackage.sol:VaultPackage",
          "label": "depositLimitModule",
          "offset": 0,
          "slot": "13",
          "type": "t_address"
        },
        {
          "astId": 3912,
          "contract": "contracts/packages/VaultPackage.sol:VaultPackage",
          "label": "withdrawLimitModule",
          "offset": 0,
          "slot": "14",
          "type": "t_address"
        },
        {
          "astId": 3915,
          "contract": "contracts/packages/VaultPackage.sol:VaultPackage",
          "label": "roleManager",
          "offset": 0,
          "slot": "15",
          "type": "t_address"
        },
        {
          "astId": 3918,
          "contract": "contracts/packages/VaultPackage.sol:VaultPackage",
          "label": "futureRoleManager",
          "offset": 0,
          "slot": "16",
          "type": "t_address"
        },
        {
          "astId": 3921,
          "contract": "contracts/packages/VaultPackage.sol:VaultPackage",
          "label": "factoryAddress",
          "offset": 0,
          "slot": "17",
          "type": "t_address"
        },
        {
          "astId": 3924,
          "contract": "contracts/packages/VaultPackage.sol:VaultPackage",
          "label": "customFeeRecipient",
          "offset": 0,
          "slot": "18",
          "type": "t_address"
        },
        {
          "astId": 3928,
          "contract": "contracts/packages/VaultPackage.sol:VaultPackage",
          "label": "assetContract",
          "offset": 0,
          "slot": "19",
          "type": "t_contract(IERC20)1515"
        },
        {
          "astId": 3931,
          "contract": "contracts/packages/VaultPackage.sol:VaultPackage",
          "label": "customFeeBPS",
          "offset": 20,
          "slot": "19",
          "type": "t_uint16"
        },
        {
          "astId": 3934,
          "contract": "contracts/packages/VaultPackage.sol:VaultPackage",
          "label": "useDefaultQueue",
          "offset": 22,
          "slot": "19",
          "type": "t_bool"
        },
        {
          "astId": 3937,
          "contract": "contracts/packages/VaultPackage.sol:VaultPackage",
          "label": "shutdown",
          "offset": 23,
          "slot": "19",
          "type": "t_bool"
        },
        {
          "astId": 3940,
          "contract": "contracts/packages/VaultPackage.sol:VaultPackage",
          "label": "initialized",
          "offset": 24,
          "slot": "19",
          "type": "t_bool"
        },
        {
          "astId": 3943,
          "contract": "contracts/packages/VaultPackage.sol:VaultPackage",
          "label": "decimalsValue",
          "offset": 25,
          "slot": "19",
          "type": "t_uint8"
        },
        {
          "astId": 3946,
          "contract": "contracts/packages/VaultPackage.sol:VaultPackage",
          "label": "sharesName",
          "offset": 0,
          "slot": "20",
          "type": "t_string_storage"
        },
        {
          "astId": 3949,
          "contract": "contracts/packages/VaultPackage.sol:VaultPackage",
          "label": "sharesSymbol",
          "offset": 0,
          "slot": "21",
          "type": "t_string_storage"
        },
        {
          "astId": 3953,
          "contract": "contracts/packages/VaultPackage.sol:VaultPackage",
          "label": "defaultQueue",
          "offset": 0,
          "slot": "22",
          "type": "t_array(t_address)dyn_storage"
        },
        {
          "astId": 3956,
          "contract": "contracts/packages/VaultPackage.sol:VaultPackage",
          "label": "customFees",
          "offset": 0,
          "slot": "23",
          "type": "t_struct(FeeAssessment)4010_storage"
        },
        {
          "astId": 3962,
          "contract": "contracts/packages/VaultPackage.sol:VaultPackage",
          "label": "strategies",
          "offset": 0,
          "slot": "27",
          "type": "t_mapping(t_address,t_struct(StrategyParams)4001_storage)"
        },
        {
          "astId": 3967,
          "contract": "contracts/packages/VaultPackage.sol:VaultPackage",
          "label": "_balanceOf",
          "offset": 0,
          "slot": "28",
          "type": "t_mapping(t_address,t_uint256)"
        },
        {
          "astId": 3974,
          "contract": "contracts/packages/VaultPackage.sol:VaultPackage",
          "label": "_allowance",
          "offset": 0,
          "slot": "29",
          "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
        },
        {
          "astId": 3979,
          "contract": "contracts/packages/VaultPackage.sol:VaultPackage",
          "label": "nonces",
          "offset": 0,
          "slot": "30",
          "type": "t_mapping(t_address,t_uint256)"
        },
        {
          "astId": 3984,
          "contract": "contracts/packages/VaultPackage.sol:VaultPackage",
          "label": "roles",
          "offset": 0,
          "slot": "31",
          "type": "t_mapping(t_address,t_bytes32)"
        },
        {
          "astId": 3989,
          "contract": "contracts/packages/VaultPackage.sol:VaultPackage",
          "label": "openRoles",
          "offset": 0,
          "slot": "32",
          "type": "t_mapping(t_bytes32,t_bool)"
        }
      ],
      "types": {
        "t_address": {
          "encoding": "inplace",
          "label": "address",
          "numberOfBytes": "20"
        },
        "t_array(t_address)dyn_storage": {
          "base": "t_address",
          "encoding": "dynamic_array",
          "label": "address[]",
          "numberOfBytes": "32"
        },
        "t_bool": {
          "encoding": "inplace",
          "label": "bool",
          "numberOfBytes": "1"
        },
        "t_bytes32": {
          "encoding": "inplace",
          "label": "bytes32",
          "numberOfBytes": "32"
        },
        "t_contract(IERC20)1515": {
          "encoding": "inplace",
          "label": "contract IERC20",
          "numberOfBytes": "20"
        },
        "t_mapping(t_address,t_bool)": {
          "encoding": "mapping",
          "key": "t_address",
          "label": "mapping(address => bool)",
          "numberOfBytes": "32",
          "value": "t_bool"
        },
        "t_mapping(t_address,t_bytes32)": {
          "encoding": "mapping",
          "key": "t_address",
          "label": "mapping(address => bytes32)",
          "numberOfBytes": "32",
          "value": "t_bytes32"
        },
        "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
          "encoding": "mapping",
          "key": "t_address",
          "label": "mapping(address => mapping(address => uint256))",
          "numberOfBytes": "32",
          "value": "t_mapping(t_address,t_uint256)"
        },
        "t_mapping(t_address,t_struct(StrategyParams)4001_storage)": {
          "encoding": "mapping",
          "key": "t_address",
          "label": "mapping(address => struct StrategyParams)",
          "numberOfBytes": "32",
          "value": "t_struct(StrategyParams)4001_storage"
        },
        "t_mapping(t_address,t_uint256)": {
          "encoding": "mapping",
          "key": "t_address",
          "label": "mapping(address => uint256)",
          "numberOfBytes": "32",
          "value": "t_uint256"
        },
        "t_mapping(t_bytes32,t_bool)": {
          "encoding": "mapping",
          "key": "t_bytes32",
          "label": "mapping(bytes32 => bool)",
          "numberOfBytes": "32",
          "value": "t_bool"
        },
        "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
          "encoding": "mapping",
          "key": "t_bytes32",
          "label": "mapping(bytes32 => struct AccessControl.RoleData)",
          "numberOfBytes": "32",
          "value": "t_struct(RoleData)19_storage"
        },
        "t_string_storage": {
          "encoding": "bytes",
          "label": "string",
          "numberOfBytes": "32"
        },
        "t_struct(FeeAssessment)4010_storage": {
          "encoding": "inplace",
          "label": "struct FeeAssessment",
          "members": [
            {
              "astId": 4003,
              "contract": "contracts/packages/VaultPackage.sol:VaultPackage",
              "label": "totalFees",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256"
            },
            {
              "astId": 4005,
              "contract": "contracts/packages/VaultPackage.sol:VaultPackage",
              "label": "totalRefunds",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256"
            },
            {
              "astId": 4007,
              "contract": "contracts/packages/VaultPackage.sol:VaultPackage",
              "label": "protocolFees",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256"
            },
            {
              "astId": 4009,
              "contract": "contracts/packages/VaultPackage.sol:VaultPackage",
              "label": "protocolFeeRecipient",
              "offset": 0,
              "slot": "3",
              "type": "t_address"
            }
          ],
          "numberOfBytes": "128"
        },
        "t_struct(RoleData)19_storage": {
          "encoding": "inplace",
          "label": "struct AccessControl.RoleData",
          "members": [
            {
              "astId": 16,
              "contract": "contracts/packages/VaultPackage.sol:VaultPackage",
              "label": "members",
              "offset": 0,
              "slot": "0",
              "type": "t_mapping(t_address,t_bool)"
            },
            {
              "astId": 18,
              "contract": "contracts/packages/VaultPackage.sol:VaultPackage",
              "label": "adminRole",
              "offset": 0,
              "slot": "1",
              "type": "t_bytes32"
            }
          ],
          "numberOfBytes": "64"
        },
        "t_struct(StrategyParams)4001_storage": {
          "encoding": "inplace",
          "label": "struct StrategyParams",
          "members": [
            {
              "astId": 3994,
              "contract": "contracts/packages/VaultPackage.sol:VaultPackage",
              "label": "activation",
              "offset": 0,
              "slot": "0",
              "type": "t_uint256"
            },
            {
              "astId": 3996,
              "contract": "contracts/packages/VaultPackage.sol:VaultPackage",
              "label": "lastReport",
              "offset": 0,
              "slot": "1",
              "type": "t_uint256"
            },
            {
              "astId": 3998,
              "contract": "contracts/packages/VaultPackage.sol:VaultPackage",
              "label": "currentDebt",
              "offset": 0,
              "slot": "2",
              "type": "t_uint256"
            },
            {
              "astId": 4000,
              "contract": "contracts/packages/VaultPackage.sol:VaultPackage",
              "label": "maxDebt",
              "offset": 0,
              "slot": "3",
              "type": "t_uint256"
            }
          ],
          "numberOfBytes": "128"
        },
        "t_uint16": {
          "encoding": "inplace",
          "label": "uint16",
          "numberOfBytes": "2"
        },
        "t_uint256": {
          "encoding": "inplace",
          "label": "uint256",
          "numberOfBytes": "32"
        },
        "t_uint8": {
          "encoding": "inplace",
          "label": "uint8",
          "numberOfBytes": "1"
        }
      }
    }
  }